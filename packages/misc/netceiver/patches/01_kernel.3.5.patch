diff -urN dvbloop-dkms_0.9.4/mcast/dvbloop/dvblo_adap_fe.c vdr-mcli-plugin/mcast/dvbloop/dvblo_adap_fe.c
--- dvbloop-dkms_0.9.4/mcast/dvbloop/dvblo_adap_fe.c	2012-03-08 11:30:47.000000000 +0100
+++ vdr-mcli-plugin/mcast/dvbloop/dvblo_adap_fe.c	2013-04-11 18:33:06.000000000 +0200
@@ -58,7 +58,7 @@
 #endif /*  */
 
 /* fontend ops */
-int dvblo_adap_fe_get_frontend (struct dvb_frontend *fe, struct dvb_frontend_parameters *params)
+int dvblo_adap_fe_get_frontend (struct dvb_frontend *fe, struct dvb_frontend_parameters *params)
 {
 	int rv = SUCCESS;
 	struct dvblo *dvblo = FE_PRIV (fe);
@@ -67,7 +67,7 @@
 		rv = -EINVAL;
 
 	else {
-		*params = dvblo->fe.params;
+//		*params = dvblo->fe.params;
 	}
 	return rv;
 }
@@ -81,7 +81,7 @@
 		rv = -EINVAL;
 
 	else {
-		dvblo->fe.params = *params;
+		//dvblo->fe.params = *params;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
 		if (dvblo_netceiver) {
 			struct dtv_frontend_properties *c =
@@ -90,21 +90,21 @@
 			if (c->delivery_system == SYS_DVBS2) {
 				switch ((int)c->fec_inner) {
 				case FEC_3_5:
-					dvblo->fe.params.u.qpsk.fec_inner =
+//					dvblo->fe.params.u.qpsk.fec_inner =
 						NETCEIVER_FEC_3_5;
 					break;
 				case FEC_9_10:
-					dvblo->fe.params.u.qpsk.fec_inner =
+//					dvblo->fe.params.u.qpsk.fec_inner =
 						NETCEIVER_FEC_9_10;
 					break;
 				}
 				switch ((int)c->modulation) {
 				case QPSK:
-					dvblo->fe.params.u.qpsk.fec_inner |=
+				//	dvblo->fe.params.u.qpsk.fec_inner |=
 						NETCEIVER_QPSK_S2 << 16;
 					break;
 				case PSK_8:
-					dvblo->fe.params.u.qpsk.fec_inner |=
+				//	dvblo->fe.params.u.qpsk.fec_inner |=
 						NETCEIVER_PSK8 << 16;
 					break;
 				}
@@ -128,7 +128,7 @@
 		settings->min_delay_ms = 2000;
 		settings->step_size = 0;
 		settings->max_drift = 0;
-		settings->parameters = dvblo->fe.params;
+//		settings->parameters = dvblo->fe.params;
 	}
 	return rv;
 }
@@ -295,7 +295,7 @@
 		rv = -EINVAL;
 
 	else {
-		dvblo->fe.tuner.params = *p;
+//		dvblo->fe.tuner.params = *p;
 		dvblo_set_event (dvblo, EV_TUNER);
 	}
 	return rv;
@@ -312,7 +312,7 @@
 		rv = -EINVAL;
 
 	else {
-		*frequency = dvblo->fe.tuner.params.frequency;
+//		*frequency = dvblo->fe.tuner.params.frequency;
 	}
 	return rv;
 }
@@ -326,7 +326,7 @@
 		rv = -EINVAL;
 
 	else {
-		dvblo->fe.tuner.params.frequency = frequency;
+//		dvblo->fe.tuner.params.frequency = frequency;
 		dvblo_set_event (dvblo, EV_FREQUENCY);
 	}
 	return rv;
@@ -348,7 +348,7 @@
 		rv = -EINVAL;
 
 	else {
-		*bandwidth = dvblo->fe.tuner.params.u.ofdm.bandwidth;
+//		*bandwidth = dvblo->fe.tuner.params.u.ofdm.bandwidth;
 	}
 	return rv;
 }
@@ -362,7 +362,7 @@
 		rv = -EINVAL;
 
 	else {
-		dvblo->fe.tuner.params.u.ofdm.bandwidth = bandwidth;
+//		dvblo->fe.tuner.params.u.ofdm.bandwidth = bandwidth;
 		dvblo_set_event (dvblo, EV_BANDWIDTH);
 	}
 	return rv;
diff -urN dvbloop-dkms_0.9.4/mcast/dvbloop/dvblo_adap.h vdr-mcli-plugin/mcast/dvbloop/dvblo_adap.h
--- dvbloop-dkms_0.9.4/mcast/dvbloop/dvblo_adap.h	2012-03-08 11:30:47.000000000 +0100
+++ vdr-mcli-plugin/mcast/dvbloop/dvblo_adap.h	2013-04-11 18:26:45.000000000 +0200
@@ -85,10 +85,10 @@
 	struct dvblo_adap_statistics stats;
 	struct
 	{
-		struct dvb_frontend_parameters params;
+		struct dvb_frontend *fe;
 		struct
 		{
-			struct dvb_frontend_parameters params;
+			struct dvb_frontend *fe;
 			u32 status;
 		} tuner;
 		dvblo_sec_t sec;
diff -urN dvbloop-dkms_0.9.4/mcast/dvbloop/dvblo_char.c vdr-mcli-plugin/mcast/dvbloop/dvblo_char.c
--- dvbloop-dkms_0.9.4/mcast/dvbloop/dvblo_char.c	2012-03-08 11:30:48.000000000 +0100
+++ vdr-mcli-plugin/mcast/dvbloop/dvblo_char.c	2013-04-11 18:59:14.000000000 +0200
@@ -569,30 +569,8 @@
 			rv = copy_to_user (argp, &event, sizeof (unsigned int));
 			return rv;
 	}
-	case DVBLO_GET_FRONTEND_PARAMETERS:
-		if (dvblo != NULL) {
-			return copy_to_user (argp, &dvblo->fe.params, sizeof (struct dvb_frontend_parameters));
-		} else {
-			return -EINVAL;
-		}
-	case DVBLO_SET_FRONTEND_PARAMETERS:
-		if (dvblo != NULL) {
-			return copy_from_user (&dvblo->fe.params, argp, sizeof (struct dvb_frontend_parameters));
-		} else {
-			return -EINVAL;
-		}
-	case DVBLO_GET_TUNER_PARAMETERS:
-		if (dvblo != NULL) {
-			return copy_to_user (argp, &dvblo->fe.tuner.params, sizeof (struct dvb_frontend_parameters));
-		} else {
-			return -EINVAL;
-		}
-	case DVBLO_SET_TUNER_PARAMETERS:
-		if (dvblo != NULL) {
-			return copy_from_user (&dvblo->fe.tuner.params, argp, sizeof (struct dvb_frontend_parameters));
-		} else {
-			return -EINVAL;
-		}
+
+
 	case DVBLO_GET_SEC_PARAMETERS:
 		if (dvblo != NULL) {
 			return copy_to_user (argp, &dvblo->fe.sec, sizeof (struct dvblo_sec));
diff -urN dvbloop-dkms_0.9.4/mcast/dvbloop/Makefile vdr-mcli-plugin/mcast/dvbloop/Makefile
--- dvbloop-dkms_0.9.4/mcast/dvbloop/Makefile	2012-03-08 11:30:48.000000000 +0100
+++ vdr-mcli-plugin/mcast/dvbloop/Makefile	2013-04-11 17:56:46.000000000 +0200
@@ -1,80 +1,80 @@
-# dvbloop - A DVB Loopback Device
-# Copyright (C) 2006 Christian Praehauser, Deti Fliegl
-#-----------------------------------------
-# File: Kbuild
-# Desc: Makefile for the Linux kernel build system
-# Date: October 2006
-# Author: Christian Praehauser <cpreahaus@cosy.sbg.ac.at>, Deti Fliegl <deti@fliegl.de>
-#
-# This file is released under the GPLv2.
-#
-ifeq ($(obj),)
-obj = .
-endif
-
-#################################################
-# Version Check
-
-ifneq ($(KERNELRELEASE),)
-
--include $(TOPDIR)/Rules.make
-
-else
-
-# take version info from last module build if available
--include $(obj)/.version
-
-ifneq ($(SRCDIR),)
-KDIR := $(SRCDIR)
-else
-ifneq ($(KERNELRELEASE),)
-KDIR := /lib/modules/$(KERNELRELEASE)/build
-else
-KDIR := /lib/modules/$(shell uname -r|perl -ne 'if (/^([0-9]*)\.([0-9])*\.([0-9]*)(.*)$$/) { printf ("%s.%s.%s%s\n",$$1,$$2,$$3,$$4); };')/build
-
-endif
-endif
-
-endif
-
-obj-m += dvbloop.o
-dvbloop-objs := dvblo.o dvblo_adap.o dvblo_adap_fe.o dvblo_char.o dvblo_util.o dvblo_adap_ca.o
-
-PWD=`pwd`
-
-ifneq ($(SRCDIR),)
-EXTRA_CFLAGS = \
-        -I$(SRCDIR)/drivers/media/dvb \
-        -Idrivers/media/dvb -I$(@D)/../linux
-else
-EXTRA_CFLAGS = \
-	-I/usr/src/linux/drivers/media/dvb \
-	-Idrivers/media/dvb -I$(@D)/../linux
-endif
-
-default: build
-
-test:
-	gcc -g -lpthread -o dvblo_test -D_GNU_SOURCE dvblo_test.c
-
-load:
-	modprobe dvb_core
-	insmod ./dvbloop.ko
-
-unload:
-	rmmod dvbloop
-	
-reload: unload load
-
-build:
-	make -C $(KDIR) M=$(PWD) modules
-
-install: build
-	make -C $(KDIR) M=$(PWD) modules_install
-
-help:
-	make -C $(KDIR) M=$(PWD) help
-
-clean:
-	@rm -f *~ dvblo_test
-	make -C $(KDIR) M=$(PWD) clean
+# dvbloop - A DVB Loopback Device
+# Copyright (C) 2006 Christian Praehauser, Deti Fliegl
+#-----------------------------------------
+# File: Kbuild
+# Desc: Makefile for the Linux kernel build system
+# Date: October 2006
+# Author: Christian Praehauser <cpreahaus@cosy.sbg.ac.at>, Deti Fliegl <deti@fliegl.de>
+#
+# This file is released under the GPLv2.
+#
+ifeq ($(obj),)
+obj = .
+endif
+
+#################################################
+# Version Check
+
+ifneq ($(KERNELRELEASE),)
+
+-include $(TOPDIR)/Rules.make
+
+else
+
+# take version info from last module build if available
+-include $(obj)/.version
+
+ifneq ($(SRCDIR),)
+KDIR := $(SRCDIR)
+else
+ifneq ($(KERNELRELEASE),)
+KDIR := /lib/modules/$(KERNELRELEASE)/build
+else
+KDIR := /lib/modules/$(shell uname -r|perl -ne 'if (/^([0-9]*)\.([0-9])*\.([0-9]*)(.*)$$/) { printf ("%s.%s.%s%s\n",$$1,$$2,$$3,$$4); };')/build
+
+endif
+endif
+
+endif
+
+obj-m += dvbloop.o
+dvbloop-objs := dvblo.o dvblo_adap.o dvblo_adap_fe.o dvblo_char.o dvblo_util.o dvblo_adap_ca.o
+
+PWD=`pwd`
+
+ifneq ($(SRCDIR),)
+EXTRA_CFLAGS = \
+        -I$(SRCDIR)/drivers/media/dvb \
+        -Idrivers/media/dvb -I$(@D)/../linux
+else
+EXTRA_CFLAGS = \
+	-I/usr/src/linux/drivers/media/dvb \
+	-Idrivers/media/dvb -I$(@D)/../linux
+endif
+
+default: build
+
+test:
+	gcc -g -lpthread -o dvblo_test -D_GNU_SOURCE dvblo_test.c
+
+load:
+	modprobe dvb_core
+	insmod ./dvbloop.ko
+
+unload:
+	rmmod dvbloop
+	
+reload: unload load
+
+build:
+	make -C $(KDIR) M=$(PWD) modules
+
+install: build
+	make -C $(KDIR) M=$(PWD) modules_install
+
+help:
+	make -C $(KDIR) M=$(PWD) help
+
+clean:
+	@rm -f *~ dvblo_test
+	make -C $(KDIR) M=$(PWD) clean
diff -urN dvbloop-dkms_0.9.4/mcast/dvbloop/TODO.txt vdr-mcli-plugin/mcast/dvbloop/TODO.txt
--- dvbloop-dkms_0.9.4/mcast/dvbloop/TODO.txt	2012-03-08 11:30:48.000000000 +0100
+++ vdr-mcli-plugin/mcast/dvbloop/TODO.txt	2013-04-11 17:56:46.000000000 +0200
@@ -1,33 +1,33 @@
-dvbloop - A virtual DVB Adapter - TODOs 
-
-* register under class "misc"
-
-* Make the first char device the "control device"
-
-* Support setting the PID that is used via ioctl() 
-
-* Maybe support writev, the vector version of write.
-
-* Use print_dev_t() and/or format_dev_t() for outputing device numbers.
-
-* Verify that inputs are conformant TS streams (yes, do TS sync)
-Also check PIDs and avoid that the same PID is used by more than one input stream. This could be done by internally remapping PIDs (however, this not the way to go, since it is too complex and too automatic) or by simply returning errors.
-
-* Maybe respect O_NONBLOCK in filp->flags
-This would essentially mean that we do mutex locking with down_trylock() and return immediately with -EAGAIN if the mutex is held by another process.
-See LDD chapter 6
-
-* Maybe support poll()
-See LDD chapter 6
-
-* Support for specifying (max) output bit-rates?
-If this should be implemented seriously:
- (1) Each open file handle is assigned an input buffer
- (2) Then, if somebody invokes char_op_write(), we really act as a multiplexer and select the input queue (the buffer assoc. with every file handle) from which we want to transfer next, respecting rate limitations. Funny huh?
-This would also make another feature possible: input stream priorization :-)
-Of course, with this design we could also specify max input bit-rates (per input stream/open file handle)
-At this point, we need sophisticated support for non-blocking operation, too!
-
-All things considered, this would require much work, and is probably a candidate for a "version 2.0".
-
+dvbloop - A virtual DVB Adapter - TODOs 
+
+* register under class "misc"
+
+* Make the first char device the "control device"
+
+* Support setting the PID that is used via ioctl() 
+
+* Maybe support writev, the vector version of write.
+
+* Use print_dev_t() and/or format_dev_t() for outputing device numbers.
+
+* Verify that inputs are conformant TS streams (yes, do TS sync)
+Also check PIDs and avoid that the same PID is used by more than one input stream. This could be done by internally remapping PIDs (however, this not the way to go, since it is too complex and too automatic) or by simply returning errors.
+
+* Maybe respect O_NONBLOCK in filp->flags
+This would essentially mean that we do mutex locking with down_trylock() and return immediately with -EAGAIN if the mutex is held by another process.
+See LDD chapter 6
+
+* Maybe support poll()
+See LDD chapter 6
+
+* Support for specifying (max) output bit-rates?
+If this should be implemented seriously:
+ (1) Each open file handle is assigned an input buffer
+ (2) Then, if somebody invokes char_op_write(), we really act as a multiplexer and select the input queue (the buffer assoc. with every file handle) from which we want to transfer next, respecting rate limitations. Funny huh?
+This would also make another feature possible: input stream priorization :-)
+Of course, with this design we could also specify max input bit-rates (per input stream/open file handle)
+At this point, we need sophisticated support for non-blocking operation, too!
+
+All things considered, this would require much work, and is probably a candidate for a "version 2.0".
+
 * Create own MUX thread using kernel_thread()
\ Manca newline alla fine del file
