diff -uNr ndiswrapper-1.56.old/driver/usb.c ndiswrapper-1.56/driver/usb.c
--- ndiswrapper-1.56.old/driver/usb.c	2010-02-10 18:09:32.000000000 -0800
+++ ndiswrapper-1.56/driver/usb.c	2010-07-25 02:29:25.442145846 -0700
@@ -191,9 +191,15 @@
 	if (wrap_urb->flags & WRAP_URB_COPY_BUFFER) {
 		USBTRACE("freeing DMA buffer for URB: %p %p",
 			 urb, urb->transfer_buffer);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
 		usb_buffer_free(IRP_WRAP_DEVICE(irp)->usb.udev,
+                                urb->transfer_buffer_length,
+                                urb->transfer_buffer, urb->transfer_dma);
+#else
+		usb_free_coherent(IRP_WRAP_DEVICE(irp)->usb.udev,
 				urb->transfer_buffer_length,
 				urb->transfer_buffer, urb->transfer_dma);
+#endif
 	}
 	if (urb->setup_packet)
 		kfree(urb->setup_packet);
@@ -303,9 +309,16 @@
 			       || PageHighMem(virt_to_page(buf))
 #endif
 		    )) {
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
 		urb->transfer_buffer =
-			usb_buffer_alloc(wd->usb.udev, buf_len, alloc_flags,
+                        usb_buffer_alloc(wd->usb.udev, buf_len, alloc_flags,
+                                         &urb->transfer_dma);
+#else
+		urb->transfer_buffer =
+			usb_alloc_coherent(wd->usb.udev, buf_len, alloc_flags,
 					 &urb->transfer_dma);
+#endif
 		if (!urb->transfer_buffer) {
 			WARNING("couldn't allocate dma buf");
 			IoAcquireCancelSpinLock(&irp->cancel_irql);
