#!/bin/sh

. config/options

get_meta $1

require_cxx $1

die () {
  echo "Unable to build QT: enable either Embedded or X11 flavor and try again"
  exit 1
}

select_qt_embedded () {
  CFG_EMBEDDED="$CFG_EMBEDDED -embedded $CROSS_ARCH"
  CFG_EMBEDDED="$CFG_EMBEDDED -depths all"

  CFG_EMBEDDED="$CFG_EMBEDDED -qt-gfx-linuxfb"

  pkg_uses $1 directfb && \
    CFG_EMBEDDED="$CFG_EMBEDDED -qt-gfx-directfb"

  CFG_EMBEDDED="$CFG_EMBEDDED -qt-kbd-tty"
  CFG_EMBEDDED="$CFG_EMBEDDED -qt-kbd-linuxinput"

  CFG_EMBEDDED="$CFG_EMBEDDED -qt-mouse-pc"
  CFG_EMBEDDED="$CFG_EMBEDDED -qt-mouse-linuxinput"

  pkg_uses $1 touchscreen && \
    CFG_EMBEDDED="$CFG_EMBEDDED -qt-mouse-tslib"

  return 0
}

select_qt_x11 () {
  CFG_X="$CFG_X -xcursor"
  CFG_X="$CFG_X -xrandr"
  CFG_X="$CFG_X -xrender"
  CFG_X="$CFG_X -xinput"
  CFG_X="$CFG_X -xkb"

  return 0
}

enable_feature () {
  use_flag=$2
  qt_flag=$3
  qt_mode=$4

  [ -z "$qt_flag" ] && qt_flag=$use_flag

  if pkg_uses $1 $use_flag; then
    if [ -z "$qt_mode" ]; then
      CFG_QT_FEATURES="$CFG_QT_FEATURES -$qt_flag"
    else
      CFG_QT_FEATURES="$CFG_QT_FEATURES -$qt_mode-$qt_flag"
    fi
  else
    CFG_QT_FEATURES="$CFG_QT_FEATURES -no-$qt_flag"
  fi
}

strip_option () {
  echo "$1" | sed -e "s%$2%%g"
}

extra_options_gles () {
  case "$GLES_PROVIDER" in
    sgx)
      ;;
    tegra)
      ;;
    imx5)
      ;;
    imx6)
      if pkg_uses $1 xorg; then
        TARGET_CFLAGS="$TARGET_CFLAGS -DLINUX"
      elif pkg_uses $1 directfb; then
        TARGET_CFLAGS="$TARGET_CFLAGS -DLINUX -DEGL_API_DFB"
      else
        TARGET_CFLAGS="$TARGET_CFLAGS -DLINUX -DEGL_API_FB"
      fi
      ;;
    mali)
      ;;
    vivante)
      TARGET_CFLAGS="$TARGET_CFLAGS -lGLESv2 -lEGL"
      ;;
    vc)
      TARGET_CFLAGS="$TARGET_CFLAGS -I$LIB_PREFIX/include/interface/vmcs_host/linux"
      TARGET_CFLAGS="$TARGET_CFLAGS -I$LIB_PREFIX/include/interface/vcos/pthreads"
      TARGET_CFLAGS="$TARGET_CFLAGS -lGLESv2"
      ;;
  esac
}

# Ensure one of the qualifying flags has been set to build QT.
if ! pkg_uses $1 embedded && ! pkg_uses $1 xorg; then
  die
fi

# architecture specific options
case "$TARGET_ARCH" in
  i386)
    CROSS_ARCH=i386
    CROSS_ENDIAN="-little-endian"
    ;;

  x86_64)
    CROSS_ARCH=x86_64
    CROSS_ENDIAN="-little-endian"
    ;;

  powerpc|powerpc64)
    CROSS_ARCH=powerpc
    CROSS_ENDIAN="-big-endian"
    ;;

  arm)
    CROSS_ARCH=arm
    CROSS_ENDIAN="-little-endian"
    ;;

  mips)
    CROSS_ARCH=mips
    CROSS_ENDIAN="-big-endian"
    ;;
esac

if [ "$FPU_OPTIMIZATIONS" = neon ]; then
  CFG_NEON=""
else
  CFG_NEON="-no-neon"
fi

if pkg_uses $1 xorg; then
  select_qt_x11 $1
  CFG_QT="$CFG_X"
else
  select_qt_embedded $1
  CFG_QT="$CFG_EMBEDDED"
  KEYMAPS="de de-latin1 fr fr-latin1 it it2"
fi

CFG_QT_FEATURES=""
if pkg_uses $1 opengl; then
  enable_feature $1 "opengl" "opengl desktop"
elif pkg_uses $1 opengles; then
  extra_options_gles
  enable_feature $1 "opengles" "opengl es2"
else
  enable_feature $1 "" "opengl"
fi

enable_feature $1 "openvg"
enable_feature $1 "openssl"
enable_feature $1 "gstreamer" "glib"
enable_feature $1 "gstreamer" "phonon"
enable_feature $1 "gstreamer" "phonon-backend"
enable_feature $1 "qt3" "qt3support"
enable_feature $1 "webkit"
enable_feature $1 "webkit" "javascript-jit"
enable_feature $1 "declarative"
enable_feature $1 "declarative" "declarative-debug"
enable_feature $1 "cups"

enable_feature $1 "tds" "sql-tds" "plugin"
enable_feature $1 "mysql" "sql-mysql" "plugin"
enable_feature $1 "psql" "sql-psql" "plugin"
#enable_feature $1 "sqlite" "sql-sqlite" "qt"

if pkg_uses $1 devtools; then
  CFG_QT_DOCS="-make docs"
else
  CFG_QT_DOCS="-nomake docs"
fi


cd $PKG_BUILD_DIR

setup_toolchain host

MKSPECS_DIR="$ROOT/$PKG_BUILD_DIR/mkspecs/linux-g++-openbricks"
mkdir -p $MKSPECS_DIR

QMAKE_CONF=$MKSPECS_DIR/qmake.conf
pkg_uses $1 mysql && MYSQL_INCDIR="$LIB_PREFIX/include/mysql"


# why ?
TARGET_CFLAGS="$(strip_option "$TARGET_CFLAGS" -mthumb)"

# gcc 4.9.x doesn't like this...
TARGET_CFLAGS="$(strip_option "$TARGET_CFLAGS" -fgraphite-identity)"

# get rid of lto, which might cause undefined symbols
TARGET_CFLAGS="$(strip_option "$TARGET_CFLAGS" -flto\\S*)"

# get rid of -Ox, which will be set by QMAKE
TARGET_CFLAGS="$(strip_option "$TARGET_CFLAGS" -O\\S*)"

cat > $MKSPECS_DIR/qplatformdefs.h <<EOF
#include "../linux-g++/qplatformdefs.h"
EOF

cat > $QMAKE_CONF <<EOF
MAKEFILE_GENERATOR      = UNIX
TARGET_PLATFORM         = unix
TEMPLATE                = app
CONFIG                  += qt warn_on release incremental link_prl
QT                      += core gui network
QMAKE_INCREMENTAL_STYLE = sublib

CFG_ARCH		= $CROSS_ARCH
QMAKE_CFLAGS		= $TARGET_CFLAGS
QMAKE_LFLAGS		= $TARGET_CFLAGS

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)
load(qt_config)

QMAKE_CC                = $TARGET_CC
QMAKE_CXX               = $TARGET_CXX
QMAKE_LINK              = $TARGET_CXX
QMAKE_LINK_SHLIB        = $TARGET_CXX
QMAKE_AR                = $TARGET_AR cqs
QMAKE_OBJCOPY           = $TARGET_OBJCOPY
QMAKE_RANLIB            = $TARGET_RANLIB
QMAKE_STRIP             = $TARGET_STRIP
QMAKE_NM                = $TARGET_NM -P

# Headers Search Path
QMAKE_INCDIR            = $LIB_PREFIX/include
QMAKE_INCDIR           += $LIB_PREFIX/include/freetype2 $MYSQL_INCDIR
QMAKE_INCDIR_X11        = $LIB_PREFIX/include/X11
QMAKE_INCDIR_OPENGL     = $LIB_PREFIX/include
QMAKE_INCDIR_QT         = $LIB_PREFIX/include/qt4

# Libraries Search Path
QMAKE_LIBDIR            = $LIB_PREFIX/lib
QMAKE_LIBDIR_X11        = $LIB_PREFIX/lib
QMAKE_LIBDIR_OPENGL     = $LIB_PREFIX/lib
QMAKE_LIBDIR_QT         = $LIB_PREFIX/lib

EOF

if [ "$FPU_OPTIMIZATIONS" = neon ]; then
  if [ "$TARGET_ABI" = eabihf ] ; then
    ABI=hard
  else
    ABI=softfp
  fi
  cat >> $QMAKE_CONF <<EOF
# Work round ARM NEON compilation flags
QMAKE_CXXFLAGS_RELEASE += -mfpu=neon -mfloat-abi=$ABI

EOF
fi

cat >> $QMAKE_CONF <<EOF
load(qt_config)
EOF

# unset flags, QT does it by itself
unset CC CXX AR OBJCOPY STRIP CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD

# force our pkg-config usage
export QT_FORCE_PKGCONFIG=yes
export PKG_CONFIG_PATH=$LIB_PREFIX/lib/pkgconfig

# qmakespec is yet to be built, unset it
unset QMAKESPEC

# uncomment to debug configure process
#CFG_VERBOSE=-v

yes | ./configure $CFG_VERBOSE \
            -opensource \
            -release \
            -prefix         "/usr" \
            -bindir         "/usr/bin" \
            -libdir         "/usr/lib" \
            -docdir         "/usr/share/qt4/doc" \
            -headerdir      "/usr/include/qt4" \
            -datadir        "/usr/share/qt4" \
            -plugindir      "/usr/lib/qt4/plugins" \
            -importdir      "/usr/lib/qt4/imports" \
            -translationdir "/usr/share/qt4/translations" \
            -sysconfdir     "/etc" \
            -demosdir       "/usr/lib/qt4/demos" \
            -examplesdir    "/usr/lib/qt4/examples" \
            -crossarch $CROSS_ARCH \
            -fast \
            -shared \
            -no-pch \
            -no-nis \
            -no-rpath \
            -no-separate-debug-info \
            $CROSS_ENDIAN \
            $CFG_NEON \
            -platform linux-g++ \
            -xplatform linux-g++-openbricks \
            $CFG_QT \
            $CFG_QT_FEATURES \
            -plugin-sql-sqlite \
            -system-sqlite \
            -exceptions \
            -xmlpatterns \
            -multimedia \
            -audio-backend \
            -stl \
            -dbus \
            -script \
            -scripttools \
            -make libs \
            -make tools \
            -make translations \
            $CFG_QT_DOCS \
            -nomake demos \
            -nomake examples \
            -mysql_config	"/dev/null" \
            -psql_config	"/dev/null"

./bin/qmake
make

# build host version of kmap2qmap
if [ -n "$KEYMAPS" ]; then
  cd tools/kmap2qmap-host
  ../../bin/qmake -spec ../../mkspecs/linux-g++ -o Makefile kmap2qmap.pro
  make
  cd ../..
fi

setup_toolchain target # restore target flags for install
make_install

# create keymaps ...
if [ -n "$KEYMAPS" ]; then
  kmaps=$LIB_PREFIX/share/keymaps/i386
  qmaps=.install/usr/share/qt4/keymaps
  mkdir -p $qmaps
  for m in $KEYMAPS; do
    ./bin-host/kmap2qmap $kmaps/*/$m.map $qmaps/$m.qmap 1>/dev/null 2>&1
  done
fi

# fix include path in pkgconfig files
sed -e "s%-I/usr/%-I\${prefix}/%g" \
    -i .install/usr/lib/pkgconfig/*.pc

# discard native system includes and libs
sed -e "s%-[IL]/usr/[^ ]*%%g" \
    -i .install/usr/lib/pkgconfig/*.pc \
       .install/usr/lib/*.la .install/usr/lib/*.prl

# remove debug info for host binaries
rm -rf .install-debuginfo
