--- vdr-1.7.38.orig/channels.c	2013-02-18 11:36:24.560286761 +0100
+++ vdr-1.7.38/channels.c	2013-02-18 11:37:34.776404025 +0100
@@ -13,6 +13,9 @@
 #include "epg.h"
 #include "libsi/si.h"
 #include "timers.h"
+#ifdef USE_ALTERNATECHANNEL
+#include "tools.h"
+#endif /* ALTERNATECHANNEL */
 
 // IMPORTANT NOTE: in the 'sscanf()' calls there is a blank after the '%d'
 // format characters in order to allow any number of blanks after a numeric
@@ -285,6 +288,14 @@
      }
 }
 
+#ifdef USE_ALTERNATECHANNEL
+void cChannel::SetAlternativeChannelID(const char *AlternativeChannelID)
+{
+  if (!isempty(AlternativeChannelID))
+    alternativeChannelID = tChannelID::FromString(AlternativeChannelID);
+}
+#endif /* ALTERNATECHANNEL */
+
 #define STRDIFF 0x01
 #define VALDIFF 0x02
 
@@ -408,6 +419,28 @@
      }
 }
 
+#ifdef USE_TTXTSUBS
+void cChannel::SetTeletextSubtitlePages(tTeletextSubtitlePage pages[], int numberOfPages)
+{
+  int mod = CHANNELMOD_NONE;
+  if (totalTtxtSubtitlePages != (fixedTtxtSubtitlePages + numberOfPages))
+     mod |= CHANNELMOD_PIDS;
+  totalTtxtSubtitlePages = fixedTtxtSubtitlePages;
+  for (int i = 0; (i < numberOfPages) && (totalTtxtSubtitlePages < MAXTXTPAGES); i++) {
+      if (teletextSubtitlePages[totalTtxtSubtitlePages].ttxtMagazine != pages[i].ttxtMagazine ||
+          teletextSubtitlePages[totalTtxtSubtitlePages].ttxtPage != pages[i].ttxtPage ||
+          teletextSubtitlePages[totalTtxtSubtitlePages].ttxtType != pages[i].ttxtType ||
+          strcmp(teletextSubtitlePages[totalTtxtSubtitlePages].ttxtLanguage, pages[i].ttxtLanguage)) {
+         mod |= CHANNELMOD_PIDS;
+         teletextSubtitlePages[totalTtxtSubtitlePages] = pages[i];
+         }
+      totalTtxtSubtitlePages++;
+      }
+  modification |= mod;
+  Channels.SetModified();
+}
+#endif // USE_TTXTSUBS
+
 void cChannel::SetCaIds(const int *CaIds)
 {
   if (caids[0] && caids[0] <= CA_USER_MAX)
@@ -536,10 +569,23 @@
         q += IntArrayToString(q, Channel->dpids, 10, Channel->dlangs, Channel->dtypes);
         }
      *q = 0;
+#ifdef USE_TTXTSUBS
+     const int TBufferSize = (MAXTXTPAGES * MAXSPIDS) * (5 + 1 + MAXLANGCODE2) + 10; // 5 digits plus delimiting ',' or ';' plus optional '=cod+cod', +10: paranoia and tpid
+#else
      const int TBufferSize = MAXSPIDS * (5 + 1 + MAXLANGCODE2) + 10; // 5 digits plus delimiting ',' or ';' plus optional '=cod+cod', +10: paranoia and tpid
+#endif
      char tpidbuf[TBufferSize];
      q = tpidbuf;
      q += snprintf(q, sizeof(tpidbuf), "%d", Channel->tpid);
+#ifdef USE_TTXTSUBS
+     if (Channel->fixedTtxtSubtitlePages > 0) {
+        *q++ = '+';
+        for (int i = 0; i < Channel->fixedTtxtSubtitlePages; ++i) {
+            tTeletextSubtitlePage page = Channel->teletextSubtitlePages[i];
+            q += snprintf(q, sizeof(tpidbuf) - (q - tpidbuf), "%d=%s", page.PageNumber(), page.ttxtLanguage);
+            }
+        }
+#endif // USE_TTXTSUBS
      if (Channel->spids[0]) {
         *q++ = ';';
         q += IntArrayToString(q, Channel->spids, 10, Channel->slangs);
@@ -710,6 +756,34 @@
                     }
               spids[NumSpids] = 0;
               }
+#ifdef USE_TTXTSUBS
+           fixedTtxtSubtitlePages = 0;
+           if ((p = strchr(tpidbuf, '+')) != NULL) {
+              *p++ = 0;
+              char *q;
+              char *strtok_next;
+              while ((q = strtok_r(p, ",", &strtok_next)) != NULL) {
+                    if (fixedTtxtSubtitlePages < MAXTXTPAGES) {
+                       int page;
+                       char *l = strchr(q, '=');
+                       if (l)
+                          *l++ = 0;
+                       if (sscanf(q, "%d", &page) == 1) {
+                          teletextSubtitlePages[fixedTtxtSubtitlePages] = tTeletextSubtitlePage(page);
+                          if (l)
+                             strn0cpy(teletextSubtitlePages[fixedTtxtSubtitlePages].ttxtLanguage, l, MAXLANGCODE2);
+                          fixedTtxtSubtitlePages++;
+                          }
+                       else
+                          esyslog("ERROR: invalid Teletext page!"); // no need to set ok to 'false'
+                       }
+                    else
+                       esyslog("ERROR: too many Teletext pages!"); // no need to set ok to 'false'
+                    p = NULL;
+                    }
+              totalTtxtSubtitlePages = fixedTtxtSubtitlePages;
+              }
+#endif // USE_TTXTSUBS
            if (sscanf(tpidbuf, "%d", &tpid) != 1)
               return false;
            if (caidbuf) {
@@ -826,6 +900,50 @@
   return false;
 }
 
+#ifdef USE_ALTERNATECHANNEL
+bool cChannels::LoadAlternativeChannels(const char *FileName)
+{
+  FILE *fp;
+  char *line;
+  cReadLine ReadLine;
+  cChannel *origChannel;
+  tChannelID channelID;
+  if ((fp = fopen(FileName,"r"))==NULL)
+  {
+    esyslog("Can't open Alternative Channels-File <%s>",FileName);
+    return false;
+  }
+  while ((line = ReadLine.Read(fp)) != NULL)
+  {
+    if (line[0] != '#')
+    {
+      line=strtok(line, ";");
+      if (line != NULL)
+      {
+        channelID = tChannelID::FromString(line);
+        if (channelID == tChannelID::InvalidID)
+          dsyslog("Skipping invalid channel ID <%s>",line);
+        else {
+          origChannel = Channels.GetByChannelID(channelID);
+          if (!origChannel)
+            dsyslog("Skipping unknown channel ID <%s>",line);
+          else {
+            line=strtok(NULL, ";");
+            channelID = tChannelID::FromString(line);
+            if (channelID == tChannelID::InvalidID || !Channels.GetByChannelID(channelID))
+              dsyslog("Skipping invalid/unknown alternative channel ID <%s>",line);
+            else
+              origChannel->SetAlternativeChannelID(line);
+          }
+        }
+      }
+    }
+  } while (line != NULL);
+  fclose(fp);
+  return true;
+}
+#endif /* ALTERNATECHANNEL */
+
 void cChannels::HashChannel(cChannel *Channel)
 {
   channelsHashSid.Add(Channel, Channel->Sid());
--- vdr-1.7.38.orig/channels.h	2013-02-18 11:36:24.590286384 +0100
+++ vdr-1.7.38/channels.h	2013-02-18 11:37:34.778404000 +0100
@@ -35,6 +35,9 @@
 #define MAXDPIDS 16 // dolby (AC3 + DTS)
 #define MAXSPIDS 32 // subtitles
 #define MAXCAIDS 12 // conditional access
+#ifdef USE_TTXTSUBS
+#define MAXTXTPAGES 8 // teletext pages
+#endif // USE_TTXTSUBS
 
 #define MAXLANGCODE1 4 // a 3 letter language code, zero terminated
 #define MAXLANGCODE2 8 // up to two 3 letter language codes, separated by '+' and zero terminated
@@ -71,6 +74,17 @@
   static const tChannelID InvalidID;
   };
 
+#ifdef USE_TTXTSUBS
+struct tTeletextSubtitlePage {
+  tTeletextSubtitlePage(void) { ttxtPage = ttxtMagazine = 0; ttxtType = 0x02; strcpy(ttxtLanguage, "und"); }
+  tTeletextSubtitlePage(int page) { ttxtMagazine = (page / 100) & 0x7; ttxtPage = (((page % 100) / 10) << 4) + (page % 10); ttxtType = 0x02; strcpy(ttxtLanguage, "und"); }
+  char ttxtLanguage[MAXLANGCODE1];
+  uchar ttxtPage;
+  uchar ttxtMagazine;
+  uchar ttxtType;
+  int PageNumber(void) const { return BCDCHARTOINT(ttxtMagazine) * 100 + BCDCHARTOINT(ttxtPage); }
+  };
+#endif // USE_TTXTSUBS
 class cChannel;
 
 class cLinkChannel : public cListObject {
@@ -96,6 +110,9 @@
   char *shortName;
   char *provider;
   char *portalName;
+#ifdef USE_ALTERNATECHANNEL
+  tChannelID alternativeChannelID;
+#endif /* ALTERNATECHANNEL */
   int __BeginData__;
   int frequency; // MHz
   int source;
@@ -115,6 +132,11 @@
   uint16_t compositionPageIds[MAXSPIDS];
   uint16_t ancillaryPageIds[MAXSPIDS];
   int tpid;
+#ifdef USE_TTXTSUBS
+  int fixedTtxtSubtitlePages;
+  int totalTtxtSubtitlePages;
+  tTeletextSubtitlePage teletextSubtitlePages[MAXTXTPAGES];
+#endif // USE_TTXTSUBS
   int caids[MAXCAIDS + 1]; // list is zero-terminated
   int nid;
   int tid;
@@ -143,6 +165,9 @@
   const char *ShortName(bool OrName = false) const;
   const char *Provider(void) const { return provider; }
   const char *PortalName(void) const { return portalName; }
+#ifdef USE_ALTERNATECHANNEL
+  const tChannelID AlternativeChannelID(void) const { return alternativeChannelID; }
+#endif /* ALTERNATECHANNEL */
   int Frequency(void) const { return frequency; } ///< Returns the actual frequency, as given in 'channels.conf'
   int Transponder(void) const;                    ///< Returns the transponder frequency in MHz, plus the polarization in case of sat
   static int Transponder(int Frequency, char Polarization); ///< builds the transponder from the given Frequency and Polarization
@@ -166,6 +191,10 @@
   uint16_t CompositionPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? compositionPageIds[i] : uint16_t(0); }
   uint16_t AncillaryPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? ancillaryPageIds[i] : uint16_t(0); }
   int Tpid(void) const { return tpid; }
+#ifdef USE_TTXTSUBS
+  const tTeletextSubtitlePage *TeletextSubtitlePages() const { return teletextSubtitlePages; }
+  int TotalTeletextSubtitlePages() const { return totalTtxtSubtitlePages; }
+#endif // USE_TTXTSUBS
   const int *Caids(void) const { return caids; }
   int Ca(int Index = 0) const { return Index < MAXCAIDS ? caids[Index] : 0; }
   int Nid(void) const { return nid; }
@@ -191,7 +220,13 @@
   void SetId(int Nid, int Tid, int Sid, int Rid = 0);
   void SetName(const char *Name, const char *ShortName, const char *Provider);
   void SetPortalName(const char *PortalName);
+#ifdef USE_ALTERNATECHANNEL
+  void SetAlternativeChannelID(const char *AlternativeChannelID);
+#endif /* ALTERNATECHANNEL */
   void SetPids(int Vpid, int Ppid, int Vtype, int *Apids, int *Atypes, char ALangs[][MAXLANGCODE2], int *Dpids, int *Dtypes, char DLangs[][MAXLANGCODE2], int *Spids, char SLangs[][MAXLANGCODE2], int Tpid);
+#ifdef USE_TTXTSUBS
+  void SetTeletextSubtitlePages(tTeletextSubtitlePage pages[], int numberOfPages);
+#endif // USE_TTXTSUBS
   void SetCaIds(const int *CaIds); // list must be zero-terminated
   void SetCaDescriptors(int Level);
   void SetLinkChannels(cLinkChannels *LinkChannels);
@@ -211,6 +246,9 @@
 public:
   cChannels(void);
   bool Load(const char *FileName, bool AllowComments = false, bool MustExist = false);
+#ifdef USE_ALTERNATECHANNEL
+  bool LoadAlternativeChannels(const char *FileName);
+#endif /* ALTERNATECHANNEL */
   void HashChannel(cChannel *Channel);
   void UnhashChannel(cChannel *Channel);
   int GetNextGroup(int Idx);   // Get next channel group
--- vdr-1.7.38.orig/ci.c	2013-02-18 11:36:24.531287126 +0100
+++ vdr-1.7.38/ci.c	2013-02-18 11:37:34.780403975 +0100
@@ -1914,6 +1914,10 @@
          AddPid(Channel->Sid(), *Dpid, STREAM_TYPE_PRIVATE);
      for (const int *Spid = Channel->Spids(); *Spid; Spid++)
          AddPid(Channel->Sid(), *Spid, STREAM_TYPE_PRIVATE);
+#ifdef USE_TTXTSUBS
+     if (Channel->Tpid() && Setup.SupportTeletext)
+        AddPid(Channel->Sid(), Channel->Tpid(), STREAM_TYPE_PRIVATE);
+#endif // USE_TTXTSUBS
      }
 }
 
@@ -1937,6 +1941,11 @@
          CaPmt.AddPid(*Dpid, STREAM_TYPE_PRIVATE);
      for (const int *Spid = Channel->Spids(); *Spid; Spid++)
          CaPmt.AddPid(*Spid, STREAM_TYPE_PRIVATE);
+#ifdef USE_TTXTSUBS
+     if (Channel->Tpid() && Setup.SupportTeletext) {
+        CaPmt.AddPid(Channel->Tpid(), STREAM_TYPE_PRIVATE);
+        }
+#endif // USE_TTXTSUBS
      cas->SendPMT(&CaPmt);
      cTimeMs Timeout(QUERY_REPLY_TIMEOUT);
      do {
--- vdr-1.7.38.orig/config.c	2013-02-18 11:36:24.564286711 +0100
+++ vdr-1.7.38/config.c	2013-02-18 11:37:34.783403937 +0100
@@ -376,6 +376,9 @@
   strcpy(OSDLanguage, ""); // default is taken from environment
   strcpy(OSDSkin, "lcars");
   strcpy(OSDTheme, "default");
+#ifdef USE_WAREAGLEICON
+  WarEagleIcons = 1;
+#endif /* WAREAGLEICON */
   PrimaryDVB = 1;
   ShowInfoOnChSwitch = 1;
   TimeoutRequChInfo = 1;
@@ -397,11 +400,20 @@
   MarginStop = 10;
   AudioLanguages[0] = -1;
   DisplaySubtitles = 0;
+#ifdef USE_TTXTSUBS
+  SupportTeletext = 0;
+#endif // USE_TTXTSUBS
   SubtitleLanguages[0] = -1;
   SubtitleOffset = 0;
   SubtitleFgTransparency = 0;
   SubtitleBgTransparency = 0;
   EPGLanguages[0] = -1;
+#ifdef USE_DDEPGENTRY
+  DoubleEpgTimeDelta = 15;
+  DoubleEpgAction = 0;
+  MixEpgAction = 0;
+  DisableVPS = 0;
+#endif /* DDEPGENTRY */
   EPGScanTimeout = 5;
   EPGBugfixLevel = 3;
   EPGLinger = 0;
@@ -428,6 +440,9 @@
   VideoDisplayFormat = 1;
   VideoFormat = 0;
   UpdateChannels = 5;
+#ifdef USE_CHANNELBIND
+  ChannelBindingByRid = 0;
+#endif /* CHANNELBIND */
   UseDolbyDigital = 1;
   ChannelInfoPos = 0;
   ChannelInfoTime = 5;
@@ -455,6 +470,9 @@
   MaxVideoFileSize = MAXVIDEOFILESIZEDEFAULT;
   SplitEditedFiles = 0;
   DelTimeshiftRec = 0;
+#ifdef USE_NALUDUMP
+  DumpNaluFill = 0;
+#endif // USE_NALUDUMP
   MinEventTimeout = 30;
   MinUserInactivity = 300;
   NextWakeupTime = 0;
@@ -464,15 +482,40 @@
   ProgressDisplayTime = 0;
   PauseOnMarkSet = 0;
   ResumeID = 0;
+#ifdef USE_JUMPPLAY
+  JumpPlay = 0;
+  PlayJump = 0;
+  PauseLastMark = 0;
+#endif /* JUMPPLAY */
   CurrentChannel = -1;
   CurrentVolume = MAXVOLUME;
   CurrentDolby = 0;
   InitialChannel = "";
   DeviceBondings = "";
   InitialVolume = -1;
+#ifdef USE_VOLCTRL
+  LRVolumeControl = 0;
+  LRChannelGroups = 1;
+  LRForwardRewind = 1;
+#endif // USE_VOLCTRL
   ChannelsWrap = 0;
   ShowChannelNamesWithSource = 0;
   EmergencyExit = 1;
+#ifdef USE_JUMPINGSECONDS
+  JumpSeconds = 60;
+  JumpSecondsSlow = 10;
+  JumpSecondsRepeat = 300;
+#endif // USE_JUMPINGSECONDS
+#ifdef USE_DVLVIDPREFER
+  UseVidPrefer = 0; // default = disabled
+  nVidPrefer = 1;
+  for (int zz = 1; zz < DVLVIDPREFER_MAX; zz++) {
+      VidPreferPrio[ zz ] = 50;
+      VidPreferSize[ zz ] = 100;
+      }
+  VidPreferSize[ 0 ] = 800;
+  VidPreferPrio[ 0 ] = 50;
+#endif /* DVLVIDPREFER */
 }
 
 cSetup& cSetup::operator= (const cSetup &s)
@@ -580,6 +623,9 @@
   if      (!strcasecmp(Name, "OSDLanguage"))       { strn0cpy(OSDLanguage, Value, sizeof(OSDLanguage)); I18nSetLocale(OSDLanguage); }
   else if (!strcasecmp(Name, "OSDSkin"))             Utf8Strn0Cpy(OSDSkin, Value, MaxSkinName);
   else if (!strcasecmp(Name, "OSDTheme"))            Utf8Strn0Cpy(OSDTheme, Value, MaxThemeName);
+#ifdef USE_WAREAGLEICON
+  else if (!strcasecmp(Name, "WarEagleIcons"))       WarEagleIcons      = atoi(Value);
+#endif /* WAREAGLEICON */
   else if (!strcasecmp(Name, "PrimaryDVB"))          PrimaryDVB         = atoi(Value);
   else if (!strcasecmp(Name, "ShowInfoOnChSwitch"))  ShowInfoOnChSwitch = atoi(Value);
   else if (!strcasecmp(Name, "TimeoutRequChInfo"))   TimeoutRequChInfo  = atoi(Value);
@@ -601,11 +647,20 @@
   else if (!strcasecmp(Name, "MarginStop"))          MarginStop         = atoi(Value);
   else if (!strcasecmp(Name, "AudioLanguages"))      return ParseLanguages(Value, AudioLanguages);
   else if (!strcasecmp(Name, "DisplaySubtitles"))    DisplaySubtitles   = atoi(Value);
+#ifdef USE_TTXTSUBS
+  else if (!strcasecmp(Name, "SupportTeletext"))     SupportTeletext    = atoi(Value);
+#endif // USE_TTXTSUBS
   else if (!strcasecmp(Name, "SubtitleLanguages"))   return ParseLanguages(Value, SubtitleLanguages);
   else if (!strcasecmp(Name, "SubtitleOffset"))      SubtitleOffset     = atoi(Value);
   else if (!strcasecmp(Name, "SubtitleFgTransparency")) SubtitleFgTransparency = atoi(Value);
   else if (!strcasecmp(Name, "SubtitleBgTransparency")) SubtitleBgTransparency = atoi(Value);
   else if (!strcasecmp(Name, "EPGLanguages"))        return ParseLanguages(Value, EPGLanguages);
+#ifdef USE_DDEPGENTRY
+  else if (!strcasecmp(Name, "DoubleEpgTimeDelta"))  DoubleEpgTimeDelta = atoi(Value);
+  else if (!strcasecmp(Name, "DoubleEpgAction"))     DoubleEpgAction    = atoi(Value);
+  else if (!strcasecmp(Name, "MixEpgAction"))        MixEpgAction       = atoi(Value);
+  else if (!strcasecmp(Name, "DisableVPS"))          DisableVPS         = atoi(Value);
+#endif /* DDEPGENTRY */
   else if (!strcasecmp(Name, "EPGScanTimeout"))      EPGScanTimeout     = atoi(Value);
   else if (!strcasecmp(Name, "EPGBugfixLevel"))      EPGBugfixLevel     = atoi(Value);
   else if (!strcasecmp(Name, "EPGLinger"))           EPGLinger          = atoi(Value);
@@ -632,6 +687,9 @@
   else if (!strcasecmp(Name, "VideoDisplayFormat"))  VideoDisplayFormat = atoi(Value);
   else if (!strcasecmp(Name, "VideoFormat"))         VideoFormat        = atoi(Value);
   else if (!strcasecmp(Name, "UpdateChannels"))      UpdateChannels     = atoi(Value);
+#ifdef USE_CHANNELBIND
+  else if (!strcasecmp(Name, "ChannelBindingByRid")) ChannelBindingByRid= atoi(Value);
+#endif /* CHANNELBIND */
   else if (!strcasecmp(Name, "UseDolbyDigital"))     UseDolbyDigital    = atoi(Value);
   else if (!strcasecmp(Name, "ChannelInfoPos"))      ChannelInfoPos     = atoi(Value);
   else if (!strcasecmp(Name, "ChannelInfoTime"))     ChannelInfoTime    = atoi(Value);
@@ -659,6 +717,9 @@
   else if (!strcasecmp(Name, "MaxVideoFileSize"))    MaxVideoFileSize   = atoi(Value);
   else if (!strcasecmp(Name, "SplitEditedFiles"))    SplitEditedFiles   = atoi(Value);
   else if (!strcasecmp(Name, "DelTimeshiftRec"))     DelTimeshiftRec    = atoi(Value);
+#ifdef USE_NALUDUMP
+  else if (!strcasecmp(Name, "DumpNaluFill"))        DumpNaluFill       = atoi(Value);
+#endif // USE_NALUDUMP
   else if (!strcasecmp(Name, "MinEventTimeout"))     MinEventTimeout    = atoi(Value);
   else if (!strcasecmp(Name, "MinUserInactivity"))   MinUserInactivity  = atoi(Value);
   else if (!strcasecmp(Name, "NextWakeupTime"))      NextWakeupTime     = atoi(Value);
@@ -668,16 +729,59 @@
   else if (!strcasecmp(Name, "ProgressDisplayTime")) ProgressDisplayTime= atoi(Value);
   else if (!strcasecmp(Name, "PauseOnMarkSet"))      PauseOnMarkSet     = atoi(Value);
   else if (!strcasecmp(Name, "ResumeID"))            ResumeID           = atoi(Value);
+#ifdef USE_JUMPPLAY
+  else if (!strcasecmp(Name, "JumpPlay"))            JumpPlay           = atoi(Value);
+  else if (!strcasecmp(Name, "PlayJump"))            PlayJump           = atoi(Value);
+  else if (!strcasecmp(Name, "PauseLastMark"))       PauseLastMark      = atoi(Value);
+#endif /* JUMPPLAY */
   else if (!strcasecmp(Name, "CurrentChannel"))      CurrentChannel     = atoi(Value);
   else if (!strcasecmp(Name, "CurrentVolume"))       CurrentVolume      = atoi(Value);
   else if (!strcasecmp(Name, "CurrentDolby"))        CurrentDolby       = atoi(Value);
   else if (!strcasecmp(Name, "InitialChannel"))      InitialChannel     = Value;
   else if (!strcasecmp(Name, "InitialVolume"))       InitialVolume      = atoi(Value);
+#ifdef USE_VOLCTRL
+  else if (!strcasecmp(Name, "LRVolumeControl"))     LRVolumeControl    = atoi(Value);
+  else if (!strcasecmp(Name, "LRChannelGroups"))     LRChannelGroups    = atoi(Value);
+  else if (!strcasecmp(Name, "LRForwardRewind"))     LRForwardRewind    = atoi(Value);
+#endif // USE_VOLCTRL
   else if (!strcasecmp(Name, "DeviceBondings"))      DeviceBondings     = Value;
   else if (!strcasecmp(Name, "ChannelsWrap"))        ChannelsWrap       = atoi(Value);
   else if (!strcasecmp(Name, "ShowChannelNamesWithSource")) ShowChannelNamesWithSource = atoi(Value);
   else if (!strcasecmp(Name, "EmergencyExit"))       EmergencyExit      = atoi(Value);
   else if (!strcasecmp(Name, "LastReplayed"))        cReplayControl::SetRecording(Value);
+#ifdef USE_JUMPINGSECONDS
+  else if (!strcasecmp(Name, "JumpSeconds"))         JumpSeconds        = atoi(Value);
+  else if (!strcasecmp(Name, "JumpSecondsSlow"))     JumpSecondsSlow    = atoi(Value);
+  else if (!strcasecmp(Name, "JumpSecondsRepeat"))   JumpSecondsRepeat  = atoi(Value);
+#endif // USE_JUMPINGSECONDS
+#ifdef USE_DVLVIDPREFER
+  else if (strcasecmp(Name, "UseVidPrefer") == 0)    UseVidPrefer       = atoi(Value);
+  else if (strcasecmp(Name, "nVidPrefer") == 0)      nVidPrefer         = atoi(Value);
+  else if (strstr(Name, "VidPrefer") == Name) {
+     char *x = (char *)&Name[ strlen(Name) - 1 ];
+     int vN;
+
+     if (isdigit(*x) != 0) {
+        while (isdigit(*x) != 0)
+              x--;
+        x++;
+        }
+
+     vN = atoi(x);
+     if (vN < DVLVIDPREFER_MAX) {
+        if (strstr(Name, "VidPreferPrio") == Name) {
+           VidPreferPrio[ vN ] = atoi(Value);
+           if (VidPreferPrio[ vN ] > 99)
+              VidPreferPrio[ vN ] = 99;
+           }
+        else if (strstr(Name, "VidPreferSize") == Name) {
+           VidPreferSize[ vN ] = atoi(Value);
+           }
+        else
+           return false;
+        }
+     }
+#endif /* DVLVIDPREFER */
   else
      return false;
   return true;
@@ -688,6 +792,9 @@
   Store("OSDLanguage",        OSDLanguage);
   Store("OSDSkin",            OSDSkin);
   Store("OSDTheme",           OSDTheme);
+#ifdef USE_WAREAGLEICON
+  Store("WarEagleIcons",      WarEagleIcons);
+#endif /* WAREAGLEICON */
   Store("PrimaryDVB",         PrimaryDVB);
   Store("ShowInfoOnChSwitch", ShowInfoOnChSwitch);
   Store("TimeoutRequChInfo",  TimeoutRequChInfo);
@@ -709,11 +816,20 @@
   Store("MarginStop",         MarginStop);
   StoreLanguages("AudioLanguages", AudioLanguages);
   Store("DisplaySubtitles",   DisplaySubtitles);
+#ifdef USE_TTXTSUBS
+  Store("SupportTeletext",    SupportTeletext);
+#endif // USE_TTXTSUBS
   StoreLanguages("SubtitleLanguages", SubtitleLanguages);
   Store("SubtitleOffset",     SubtitleOffset);
   Store("SubtitleFgTransparency", SubtitleFgTransparency);
   Store("SubtitleBgTransparency", SubtitleBgTransparency);
   StoreLanguages("EPGLanguages", EPGLanguages);
+#ifdef USE_DDEPGENTRY
+  Store("DoubleEpgTimeDelta", DoubleEpgTimeDelta);
+  Store("DoubleEpgAction",    DoubleEpgAction);
+  Store("MixEpgAction",       MixEpgAction);
+  Store("DisableVPS",         DisableVPS);
+#endif /* DDEPGENTRY */
   Store("EPGScanTimeout",     EPGScanTimeout);
   Store("EPGBugfixLevel",     EPGBugfixLevel);
   Store("EPGLinger",          EPGLinger);
@@ -740,6 +856,9 @@
   Store("VideoDisplayFormat", VideoDisplayFormat);
   Store("VideoFormat",        VideoFormat);
   Store("UpdateChannels",     UpdateChannels);
+#ifdef USE_CHANNELBIND
+  Store("ChannelBindingByRid",ChannelBindingByRid);
+#endif /* CHANNELBIND */
   Store("UseDolbyDigital",    UseDolbyDigital);
   Store("ChannelInfoPos",     ChannelInfoPos);
   Store("ChannelInfoTime",    ChannelInfoTime);
@@ -767,6 +886,9 @@
   Store("MaxVideoFileSize",   MaxVideoFileSize);
   Store("SplitEditedFiles",   SplitEditedFiles);
   Store("DelTimeshiftRec",    DelTimeshiftRec);
+#ifdef USE_NALUDUMP
+  Store("DumpNaluFill",       DumpNaluFill);
+#endif // USE_NALUDUMP
   Store("MinEventTimeout",    MinEventTimeout);
   Store("MinUserInactivity",  MinUserInactivity);
   Store("NextWakeupTime",     NextWakeupTime);
@@ -776,16 +898,43 @@
   Store("ProgressDisplayTime",ProgressDisplayTime);
   Store("PauseOnMarkSet",     PauseOnMarkSet);
   Store("ResumeID",           ResumeID);
+#ifdef USE_JUMPPLAY
+  Store("JumpPlay",           JumpPlay);
+  Store("PlayJump",           PlayJump);
+  Store("PauseLastMark",      PauseLastMark);
+#endif /* JUMPPLAY */
   Store("CurrentChannel",     CurrentChannel);
   Store("CurrentVolume",      CurrentVolume);
   Store("CurrentDolby",       CurrentDolby);
   Store("InitialChannel",     InitialChannel);
   Store("InitialVolume",      InitialVolume);
+#ifdef USE_VOLCTRL
+  Store("LRVolumeControl",    LRVolumeControl);
+  Store("LRChannelGroups",    LRChannelGroups);
+  Store("LRForwardRewind",    LRForwardRewind);
+#endif // USE_VOLCTRL
   Store("DeviceBondings",     DeviceBondings);
   Store("ChannelsWrap",       ChannelsWrap);
   Store("ShowChannelNamesWithSource", ShowChannelNamesWithSource);
   Store("EmergencyExit",      EmergencyExit);
   Store("LastReplayed",       cReplayControl::LastReplayed());
+#ifdef USE_JUMPINGSECONDS
+  Store("JumpSeconds",        JumpSeconds);
+  Store("JumpSecondsSlow",    JumpSecondsSlow);
+  Store("JumpSecondsRepeat",  JumpSecondsRepeat);
+#endif // USE_JUMPINGSECONDS
+#ifdef USE_DVLVIDPREFER
+  Store ("UseVidPrefer",      UseVidPrefer);
+  Store ("nVidPrefer",        nVidPrefer);
+
+  char vidBuf[32];
+  for (int zz = 0; zz < nVidPrefer; zz++) {
+      sprintf(vidBuf, "VidPreferPrio%d", zz);
+      Store (vidBuf, VidPreferPrio[zz]);
+      sprintf(vidBuf, "VidPreferSize%d", zz);
+      Store (vidBuf, VidPreferSize[zz]);
+      }
+#endif /* DVLVIDPREFER */
 
   Sort();
 
--- vdr-1.7.38.orig/config.h	2013-02-18 11:36:24.538287038 +0100
+++ vdr-1.7.38/config.h	2013-02-18 11:37:34.784403925 +0100
@@ -30,12 +30,34 @@
 #define APIVERSION  "1.7.38"
 #define APIVERSNUM   10738  // Version * 10000 + Major * 100 + Minor
 
+#ifdef USE_YAEPG
+#define YAEPGHDVERSNUM 1
+#endif /* YAEPG */
+
 // When loading plugins, VDR searches them by their APIVERSION, which
 // may be smaller than VDRVERSION in case there have been no changes to
 // VDR header files since the last APIVERSION. This allows compiled
 // plugins to work with newer versions of the core VDR as long as no
 // VDR header files have changed.
 
+#ifdef USE_CHANNELBIND
+#define CHANNELBINDINGVERSNUM 2
+#endif /* CHANNELBIND */
+
+#ifdef USE_MAINMENUHOOKS
+// The MainMenuHook Patch's version number:
+#define MAINMENUHOOKSVERSION "1.0.1"
+#define MAINMENUHOOKSVERSNUM 10001  // Version * 10000 + Major * 100 + Minor
+#endif /* MAINMENUHOOKS */
+
+#ifdef USE_JUMPPLAY
+#define JUMPPLAYVERSNUM 100
+#endif /* JUMPPLAY */
+
+//#ifdef USE_VASARAJANAULOJA
+//#define LIEMIKUUTIO  134
+//#endif /* VASARAJANAULOJA */
+
 #define MAXPRIORITY       99
 #define MINPRIORITY       (-MAXPRIORITY)
 #define LIVEPRIORITY      0                  // priority used when selecting a device for live viewing
@@ -47,6 +69,10 @@
 #define TIMERMACRO_TITLE    "TITLE"
 #define TIMERMACRO_EPISODE  "EPISODE"
 
+#ifdef USE_DVLVIDPREFER
+#define DVLVIDPREFER_MAX 12
+#endif /* DVLVIDPREFER */
+
 #define MINOSDWIDTH   480
 #define MAXOSDWIDTH  1920
 #define MINOSDHEIGHT  324
@@ -253,6 +279,9 @@
   char OSDLanguage[I18N_MAX_LOCALE_LEN];
   char OSDSkin[MaxSkinName];
   char OSDTheme[MaxThemeName];
+#ifdef USE_WAREAGLEICON
+  int WarEagleIcons;
+#endif /* WAREAGLEICON */
   int PrimaryDVB;
   int ShowInfoOnChSwitch;
   int TimeoutRequChInfo;
@@ -273,10 +302,19 @@
   int MarginStart, MarginStop;
   int AudioLanguages[I18N_MAX_LANGUAGES + 1];
   int DisplaySubtitles;
+#ifdef USE_TTXTSUBS
+  int SupportTeletext;
+#endif // USE_TTXTSUBS
   int SubtitleLanguages[I18N_MAX_LANGUAGES + 1];
   int SubtitleOffset;
   int SubtitleFgTransparency, SubtitleBgTransparency;
   int EPGLanguages[I18N_MAX_LANGUAGES + 1];
+#ifdef USE_DDEPGENTRY
+  int DoubleEpgTimeDelta;
+  int DoubleEpgAction;
+  int MixEpgAction;
+  int DisableVPS;
+#endif /* DDEPPGENTRY */
   int EPGScanTimeout;
   int EPGBugfixLevel;
   int EPGLinger;
@@ -298,6 +336,9 @@
   int VideoDisplayFormat;
   int VideoFormat;
   int UpdateChannels;
+#ifdef USE_CHANNELBIND
+  int ChannelBindingByRid;
+#endif /* CHANNELBIND */
   int UseDolbyDigital;
   int ChannelInfoPos;
   int ChannelInfoTime;
@@ -319,6 +360,9 @@
   int MaxVideoFileSize;
   int SplitEditedFiles;
   int DelTimeshiftRec;
+#ifdef USE_NALUDUMP
+  int DumpNaluFill;
+#endif // USE_NALUDUMP
   int MinEventTimeout, MinUserInactivity;
   time_t NextWakeupTime;
   int MultiSpeedMode;
@@ -328,12 +372,33 @@
   int PauseOnMarkSet;
   int ResumeID;
   int CurrentChannel;
+#ifdef USE_JUMPPLAY
+  int JumpPlay;
+  int PlayJump;
+  int PauseLastMark;
+#endif /* JUMPPLAY */
   int CurrentVolume;
   int CurrentDolby;
   int InitialVolume;
+#ifdef USE_VOLCTRL
+  int LRVolumeControl;
+  int LRChannelGroups;
+  int LRForwardRewind;
+#endif // USE_VOLCTRL
   int ChannelsWrap;
   int ShowChannelNamesWithSource;
   int EmergencyExit;
+#ifdef USE_JUMPINGSECONDS
+  int JumpSeconds;
+  int JumpSecondsSlow;
+  int JumpSecondsRepeat;
+#endif // USE_JUMPINGSECONDS
+#ifdef USE_DVLVIDPREFER
+  int UseVidPrefer;  // 0 = VDR's default, 1 = use
+  int nVidPrefer;
+  int VidPreferPrio[DVLVIDPREFER_MAX];
+  int VidPreferSize[DVLVIDPREFER_MAX];
+#endif /* DVLVIDPREFER */
   int __EndData__;
   cString InitialChannel;
   cString DeviceBondings;
--- vdr-1.7.38.orig/cutter.c	2013-02-18 11:36:24.551286875 +0100
+++ vdr-1.7.38/cutter.c	2013-02-18 11:37:34.786403900 +0100
@@ -8,6 +8,9 @@
  */
 
 #include "cutter.h"
+#ifdef USE_VASARAJANAULOJA
+#include "interface.h"
+#endif /* VASARAJANAULOJA */
 #include "menu.h"
 #include "recording.h"
 #include "remux.h"
@@ -632,7 +635,11 @@
 bool cCutter::error = false;
 bool cCutter::ended = false;
 
+#ifdef USE_VASARAJANAULOJA
+bool cCutter::Start(const char *FileName, const char *TargetFileName, bool Overwrite)
+#else
 bool cCutter::Start(const char *FileName)
+#endif /* VASARAJANAULOJA */
 {
   cMutexLock MutexLock(&mutex);
   if (!cuttingThread) {
@@ -646,11 +653,25 @@
      if (cMark *First = FromMarks.GetNextBegin())
         Recording.SetStartTime(Recording.Start() + (int(First->Position() / Recording.FramesPerSecond() + 30) / 60) * 60);
 
+#ifdef USE_VASARAJANAULOJA
+     cString evn = (TargetFileName && *TargetFileName) ? Recording.UpdateFileName(TargetFileName) : Recording.PrefixFileName('%');
+     if (!Overwrite && *evn && (access(*evn, F_OK) == 0) && !Interface->Confirm(tr("File already exists - overwrite?"))) {
+         do {
+             evn = PrefixVideoFileName(*evn, '%');
+         } while (*evn && (access(*evn, F_OK) == 0));
+     }
+     if (*evn && RemoveVideoFile(*evn) && MakeDirs(*evn, true)) {
+#else
      const char *evn = Recording.PrefixFileName('%');
      if (evn && RemoveVideoFile(evn) && MakeDirs(evn, true)) {
+#endif /* VASARAJANAULOJA */
         // XXX this can be removed once RenameVideoFile() follows symlinks (see videodir.c)
         // remove a possible deleted recording with the same name to avoid symlink mixups:
+#ifdef USE_VASARAJANAULOJA
+        char *s = strdup(*evn);
+#else
         char *s = strdup(evn);
+#endif /* VASARAJANAULOJA */
         char *e = strrchr(s, '.');
         if (e) {
            if (strcmp(e, ".rec") == 0) {
@@ -703,6 +724,7 @@
      editedVersionName = NULL;
      ended = true;
      }
+
   return false;
 }
 
--- vdr-1.7.38.orig/cutter.h	2013-02-18 11:36:24.540287013 +0100
+++ vdr-1.7.38/cutter.h	2013-02-18 11:37:34.786403900 +0100
@@ -24,7 +24,11 @@
   static bool error;
   static bool ended;
 public:
+#ifdef USE_VASARAJANAULOJA
+  static bool Start(const char *FileName, const char *TargetFileName = NULL, bool Overwrite = true);
+#else
   static bool Start(const char *FileName);
+#endif /* VASARAJANAULOJA */
   static void Stop(void);
   static bool Active(const char *FileName = NULL);
          ///< Returns true if the cutter is currently active.
--- vdr-1.7.38.orig/device.c	2013-02-18 11:36:24.532287113 +0100
+++ vdr-1.7.38/device.c	2013-02-18 11:37:34.789403862 +0100
@@ -18,6 +18,9 @@
 #include "receiver.h"
 #include "status.h"
 #include "transfer.h"
+#ifdef USE_TTXTSUBS
+#include "vdrttxtsubshooks.h"
+#endif // USE_TTXTSUBS
 
 // --- cLiveSubtitle ---------------------------------------------------------
 
@@ -692,6 +695,11 @@
 
 bool cDevice::SwitchChannel(const cChannel *Channel, bool LiveView)
 {
+#ifdef USE_PINPLUGIN
+  if (LiveView && cStatus::MsgChannelProtected(this, Channel) == true)
+     return scrNotAvailable;
+#endif /* PINPLUGIN */
+
   if (LiveView) {
      isyslog("switching to channel %d", Channel->Number());
      cControl::Shutdown(); // prevents old channel from being shown too long if GetDevice() takes longer
@@ -722,6 +730,9 @@
      cChannel *channel;
      while ((channel = Channels.GetByNumber(n, Direction)) != NULL) {
            // try only channels which are currently available
+#ifdef USE_PINPLUGIN
+        if (cStatus::MsgChannelProtected(0, channel) == false)
+#endif /* PINPLUGIN */
            if (GetDevice(channel, LIVEPRIORITY, true, true))
               break;
            n = channel->Number() + Direction;
@@ -1313,6 +1324,14 @@
                   }
                break;
           case 0xBD: { // private stream 1
+#ifdef USE_TTXTSUBS
+               // EBU Teletext data, ETSI EN 300 472
+               // if PES data header length = 24 and data_identifier = 0x10..0x1F (EBU Data)
+               if (Data[8] == 0x24 && Data[45] >= 0x10 && Data[45] < 0x20) {
+                  cVDRTtxtsubsHookListener::Hook()->PlayerTeletextData((uint8_t*)Data, Length);
+                  break;
+                  }
+#endif // USE_TTXTSUBS
                int PayloadOffset = Data[8] + 9;
 
                // Compatibility mode for old subtitles plugin:
@@ -1472,6 +1491,9 @@
      tsToPesVideo.Reset();
      tsToPesAudio.Reset();
      tsToPesSubtitle.Reset();
+#ifdef USE_TTXTSUBS
+     tsToPesTeletext.Reset();
+#endif // USE_TTXTSUBS
      }
   else if (Length < TS_SIZE) {
      esyslog("ERROR: skipped %d bytes of TS fragment", Length);
@@ -1517,6 +1539,19 @@
                     if (!VideoOnly || HasIBPTrickSpeed())
                        PlayTsSubtitle(Data, TS_SIZE);
                     }
+#ifdef USE_TTXTSUBS
+                 else if (Pid == patPmtParser.Tpid()) {
+                    if (!VideoOnly || HasIBPTrickSpeed()) {
+                       int l;
+                       tsToPesTeletext.PutTs(Data, Length);
+                       if (const uchar *p = tsToPesTeletext.GetPes(l)) {
+                          if ((l > 45) && (p[0] == 0x00) && (p[1] == 0x00) && (p[2] == 0x01) && (p[3] == 0xbd) && (p[8] == 0x24) && (p[45] >= 0x10) && (p[45] < 0x20))
+                             cVDRTtxtsubsHookListener::Hook()->PlayerTeletextData((uchar *)p, l, false, patPmtParser.TeletextSubtitlePages(), patPmtParser.TotalTeletextSubtitlePages());
+                          tsToPesTeletext.Reset();
+                          }
+                       }
+                    }
+#endif // USE_TTXTSUBS
                  }
               }
            else if (Pid == patPmtParser.Ppid()) {
--- vdr-1.7.38.orig/device.h	2013-02-18 11:36:24.552286862 +0100
+++ vdr-1.7.38/device.h	2013-02-18 11:37:34.791403837 +0100
@@ -24,6 +24,10 @@
 #include "spu.h"
 #include "thread.h"
 #include "tools.h"
+#ifdef USE_ROTOR
+#include <asm/types.h>
+#include <linux/dvb/frontend.h>
+#endif /* ROTOR */
 
 #define MAXDEVICES         16 // the maximum number of devices in the system
 #define MAXPIDHANDLES      64 // the maximum number of different PIDs per device
@@ -304,12 +308,18 @@
          ///< Direction (only the sign of Direction is evaluated, positive values
          ///< switch to higher channel numbers).
 private:
+#ifndef USE_YAEPG
   eSetChannelResult SetChannel(const cChannel *Channel, bool LiveView);
          ///< Sets the device to the given channel (general setup).
+#endif /* YAEPG */
 protected:
   virtual bool SetChannelDevice(const cChannel *Channel, bool LiveView);
          ///< Sets the device to the given channel (actual physical setup).
 public:
+#ifdef USE_YAEPG
+  eSetChannelResult SetChannel(const cChannel *Channel, bool LiveView);
+         ///< Sets the device to the given channel (general setup).
+#endif /* YAEPG */
   static int CurrentChannel(void) { return primaryDevice ? currentChannel : 0; }
          ///< Returns the number of the current channel on the primary device.
   static void SetCurrentChannel(const cChannel *Channel) { currentChannel = Channel ? Channel->Number() : 0; }
@@ -337,6 +347,9 @@
   virtual bool HasProgramme(void) const;
          ///< Returns true if the device is currently showing any programme to
          ///< the user, either through replaying or live.
+#ifdef USE_ROTOR
+  virtual bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd) {return false;}
+#endif /* ROTOR */
 
 // PID handle facilities
 
@@ -584,6 +597,9 @@
   cTsToPes tsToPesVideo;
   cTsToPes tsToPesAudio;
   cTsToPes tsToPesSubtitle;
+#ifdef USE_TTXTSUBS
+  cTsToPes tsToPesTeletext;
+#endif // USE_TTXTSUBS
   bool isPlayingVideo;
 protected:
   const cPatPmtParser *PatPmtParser(void) const { return &patPmtParser; }
--- vdr-1.7.38.orig/dvbdevice.c	2013-02-18 11:36:24.538287038 +0100
+++ vdr-1.7.38/dvbdevice.c	2013-02-18 11:37:34.793403812 +0100
@@ -287,6 +287,9 @@
 private:
   static cMutex bondMutex;
   enum eTunerStatus { tsIdle, tsSet, tsTuned, tsLocked };
+#ifdef USE_ROTOR
+  bool SendDiseqc;
+#endif /* ROTOR */
   int frontendType;
   const cDvbDevice *device;
   int fd_frontend;
@@ -303,6 +306,9 @@
   cMutex mutex;
   cCondVar locked;
   cCondVar newSet;
+#ifdef USE_ROTOR
+  dvb_diseqc_master_cmd diseqc_cmd;
+#endif /* ROTOR */
   cDvbTuner *bondedTuner;
   bool bondedMaster;
   bool SetFrontendType(const cChannel *Channel);
@@ -325,6 +331,9 @@
   uint32_t SubsystemId(void) const { return subsystemId; }
   bool IsTunedTo(const cChannel *Channel) const;
   void SetChannel(const cChannel *Channel);
+#ifdef USE_ROTOR
+  bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd);
+#endif /* ROTOR */
   bool Locked(int TimeoutMs = 0);
   int GetSignalStrength(void) const;
   int GetSignalQuality(void) const;
@@ -337,6 +346,9 @@
   frontendType = SYS_UNDEFINED;
   device = Device;
   fd_frontend = Fd_Frontend;
+#ifdef USE_ROTOR
+  SendDiseqc=false;
+#endif /* ROTOR */
   adapter = Adapter;
   frontend = Frontend;
   subsystemId = cDvbDeviceProbe::GetSubsystemId(adapter, frontend);
@@ -858,6 +870,12 @@
            Status = NewStatus;
         cMutexLock MutexLock(&mutex);
         int WaitTime = 1000;
+#ifdef USE_ROTOR
+        if (SendDiseqc) {
+           CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_MASTER_CMD, &diseqc_cmd));
+           SendDiseqc=false;
+           }
+#endif /* ROTOR */
         switch (tunerStatus) {
           case tsIdle:
                break;
@@ -908,6 +926,19 @@
         }
 }
 
+#ifdef USE_ROTOR
+bool cDvbTuner::SendDiseqcCmd(dvb_diseqc_master_cmd cmd)
+{
+  cMutexLock MutexLock(&mutex);
+  if (SendDiseqc)
+    return false;
+  diseqc_cmd=cmd;
+  SendDiseqc=true;
+  newSet.Broadcast();
+  return true;
+}
+#endif /* ROTOR */
+
 // --- cDvbSourceParam -------------------------------------------------------
 
 class cDvbSourceParam : public cSourceParam {
@@ -1452,6 +1483,16 @@
   bool needsDetachReceivers = false;
   needsDetachBondedReceivers = false;
 
+#ifdef USE_CHANNELBIND
+  if (Setup.ChannelBindingByRid && Channel->Rid()) {
+    if (0 == ((unsigned) Channel->Rid() & (1<<(unsigned) CardIndex())) ) {
+      #if 0
+      printf("device %d doesn't provide channel %s", CardIndex(), *Channel->ToText());
+      #endif
+      return false;
+      }
+    }
+#endif /* CHANNELBIND */
   if (dvbTuner && ProvidesTransponder(Channel)) {
      result = hasPriority;
      if (Priority > IDLEPRIORITY) {
@@ -1540,6 +1581,16 @@
   return dvbTuner ? dvbTuner->Locked(TimeoutMs) : false;
 }
 
+#ifdef USE_ROTOR
+bool cDvbDevice::SendDiseqcCmd(dvb_diseqc_master_cmd cmd)
+{
+  if (ProvidesDeliverySystem(SYS_DVBS) || ProvidesDeliverySystem(SYS_DVBS2))
+     return dvbTuner->SendDiseqcCmd(cmd);
+  else
+     return false;
+}
+#endif /* ROTOR */
+
 void cDvbDevice::SetTransferModeForDolbyDigital(int Mode)
 {
   setTransferModeForDolbyDigital = Mode;
--- vdr-1.7.38.orig/dvbdevice.h	2013-02-18 11:36:24.543286975 +0100
+++ vdr-1.7.38/dvbdevice.h	2013-02-18 11:37:34.795403786 +0100
@@ -193,6 +193,9 @@
   virtual bool SetChannelDevice(const cChannel *Channel, bool LiveView);
 public:
   virtual bool HasLock(int TimeoutMs = 0) const;
+#ifdef USE_ROTOR
+  virtual bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd);
+#endif /* ROTOR */
 
 // PID handle facilities
 
--- vdr-1.7.38.orig/dvbplayer.c	2013-02-18 11:36:24.554286837 +0100
+++ vdr-1.7.38/dvbplayer.c	2013-02-18 11:37:34.798403749 +0100
@@ -204,6 +204,9 @@
   cNonBlockingFileReader *nonBlockingFileReader;
   cRingBufferFrame *ringBuffer;
   cPtsIndex ptsIndex;
+#ifdef USE_JUMPPLAY
+  cMarks marks;
+#endif /* JUMPPLAY */
   cFileName *fileName;
   cIndexFile *index;
   cUnbufferedFile *replayFile;
@@ -286,6 +289,9 @@
      }
   else if (PauseLive)
      framesPerSecond = cRecording(FileName).FramesPerSecond(); // the fps rate might have changed from the default
+#ifdef USE_JUMPPLAY
+  marks.Load(FileName, framesPerSecond, isPesRecording);
+#endif /* JUMPPLAY */
 }
 
 cDvbPlayer::~cDvbPlayer()
@@ -364,11 +370,31 @@
   if (index) {
      int Index = ptsIndex.FindIndex(DeviceGetSTC());
      if (Index >= 0) {
+#ifdef USE_JUMPPLAY
+        // set resume position to 0 if replay stops at the first mark
+        if (Setup.PlayJump && marks.First() &&
+            abs(Index - marks.First()->Position()) <= int(round(RESUMEBACKUP * framesPerSecond)))
+           Index = 0;
+#endif /* JUMPPLAY */
+#ifdef USE_VASARAJANAULOJA
+        int backup = int(round(RESUMEBACKUP * framesPerSecond));
+        if (Index >= index->Last() - backup)
+#else
         Index -= int(round(RESUMEBACKUP * framesPerSecond));
         if (Index > 0)
            Index = index->GetNextIFrame(Index, false);
         else
+#endif /* VASARAJANAULOJA */
            Index = 0;
+#ifdef USE_VASARAJANAULOJA
+        else {
+           Index -= backup;
+           if (Index > 0)
+              Index = index->GetNextIFrame(Index, false);
+           else
+              Index = 0;
+           }
+#endif /* VASARAJANAULOJA */
         if (Index >= 0)
            return index->StoreResume(Index);
         }
@@ -390,11 +416,30 @@
 {
   uchar *p = NULL;
   int pc = 0;
+#ifdef USE_JUMPPLAY
+  bool cutIn = false;
+  int total = -1;
+#endif /* JUMPPLAY */
 
   readIndex = Resume();
   if (readIndex >= 0)
      isyslog("resuming replay at index %d (%s)", readIndex, *IndexToHMSF(readIndex, true, framesPerSecond));
 
+#ifdef USE_JUMPPLAY
+  if (Setup.PlayJump && readIndex <= 0 && marks.First() && index) {
+     int Index = marks.First()->Position();
+     uint16_t FileNumber;
+     off_t FileOffset;
+     if (index->Get(Index, &FileNumber, &FileOffset) &&
+         NextFile(FileNumber, FileOffset)) {
+        isyslog("PlayJump: start replay at first mark %d (%s)",
+                Index, *IndexToHMSF(Index, true, framesPerSecond));
+        readIndex = Index;
+        }
+     }
+
+  bool LastMarkPause = false;
+#endif /* JUMPPLAY */
   nonBlockingFileReader = new cNonBlockingFileReader;
   int Length = 0;
   bool Sleep = false;
@@ -421,7 +466,11 @@
 
           // Read the next frame from the file:
 
+#ifdef USE_JUMPPLAY
+          if (playMode != pmStill && playMode != pmPause && !LastMarkPause) {
+#else
           if (playMode != pmStill && playMode != pmPause) {
+#endif /* JUMPPLAY */
              if (!readFrame && (replayFile || readIndex >= 0)) {
                 if (!nonBlockingFileReader->Reading()) {
                    if (!SwitchToPlayFrame && (playMode == pmFast || (playMode == pmSlow && playDir == pdBackward))) {
@@ -458,6 +507,46 @@
                    else if (index) {
                       uint16_t FileNumber;
                       off_t FileOffset;
+#ifdef USE_JUMPPLAY
+                      if (Setup.PlayJump || Setup.PauseLastMark) {
+                         // check for end mark - jump to next mark or pause
+                         readIndex++;
+                         marks.Update();
+                         cMark *m = marks.Get(readIndex);
+                         if (m && (m->Index() & 0x01) != 0) {
+                            m = marks.Next(m);
+                            int Index;
+                            if (m)
+                               Index = m->Position();
+                            else if (Setup.PauseLastMark) {
+                               // pause at last mark
+                               isyslog("PauseLastMark: pause at position %d (%s)",
+                                       readIndex, *IndexToHMSF(readIndex, true, framesPerSecond));
+                               LastMarkPause = true;
+                               Index = -1;
+                               }
+                            else if (total == index->Last())
+                               // at last mark jump to end of recording
+                               Index = index->Last() - 1;
+                            else
+                               // jump but stay off end of live-recordings
+                               Index = index->GetNextIFrame(index->Last() - int(round(MAXSTUCKATEOF * framesPerSecond)), true);
+                            // don't jump in edited recordings
+                            if (Setup.PlayJump && Index > readIndex &&
+                                Index > index->GetNextIFrame(readIndex, true)) {
+                               isyslog("PlayJump: %d frames to %d (%s)",
+                                       Index - readIndex, Index,
+                                       *IndexToHMSF(Index, true, framesPerSecond));
+                               readIndex = Index;
+                               cutIn = true;
+                               }
+                            }
+                         readIndex--;
+                      }
+                      // for detecting growing length of live-recordings
+                      if (index->Get(readIndex + 1, &FileNumber, &FileOffset, &readIndependent) && readIndependent)
+                         total = index->Last();
+#endif /* JUMPPLAY */
                       if (index->Get(readIndex + 1, &FileNumber, &FileOffset, &readIndependent, &Length) && NextFile(FileNumber, FileOffset))
                          readIndex++;
                       else
@@ -502,6 +591,15 @@
              // Store the frame in the buffer:
 
              if (readFrame) {
+#ifdef USE_JUMPPLAY
+
+
+
+
+
+
+
+#endif /* JUMPPLAY */
                 if (ringBuffer->Put(readFrame))
                    readFrame = NULL;
                 else
@@ -568,8 +666,19 @@
                 p = NULL;
                 }
              }
+#ifdef USE_JUMPPLAY
+          else {
+             if (LastMarkPause) {
+                LastMarkPause = false;
+                playMode = pmPause;
+                }
+#else
           else
+#endif /* JUMPPLAY */
              Sleep = true;
+#ifdef USE_JUMPPLAY
+             }
+#endif /* JUMPPLAY */
 
           // Handle hitting begin/end of recording:
 
--- vdr-1.7.38.orig/eit.c	2013-02-18 11:36:24.565286699 +0100
+++ vdr-1.7.38/eit.c	2013-02-18 11:37:34.801403711 +0100
@@ -100,7 +100,87 @@
          // each of them :-( So if one DVB card is tuned to the Premiere transponder, while an other one is tuned
          // to the Sat.1/Pro7 transponder, events will keep toggling because of the bogus version numbers.
          else if (Tid == TableID && pEvent->Version() == getVersionNumber())
+#ifdef USE_DDEPGENTRY
+            {
+               if(Setup.MixEpgAction == 0)
             continue;
+
+               //printf("in");
+               //printf("%s", pEvent->GetTimeString());
+               // to use the info of the original epg, update the extern one,
+               // if it has less info
+               SI::Descriptor *d;
+               SI::ExtendedEventDescriptors *ExtendedEventDescriptors = NULL;
+               //SI::ExtendedEventDescriptor *eed = NULL;
+               SI::ShortEventDescriptor *ShortEventDescriptor = NULL;
+               //SI::ShortEventDescriptor *sed = NULL;
+               //SI::TimeShiftedEventDescriptor *tsed = NULL;
+               //cLinkChannels *LinkChannels = NULL;
+               for (SI::Loop::Iterator it2; (d = SiEitEvent.eventDescriptors.getNext(it2));)
+               {
+                  if(d->getDescriptorTag() == SI::ShortEventDescriptorTag)
+                  {
+                     int LanguagePreferenceShort = -1;
+                     SI::ShortEventDescriptor *sed = (SI::ShortEventDescriptor *)d;
+                     if (I18nIsPreferredLanguage(Setup.EPGLanguages, sed->languageCode, LanguagePreferenceShort) || !ShortEventDescriptor)
+                     {
+                        delete ShortEventDescriptor;
+                        ShortEventDescriptor = sed;
+                        d = NULL; // so that it is not deleted
+                     }
+                  }
+                  else if(d->getDescriptorTag() == SI::ExtendedEventDescriptorTag)
+                  {
+                     int LanguagePreferenceExt = -1;
+                     bool UseExtendedEventDescriptor = false;
+                     SI::ExtendedEventDescriptor *eed = (SI::ExtendedEventDescriptor *)d;
+                     if (I18nIsPreferredLanguage(Setup.EPGLanguages, eed->languageCode, LanguagePreferenceExt) || !ExtendedEventDescriptors)
+                     {
+                        delete ExtendedEventDescriptors;
+                        ExtendedEventDescriptors = new SI::ExtendedEventDescriptors;
+                        UseExtendedEventDescriptor = true;
+                     }
+                     if (UseExtendedEventDescriptor)
+                     {
+                        ExtendedEventDescriptors->Add(eed);
+                        d = NULL; // so that it is not deleted
+                     }
+                     if (eed->getDescriptorNumber() == eed->getLastDescriptorNumber())
+                        UseExtendedEventDescriptor = false;
+                  }
+                  delete d;
+               }
+               if(pEvent)
+               {
+
+                  if(ShortEventDescriptor)
+                  {
+                     char buffer[256];
+                     if(ShortEventDescriptor->text.getText(buffer, sizeof(buffer)) && pEvent->ShortText() && (strlen(ShortEventDescriptor->text.getText(buffer, sizeof(buffer))) > strlen(pEvent->ShortText())))
+                     {
+                        pEvent->SetShortText(ShortEventDescriptor->text.getText(buffer, sizeof(buffer)));
+                        pEvent->FixEpgBugs();
+                     }
+                  }
+                  if(ExtendedEventDescriptors)
+                  {
+                     char buffer[ExtendedEventDescriptors->getMaximumTextLength(": ") + 1];
+                     //pEvent->SetDescription(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": "));
+
+                     if(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": ") && pEvent->Description() && (strlen(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": ")) > strlen(pEvent->Description())))
+                     {
+                        pEvent->SetDescription(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": "));
+                        pEvent->FixEpgBugs();
+                     }
+                  }
+               }
+               delete ExtendedEventDescriptors;
+               delete ShortEventDescriptor;
+               continue;
+            }
+#else
+            continue;
+#endif /* DDEPGENTRY */
          EpgHandlers.SetEventID(pEvent, SiEitEvent.getEventId()); // unfortunately some stations use different event ids for the same event in different tables :-(
          EpgHandlers.SetStartTime(pEvent, StartTime);
          EpgHandlers.SetDuration(pEvent, Duration);
@@ -108,7 +188,11 @@
       if (pEvent->TableID() > 0x4E) // for backwards compatibility, table ids less than 0x4E are never overwritten
          pEvent->SetTableID(Tid);
       if (Tid == 0x4E) { // we trust only the present/following info on the actual TS
+#ifdef USE_DDEPGENTRY
+         if (Setup.DisableVPS == 0 && SiEitEvent.getRunningStatus() >= SI::RunningStatusNotRunning)
+#else
          if (SiEitEvent.getRunningStatus() >= SI::RunningStatusNotRunning)
+#endif /* DDEPGENTRY */
             pSchedule->SetRunningStatus(pEvent, SiEitEvent.getRunningStatus(), channel);
          }
       if (OnlyRunningStatus) {
@@ -295,8 +379,85 @@
          channel->SetLinkChannels(LinkChannels);
       Modified = true;
       EpgHandlers.HandleEvent(pEvent);
+
       if (handledExternally)
          delete pEvent;
+
+#ifdef USE_DDEPGENTRY
+      //to avoid double epg-entrys from ext and int epg sources :EW
+      if (pEvent && pEvent->TableID() != 0x00)
+         {
+         cEvent *pPreviousEvent = (cEvent *)pSchedule->GetPreviousEvent(pEvent);
+
+         if (pPreviousEvent)
+            {
+            if(Setup.DoubleEpgAction == 0)
+               {
+               pPreviousEvent->SetStartTime(pEvent->StartTime());
+               pPreviousEvent->SetDuration(pEvent->Duration());
+
+               if(Setup.DisableVPS == 0)
+                  {
+                  if(channel)
+                     pPreviousEvent->SetRunningStatus(pEvent->RunningStatus(), channel);
+                  else
+                     pPreviousEvent->SetRunningStatus(pEvent->RunningStatus());
+                  }
+
+               // to use the info of the original epg, update the extern one,
+               // if it has less info
+               char buffer_short_intern[256];
+               char buffer_short_extern[256];
+               int len_short_intern = 0;
+               int len_short_extern = 0;
+
+               if (pEvent->ShortText())
+                  len_short_intern = snprintf (buffer_short_intern, sizeof(buffer_short_intern), "%s", pEvent->ShortText());
+
+               if (pPreviousEvent->ShortText())
+                  len_short_extern = snprintf (buffer_short_extern, sizeof(buffer_short_extern), "%s",pPreviousEvent->ShortText());
+
+               if(len_short_intern > 0)
+                  {
+                  if(len_short_extern < 1)
+                     pPreviousEvent->SetShortText(buffer_short_intern);
+                  else if (len_short_intern > len_short_extern)
+                     pPreviousEvent->SetShortText(buffer_short_intern);
+                  }
+
+               if(pEvent->Description())
+                  {
+                  char buffer_title_intern[4096];
+                  char buffer_title_extern[4096];
+                  int len_title_intern = 0;
+                  int len_title_extern = 0;
+
+                  if (pEvent->Description())
+                     len_title_intern = snprintf (buffer_title_intern, sizeof(buffer_title_intern), "%s", pEvent->Description());
+
+                  if (pPreviousEvent->Description())
+                     len_title_extern = snprintf (buffer_title_extern, sizeof(buffer_title_extern), "%s", pPreviousEvent->Description());
+
+                  if(len_title_intern > 0)
+                     {
+                     if(len_title_extern < 1)
+                        pPreviousEvent->SetDescription(buffer_title_intern);
+                     else if (len_title_intern > len_title_extern)
+                        pPreviousEvent->SetDescription(buffer_title_intern);
+                     }
+                  }
+
+               if(pPreviousEvent->Vps() == 0 && pEvent->Vps() != 0)
+                  pPreviousEvent->SetVps(pEvent->Vps());
+
+               pSchedule->DelEvent(pEvent);
+               pPreviousEvent->FixEpgBugs();
+               }
+            else
+               pSchedule->DelEvent(pPreviousEvent);
+            }
+         }
+#endif /* DDEPGENTRY */
       }
   if (Tid == 0x4E) {
      if (Empty && getSectionNumber() == 0)
--- vdr-1.7.38.orig/epg.c	2013-02-18 11:36:24.548286912 +0100
+++ vdr-1.7.38/epg.c	2013-02-18 11:37:34.803403686 +0100
@@ -972,6 +972,31 @@
   return pe;
 }
 
+#ifdef USE_DDEPGENTRY
+const cEvent *cSchedule::GetPreviousEvent(cEvent *Event) const
+{
+
+   if(!Event || Event->Duration() == 0 || Event->StartTime() == 0)
+      return NULL;
+   // Returns either the event info to the previous/following event to the given EventID or, if that one can't be found NULL :EW
+   cEvent *pt = NULL;
+   int epgTimeDelta = Setup.DoubleEpgTimeDelta * 60 + 1;
+   for (pt = events.First(); pt; pt = events.Next(pt))
+      if(pt && pt->TableID() == 0x00)
+         if ((Event->StartTime() - pt->StartTime()) > -  epgTimeDelta && (Event->StartTime() - pt->StartTime()) < epgTimeDelta)
+         {
+            if((pt->Duration() + (pt->Duration()/ 5) + 1) > Event->Duration() && (pt->Duration() - (pt->Duration()/ 5) - 1) < Event->Duration())
+               return pt;
+            else if (pt->Title() && Event->Title() && (strcmp(pt->Title(), ".") != 0 && strcmp(Event->Title(), ".") != 0))
+            {
+               if (strstr(pt->Title(), Event->Title()) != NULL || strstr(Event->Title(), pt->Title()) != NULL)
+                  return pt;
+            }
+         }
+   return NULL;
+}
+#endif /* DDEPGENTRY */
+
 void cSchedule::SetRunningStatus(cEvent *Event, int RunningStatus, cChannel *Channel)
 {
   hasRunning = false;
--- vdr-1.7.38.orig/epg.h	2013-02-18 11:36:24.552286862 +0100
+++ vdr-1.7.38/epg.h	2013-02-18 11:37:34.804403673 +0100
@@ -164,6 +164,9 @@
   void DropOutdated(time_t SegmentStart, time_t SegmentEnd, uchar TableID, uchar Version);
   void Cleanup(time_t Time);
   void Cleanup(void);
+#ifdef USE_DDEPGENTRY
+  const cEvent *GetPreviousEvent(cEvent *Event) const; //:EW
+#endif /* DDEPGENTRY */
   cEvent *AddEvent(cEvent *Event);
   void DelEvent(cEvent *Event);
   void HashEvent(cEvent *Event);
--- vdr-1.7.38.orig/filetransfer.c	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/filetransfer.c	2013-02-18 11:37:34.813403560 +0100
@@ -0,0 +1,278 @@
+/*
+ * filetransfer.c: The video file transfer facilities
+ *
+ * See the main source file 'vdr.c' for copyright information and
+ * how to reach the author.
+ *
+ * $Id: $
+ */
+
+#include "videodir.h"
+#include "filetransfer.h"
+
+static cString StripLastDirectory(const char *DirName)
+{
+  if (DirName && *DirName) {
+     cString s(DirName);
+     int l = strlen(*s);
+     const char *p = *s + l;
+     while (l > 0) {
+           if (*p-- == '/')
+              break;
+           l--;
+           }
+     if (l)
+        s = s.Truncate(l);
+     return s;
+     }
+  return NULL;
+}
+
+// --- cCopyingThread --------------------------------------------------------
+
+class cCopyingThread : public cThread {
+private:
+  const char *error;
+  bool deleteSource;
+  cString source;
+  cString target;
+protected:
+  virtual void Action(void);
+public:
+  cCopyingThread(const char *SourceName, const char *ToFileName, bool DeleteSource = false);
+  virtual ~cCopyingThread();
+  const char *Error(void) { return error; }
+  };
+
+cCopyingThread::cCopyingThread(const char *SourceName, const char *TargetName, bool DeleteSource)
+:cThread("copying"),
+ error(NULL),
+ deleteSource(DeleteSource),
+ source(SourceName),
+ target(TargetName)
+{
+  // add missing directory delimiters
+  const char *delim = "/";
+  if (!endswith(*source, delim))
+     source = cString::sprintf("%s%s", *source, delim);
+  if (!endswith(*target, delim))
+     target = cString::sprintf("%s%s", *target, delim);
+
+  Start();
+}
+
+cCopyingThread::~cCopyingThread()
+{
+  Cancel(3);
+}
+
+void cCopyingThread::Action(void)
+{
+  SetPriority(19);
+  SetIOPriority(7);
+
+  if (strcmp(*source, *target)) {
+     // validate target directory
+     if (strstr(*target, *source)) {
+        error = "invalid target";
+        return;
+        }
+
+     // recordings methods require the last directory delimiter to be stripped off
+     cString recname = target;
+     recname.Truncate(strlen(*recname) - 1);
+     Recordings.AddByName(*recname, false);
+
+     RemoveFileOrDir(*target);
+     if (!MakeDirs(*target, true)) {
+        error = "MakeDirs";
+        return;
+        }
+
+     if (deleteSource && EntriesOnSameFileSystem(*source, *target)) {
+        if (rename(*source, *target) == -1) {
+           error = "rename";
+           return;
+           }
+        // delete all empty source directories
+        recname = source;
+        recname.Truncate(strlen(*recname) - 1);
+        recname = StripLastDirectory(*recname);
+        do {
+           if (!RemoveEmptyDirectories(*recname, true))
+              break;
+           recname = StripLastDirectory(*recname);
+           }
+        while (strcmp(*recname, VideoDirectory));
+        }
+     else {
+        int required = DirSizeMB(*source);
+        int available = FreeDiskSpaceMB(*target);
+
+        // validate free space
+        if (required < available) {
+           cReadDir d(*source);
+           struct dirent *e;
+           bool success = true;
+
+           // allocate copying buffer
+           const int len = 1024 * 1024;
+           char *buffer = MALLOC(char, len);
+           if (!buffer) {
+              error = "MALLOC";
+              return;
+              }
+
+           // loop through all files, but skip all sub-directories
+           while (Running() && (e = d.Next()) != NULL) {
+                 // skip generic entries
+                 if (strcmp(e->d_name, ".") && strcmp(e->d_name, "..") && strcmp(e->d_name, "lost+found")) {
+                    cString sourceFile = cString::sprintf("%s%s", *source, e->d_name);
+                    cString targetFile = cString::sprintf("%s%s", *target, e->d_name);
+
+                    // copy only regular files
+                    struct stat sts;
+                    if (!stat(*sourceFile, &sts) && S_ISREG(sts.st_mode)) {
+                       int r = -1, w = -1;
+                       cUnbufferedFile *inputFile = cUnbufferedFile::Create(*sourceFile, O_RDONLY | O_LARGEFILE);
+                       cUnbufferedFile *outputFile = cUnbufferedFile::Create(*targetFile, O_RDWR | O_CREAT | O_LARGEFILE);
+
+                       // validate files
+                       if (!inputFile || !outputFile) {
+                          success = false;
+                          break;
+                          }
+
+                       // do actual copy
+                       do {
+                         r = inputFile->Read(buffer, len);
+                         if (r > 0)
+                            w = outputFile->Write(buffer, r);
+                         else
+                            w = 0;
+                       } while (Running() && r > 0 && w > 0);
+                       DELETENULL(inputFile);
+                       DELETENULL(outputFile);
+
+                       // validate result
+                       if (!Running() || r < 0 || w < 0) {
+                          success = false;
+                          break;
+                          }
+                       }
+                   }
+                }
+
+           // release allocated buffer
+           free(buffer);
+
+           // delete all created target files and directories
+           if (!success) {
+              target = StripLastDirectory(*target);
+              RemoveFileOrDir(*target, true);
+              target = StripLastDirectory(*target);
+              RemoveEmptyDirectories(*target, true);
+              error = "copy failed";
+              return;
+              }
+           }
+        else {
+           // delete all created empty target directories
+           recname = target;
+           recname.Truncate(strlen(*recname) - 1);
+           recname = StripLastDirectory(*recname);
+           do {
+              if (!RemoveEmptyDirectories(*recname, true))
+                 break;
+              recname = StripLastDirectory(*recname);
+              }
+           while (strcmp(*recname, VideoDirectory));
+           error = "insufficient free space";
+           return;
+           }
+        }
+
+     if (deleteSource) {
+        // Recordings' methods require the last directory delimiter to be stripped off
+        source.Truncate(strlen(*source) - 1);
+        cRecording *recording = Recordings.GetByName(*source);
+        if (recording->Delete())
+           Recordings.DelByName(*source, false);
+        }
+     else
+        Recordings.TouchUpdate();
+     }
+}
+
+// --- cFileTransfer ----------------------------------------------------------------
+
+cMutex cFileTransfer::mutex;
+char *cFileTransfer::copiedVersionName = NULL;
+cCopyingThread *cFileTransfer::copyingThread = NULL;
+bool cFileTransfer::error = false;
+bool cFileTransfer::ended = false;
+
+bool cFileTransfer::Start(cRecording *Recording, const char *FileName, bool CopyOnly)
+{
+  cMutexLock MutexLock(&mutex);
+  if (!copyingThread) {
+     cString NewName = NewVideoFileName(Recording->FileName(), FileName);
+     error = false;
+     ended = false;
+     if (strlen(*NewName)) {
+        copiedVersionName = strdup(*NewName);
+        copyingThread = new cCopyingThread(Recording->FileName(), copiedVersionName, !CopyOnly);
+        return true;
+        }
+     }
+  return false;
+}
+
+void cFileTransfer::Stop(void)
+{
+  cMutexLock MutexLock(&mutex);
+  bool Interrupted = copyingThread && copyingThread->Active();
+  const char *Error = copyingThread ? copyingThread->Error() : NULL;
+  DELETENULL(copyingThread);
+  if (Interrupted || Error) {
+     if (Interrupted)
+        isyslog("file transfer has been interrupted");
+     if (Error)
+        esyslog("ERROR: '%s' during file transfer", Error);
+     RemoveVideoFile(copiedVersionName); //XXX what if this file is currently being replayed?
+     Recordings.DelByName(copiedVersionName);
+     free(copiedVersionName);
+     copiedVersionName = NULL;
+     }
+}
+
+bool cFileTransfer::Active(void)
+{
+  cMutexLock MutexLock(&mutex);
+  if (copyingThread) {
+     if (copyingThread->Active())
+        return true;
+     error = copyingThread->Error();
+     Stop();
+     free(copiedVersionName);
+     copiedVersionName = NULL;
+     ended = true;
+     }
+  return false;
+}
+
+bool cFileTransfer::Error(void)
+{
+  cMutexLock MutexLock(&mutex);
+  bool result = error;
+  error = false;
+  return result;
+}
+
+bool cFileTransfer::Ended(void)
+{
+  cMutexLock MutexLock(&mutex);
+  bool result = ended;
+  ended = false;
+  return result;
+}
--- vdr-1.7.38.orig/filetransfer.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/filetransfer.h	2013-02-18 11:37:34.814403548 +0100
@@ -0,0 +1,33 @@
+/*
+ * filetransfer.h: The video file transfer facilities
+ *
+ * See the main source file 'vdr.c' for copyright information and
+ * how to reach the author.
+ *
+ * $Id: $
+ */
+
+#ifndef __FILETRANSFER_H
+#define __FILETRANSFER_H
+
+#include "recording.h"
+#include "thread.h"
+
+class cCopyingThread;
+
+class cFileTransfer {
+private:
+  static cMutex mutex;
+  static char *copiedVersionName;
+  static cCopyingThread *copyingThread;
+  static bool error;
+  static bool ended;
+public:
+  static bool Start(cRecording *Recording, const char *NewName, bool CopyOnly = false);
+  static void Stop(void);
+  static bool Active(void);
+  static bool Error(void);
+  static bool Ended(void);
+  };
+
+#endif //__FILETRANSFER_H
--- vdr-1.7.38.orig/iconpatch.c	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/iconpatch.c	2013-02-18 11:37:34.814403548 +0100
@@ -0,0 +1,31 @@
+#ifdef USE_WAREAGLEICON
+
+#include "iconpatch.h"
+
+#include <langinfo.h>
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+bool IsLangUtf8(void)
+{
+  char *CodeSet = NULL;
+  if (setlocale(LC_CTYPE, ""))
+     CodeSet = nl_langinfo(CODESET);
+  else {
+     char *LangEnv = getenv("LANG"); // last resort in case locale stuff isn't installed
+     if (LangEnv) {
+        CodeSet = strchr(LangEnv, '.');
+        if (CodeSet)
+           CodeSet++; // skip the dot
+        }
+     }
+
+  if (CodeSet && strcasestr(CodeSet, "UTF-8") != 0)
+     return true;
+
+  return false;
+}
+
+#endif /* WAREAGLEICON */
--- vdr-1.7.38.orig/iconpatch.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/iconpatch.h	2013-02-18 11:37:34.815403535 +0100
@@ -0,0 +1,58 @@
+#ifdef USE_WAREAGLEICON
+
+#define ICON_NUMBERSIGN        "\x23"
+#define ICON_ASTERISK          "\x2A"
+#define ICON_GREATER           "\x3E"
+#define ICON_EXCLAM            "\x21"
+#define ICON_PLUSMINUS         "\xB1"
+
+#define ICON_RESUME            "\x80"
+#define ICON_DVD               "\x81"
+#define ICON_FOLDER            "\x82"
+#define ICON_BLANK             "\x83"
+#define ICON_CUTTING           "\x84"
+#define ICON_MOVE_FILE         "\x85"
+#define ICON_MOVE_FOLDER       "\x86"
+#define ICON_BAR_START         "\x87"
+#define ICON_BAR_FILLED        "\x88"
+#define ICON_BAR_CLEAR         "\x89"
+#define ICON_BAR_END           "\x8A"
+#define ICON_REC               "\x8B"
+#define ICON_CLOCK             "\x8C"
+#define ICON_TV_CRYPTED        "\x8D"
+#define ICON_RADIO             "\x8E"
+#define ICON_TV                "\x8F"
+#define ICON_NEW               "\x90"
+#define ICON_ARROW             "\x91"
+#define ICON_RUNNING           "\x92"
+#define ICON_VPS               "\x93"
+#define ICON_CLOCK_UH          "\x94"
+#define ICON_CLOCK_LH          "\x95"
+
+// UTF-8 Icons
+#define ICON_RESUME_UTF8       "\uE000"
+#define ICON_DVD_UTF8          "\uE001"
+#define ICON_FOLDER_UTF8       "\uE002"
+#define ICON_BLANK_UTF8        "\uE003"
+#define ICON_CUTTING_UTF8      "\uE004"
+#define ICON_MOVE_FILE_UTF8    "\uE005"
+#define ICON_MOVE_FOLDER_UTF8  "\uE006"
+#define ICON_BAR_START_UTF8    "\uE007"
+#define ICON_BAR_FILLED_UTF8   "\uE008"
+#define ICON_BAR_EMPTY_UTF8    "\uE009"
+#define ICON_BAR_CLOSE_UTF8    "\uE00A"
+#define ICON_REC_UTF8          "\uE00B"
+#define ICON_CLOCK_UTF8        "\uE00C"
+#define ICON_TV_CRYPTED_UTF8   "\uE00D"
+#define ICON_RADIO_UTF8        "\uE00E"
+#define ICON_TV_UTF8           "\uE00F"
+#define ICON_NEW_UTF8          "\uE010"
+#define ICON_ARROW_UTF8        "\uE011"
+#define ICON_RUNNING_UTF8      "\uE012"
+#define ICON_VPS_UTF8          "\uE013"
+#define ICON_CLOCK_UH_UTF8     "\uE014"
+#define ICON_CLOCK_LH_UTF8     "\uE015"
+
+bool IsLangUtf8(void);
+
+#endif /* WAREAGLEICON */
--- vdr-1.7.38.orig/mainmenuitemsprovider.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/mainmenuitemsprovider.h	2013-02-18 11:37:34.815403535 +0100
@@ -0,0 +1,62 @@
+#ifdef USE_MENUORG
+/*
+ * vdr-menuorg - A plugin for the Linux Video Disk Recorder
+ * Copyright (c) 2007 - 2008 Tobias Grimm <vdr@e-tobi.net>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ * $Id$
+ *
+ */
+
+#ifndef __MAINMENUITEMSPROVIDER_H
+#define __MAINMENUITEMSPROVIDER_H
+
+#include <vector>
+
+class cOsdItem;
+class cOsdMenu;
+
+class IMenuItemDefinition
+{
+   public:
+      virtual ~IMenuItemDefinition() {};
+      virtual bool IsCustomOsdItem() = 0;
+      virtual bool IsPluginItem() = 0;
+      virtual bool IsSeparatorItem() = 0;
+      virtual cOsdItem* CustomOsdItem() = 0;
+      virtual const char* PluginMenuEntry() = 0;
+      virtual bool IsSelected() = 0;
+      virtual int PluginIndex() = 0;
+};
+
+typedef std::vector<IMenuItemDefinition*> MenuItemDefinitions;
+
+#define MENU_ITEMS_PROVIDER_SERVICE_ID "MenuOrgPatch-v0.4.2::MainMenuItemsProvider"
+
+class IMainMenuItemsProvider
+{
+   public:
+      virtual ~IMainMenuItemsProvider() {};
+      virtual bool IsCustomMenuAvailable() = 0;
+      virtual MenuItemDefinitions* MainMenuItems() = 0;
+      virtual void EnterRootMenu() = 0;
+      virtual void EnterSubMenu(cOsdItem* item) = 0;
+      virtual bool LeaveSubMenu() = 0;
+      virtual cOsdMenu* Execute(cOsdItem* item) = 0;
+};
+
+#endif //__MAINMENUITEMSPROVIDER_H
+#endif /* MENUORG */
--- vdr-1.7.38.orig/Make.config.template	2013-02-18 11:36:24.601286246 +0100
+++ vdr-1.7.38/Make.config.template	2013-02-18 11:41:19.075584203 +0100
@@ -76,3 +76,104 @@
 CFLAGS   += -fPIC
 CXXFLAGS += -fPIC
 endif
+
+### VDR-Extensions:
+
+#ALTERNATECHANNEL = 1
+#CHANNELBIND = 1
+#DDEPGENTRY = 1
+#DVLVIDPREFER = 1
+#GRAPHTFT = 1
+#JUMPINGSECONDS = 1
+#JUMPPLAY = 1
+#VASARAJANAULOJA = 1
+#MAINMENUHOOKS = 1
+#MENUORG = 1
+#NALUDUMP = 1
+#PINPLUGIN = 1
+#PLUGINMISSING = 1
+#ROTOR = 1
+#SETUP = 1
+#TTXTSUBS = 1
+#VOLCTRL = 1
+#WAREAGLEICON = 1
+#YAEPG = 1
+
+### You don't need to touch the following:
+
+ifdef ALTERNATECHANNEL
+DEFINES += -DUSE_ALTERNATECHANNEL
+endif
+
+ifdef CHANNELBIND
+DEFINES += -DUSE_CHANNELBIND
+endif
+
+ifdef DDEPGENTRY
+DEFINES += -DUSE_DDEPGENTRY
+endif
+
+ifdef DVLVIDPREFER
+DEFINES += -DUSE_DVLVIDPREFER
+endif
+
+ifdef GRAPHTFT
+DEFINES += -DUSE_GRAPHTFT
+endif
+
+ifdef JUMPINGSECONDS
+DEFINES += -DUSE_JUMPINGSECONDS
+endif
+
+ifdef JUMPPLAY
+DEFINES += -DUSE_JUMPPLAY
+endif
+
+ifdef VASARAJANAULOJA
+DEFINES += -DUSE_VASARAJANAULOJA
+endif
+
+ifdef MAINMENUHOOKS
+DEFINES += -DUSE_MAINMENUHOOKS
+endif
+
+ifdef MENUORG
+DEFINES += -DUSE_MENUORG
+endif
+
+ifdef NALUDUMP
+DEFINES += -DUSE_NALUDUMP
+endif
+
+ifdef PINPLUGIN
+DEFINES += -DUSE_PINPLUGIN
+endif
+
+ifdef PLUGINMISSING
+DEFINES += -DUSE_PLUGINMISSING
+endif
+
+ifdef ROTOR
+DEFINES += -DUSE_ROTOR
+endif
+
+ifdef SETUP
+DEFINES += -DUSE_SETUP
+endif
+
+ifdef TTXTSUBS
+DEFINES += -DUSE_TTXTSUBS
+endif
+
+ifdef VOLCTRL
+DEFINES += -DUSE_VOLCTRL
+endif
+
+ifdef WAREAGLEICON
+DEFINES += -DUSE_WAREAGLEICON
+endif
+
+ifdef YAEPG
+DEFINES += -DUSE_YAEPG
+//VDR_XINE_SET_VIDEO_WINDOW = 1
+endif
--- vdr-1.7.38.orig/Makefile	2013-02-18 11:36:24.558286787 +0100
+++ vdr-1.7.38/Makefile	2013-02-18 11:37:34.817403510 +0100
@@ -73,6 +73,24 @@
        skinclassic.o skinlcars.o skins.o skinsttng.o sourceparams.o sources.o spu.o status.o svdrp.o themes.o thread.o\
        timers.o tools.o transfer.o vdr.o videodir.o
 
+ifdef VASARAJANAULOJA
+OBJS += filetransfer.o
+endif
+
+ifdef SETUP
+OBJS += submenu.o
+LIBS += -ltinyxml
+endif
+
+ifdef WAREAGLEICON
+OBJS += iconpatch.o
+endif
+
+ifdef TTXTSUBS
+OBJS += vdrttxtsubshooks.o
+endif
+
+
 DEFINES  += $(CDEFINES)
 INCLUDES += $(CINCLUDES)
 
--- vdr-1.7.38.orig/MANUAL	2013-02-18 11:36:24.547286925 +0100
+++ vdr-1.7.38/MANUAL	2013-02-18 11:37:34.819403485 +0100
@@ -756,6 +756,9 @@
                          background transparency. By default the values as broadcast
                          are used.
 
+  Record Teletext Subtitles = no
+                         If set to 'yes', teletext subtitles will be recorded.
+
   LNB:
 
   Use DiSEqC = no        Generally turns DiSEqC support on or off.
--- vdr-1.7.38.orig/menu.c	2013-02-18 11:36:24.546286937 +0100
+++ vdr-1.7.38/menu.c	2013-02-18 11:37:34.828403372 +0100
@@ -8,6 +8,9 @@
  */
 
 #include "menu.h"
+#ifdef USE_WAREAGLEICON
+#include "iconpatch.h"
+#endif /* WAREAGLEICON */
 #include <ctype.h>
 #include <limits.h>
 #include <math.h>
@@ -18,6 +21,9 @@
 #include "config.h"
 #include "cutter.h"
 #include "eitscan.h"
+#ifdef USE_VASARAJANAULOJA
+#include "filetransfer.h"
+#endif /* VASARAJANAULOJA */
 #include "i18n.h"
 #include "interface.h"
 #include "plugin.h"
@@ -31,6 +37,9 @@
 #include "timers.h"
 #include "transfer.h"
 #include "videodir.h"
+#ifdef USE_MENUORG
+#include "menuorgpatch.h"
+#endif /* MENUORG */
 
 #define MAXWAIT4EPGINFO   3 // seconds
 #define MODETIMEOUT       3 // seconds
@@ -167,6 +176,9 @@
 public:
   cMenuEditChannel(cChannel *Channel, bool New = false);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuEditChannel"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuEditChannel::cMenuEditChannel(cChannel *Channel, bool New)
@@ -215,6 +227,9 @@
   Add(new cMenuEditIntItem( tr("Tid"),          &data.tid, 0));
   Add(new cMenuEditIntItem( tr("Rid"),          &data.rid, 0));
   XXX*/
+#ifdef USE_CHANNELBIND
+  Add(new cMenuEditIntItem( tr("Rid"),          &data.rid, 0)); // channel binding patch
+#endif /* CHANNELBIND */
   // Parameters for specific types of sources:
   sourceParam = SourceParams.Get(**cSource::ToString(data.source));
   if (sourceParam) {
@@ -316,6 +331,16 @@
   if (!channel->GroupSep()) {
      if (sortMode == csmProvider)
         buffer = cString::sprintf("%d\t%s - %s", channel->Number(), channel->Provider(), channel->Name());
+#ifdef USE_WAREAGLEICON
+     else if (Setup.WarEagleIcons) {
+        if (channel->Vpid() == 1 || channel->Vpid() == 0)
+           buffer = cString::sprintf("%d\t%s %-30s", channel->Number(), IsLangUtf8() ? ICON_RADIO_UTF8 : ICON_RADIO, channel->Name());
+        else if (channel->Ca() == 0)
+           buffer = cString::sprintf("%d\t%s %-30s", channel->Number(), IsLangUtf8() ? ICON_TV_UTF8 : ICON_TV, channel->Name());
+        else
+           buffer = cString::sprintf("%d\t%s %-30s", channel->Number(), IsLangUtf8() ? ICON_TV_CRYPTED_UTF8 : ICON_TV_CRYPTED, channel->Name());
+        }
+#endif /* WAREAGLEICON */
      else
         buffer = cString::sprintf("%d\t%s", channel->Number(), channel->Name());
      }
@@ -352,6 +377,9 @@
   cMenuChannels(void);
   ~cMenuChannels();
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuChannels"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuChannels::cMenuChannels(void)
@@ -896,6 +924,17 @@
      Add(new cMenuEditBitItem( tr("VPS"),          &data.flags, tfVps));
      Add(new cMenuEditIntItem( tr("Priority"),     &data.priority, 0, MAXPRIORITY));
      Add(new cMenuEditIntItem( tr("Lifetime"),     &data.lifetime, 0, MAXLIFETIME));
+#ifdef USE_PINPLUGIN
+     if (cOsd::pinValid || !data.fskProtection) Add(new cMenuEditBoolItem(tr("Childlock"),&data.fskProtection));
+     else {
+        char* buf = 0;
+        if (asprintf(&buf, "%s\t%s", tr("Childlock"), data.fskProtection ? tr("yes") : tr("no")) > 0) {
+           Add(new cOsdItem(buf));
+           free(buf);
+           }
+        }
+
+#endif /* PINPLUGIN */
      Add(file = new cMenuEditStrItem( tr("File"),   data.file, sizeof(data.file)));
      SetFirstDayItem();
      }
@@ -1044,8 +1083,13 @@
      File++;
   else
      File = timer->File();
-  SetText(cString::sprintf("%c\t%d\t%s%s%s\t%02d:%02d\t%02d:%02d\t%s",
+#ifdef USE_WAREAGLEICON
+     SetText(cString::sprintf("%s\t%d\t%s%s%s\t%02d:%02d\t%02d:%02d\t%s",
+                    !(timer->HasFlags(tfActive)) ? " " : timer->FirstDay() ? Setup.WarEagleIcons ? IsLangUtf8() ? ICON_ARROW_UTF8 : ICON_ARROW : "!" : timer->Recording() ? Setup.WarEagleIcons ? IsLangUtf8() ? ICON_REC_UTF8 : ICON_REC : "#" : Setup.WarEagleIcons ? IsLangUtf8() ? ICON_CLOCK_UTF8 : ICON_CLOCK : ">",
+#else
+     SetText(cString::sprintf("%c\t%d\t%s%s%s\t%02d:%02d\t%02d:%02d\t%s",
                     !(timer->HasFlags(tfActive)) ? ' ' : timer->FirstDay() ? '!' : timer->Recording() ? '#' : '>',
+#endif /* WAREAGLEICON */
                     timer->Channel()->Number(),
                     *name,
                     *name && **name ? " " : "",
@@ -1241,6 +1285,9 @@
 {
   cOsdMenu::Display();
   DisplayMenu()->SetEvent(event);
+#ifdef USE_GRAPHTFT
+  cStatus::MsgOsdSetEvent(event);
+#endif /* GRAPHTFT */
   if (event->Description())
      cStatus::MsgOsdTextItem(event->Description());
 }
@@ -1319,7 +1366,16 @@
   return r;
 }
 
+#ifdef USE_WAREAGLEICON
+static const char *TimerMatchChars[9] =
+{
+  " ", "t", "T",
+  ICON_BLANK, ICON_CLOCK_UH, ICON_CLOCK,
+  ICON_BLANK_UTF8, ICON_CLOCK_UH_UTF8, ICON_CLOCK_UTF8
+};
+#else
 static const char *TimerMatchChars = " tT";
+#endif /* WAREAGLEICON */
 
 bool cMenuScheduleItem::Update(bool Force)
 {
@@ -1328,17 +1384,35 @@
   Timers.GetMatch(event, &timerMatch);
   if (Force || timerMatch != OldTimerMatch) {
      cString buffer;
+#ifdef USE_WAREAGLEICON
+     const char *t = Setup.WarEagleIcons ? IsLangUtf8() ? TimerMatchChars[timerMatch+6] : TimerMatchChars[timerMatch+3] : TimerMatchChars[timerMatch];
+     const char *v = event->Vps() && (event->Vps() - event->StartTime()) ? Setup.WarEagleIcons ? IsLangUtf8() ? ICON_VPS_UTF8 : ICON_VPS : "V" : " ";
+     const char *r = event->SeenWithin(30) && event->IsRunning() ? Setup.WarEagleIcons ? IsLangUtf8() ? ICON_RUNNING_UTF8 : ICON_RUNNING : "*" : " ";
+#else
      char t = TimerMatchChars[timerMatch];
      char v = event->Vps() && (event->Vps() - event->StartTime()) ? 'V' : ' ';
      char r = event->SeenWithin(30) && event->IsRunning() ? '*' : ' ';
+#endif /* WAREAGLEICON */
      const char *csn = channel ? channel->ShortName(true) : NULL;
      cString eds = event->GetDateString();
      if (channel && withDate)
+#ifdef USE_WAREAGLEICON
+        buffer = cString::sprintf("%d\t%.*s\t%.*s\t%s\t%s%s%s\t%s", channel->Number(), Utf8SymChars(csn, 999), csn, Utf8SymChars(eds, 6), *eds, *event->GetTimeString(), t, v, r, event->Title());
+#else
         buffer = cString::sprintf("%d\t%.*s\t%.*s\t%s\t%c%c%c\t%s", channel->Number(), Utf8SymChars(csn, 999), csn, Utf8SymChars(eds, 6), *eds, *event->GetTimeString(), t, v, r, event->Title());
+#endif /* WAREAGLEICON */
      else if (channel)
+#ifdef USE_WAREAGLEICON
+        buffer = cString::sprintf("%d\t%.*s\t%s\t%s%s%s\t%s", channel->Number(), Utf8SymChars(csn, 999), csn, *event->GetTimeString(), t, v, r, event->Title());
+#else
         buffer = cString::sprintf("%d\t%.*s\t%s\t%c%c%c\t%s", channel->Number(), Utf8SymChars(csn, 999), csn, *event->GetTimeString(), t, v, r, event->Title());
+#endif /* WAREAGLEICON */
      else
+#ifdef USE_WAREAGLEICON
+        buffer = cString::sprintf("%.*s\t%s\t%s%s%s\t%s", Utf8SymChars(eds, 6), *eds, *event->GetTimeString(), t, v, r, event->Title());
+#else
         buffer = cString::sprintf("%.*s\t%s\t%c%c%c\t%s", Utf8SymChars(eds, 6), *eds, *event->GetTimeString(), t, v, r, event->Title());
+#endif /* WAREAGLEICON */
      SetText(buffer);
      result = true;
      }
@@ -1370,6 +1444,10 @@
   static void SetCurrentChannel(int ChannelNr) { currentChannel = ChannelNr; }
   static const cEvent *ScheduleEvent(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return now ? "MenuWhatsOnNow" : "MenuWhatsOnNext"; }
+  virtual void Display(void);
+#endif /* GRAPHTFT */
   };
 
 int cMenuWhatsOn::currentChannel = 0;
@@ -1398,6 +1476,20 @@
   SetHelpKeys();
 }
 
+#ifdef USE_GRAPHTFT
+void cMenuWhatsOn::Display(void)
+{
+   cOsdMenu::Display();
+
+   if (Count() > 0) {
+      int ni = 0;
+      for (cOsdItem *item = First(); item; item = Next(item)) {
+         cStatus::MsgOsdEventItem(((cMenuScheduleItem*)item)->event, item->Text(), ni++, Count());
+      }
+   }
+}
+#endif /* GRAPHTFT */
+
 bool cMenuWhatsOn::Update(void)
 {
   bool result = false;
@@ -1538,6 +1630,10 @@
   cMenuSchedule(void);
   virtual ~cMenuSchedule();
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSchedule"; }
+  virtual void Display(void);
+#endif /* GRAPHTFT */
   };
 
 cMenuSchedule::cMenuSchedule(void)
@@ -1564,6 +1660,20 @@
   cMenuWhatsOn::ScheduleEvent(); // makes sure any posted data is cleared
 }
 
+#ifdef USE_GRAPHTFT
+void cMenuSchedule::Display(void)
+{
+   cOsdMenu::Display();
+
+   if (Count() > 0) {
+      int ni = 0;
+      for (cOsdItem *item = First(); item; item = Next(item)) {
+         cStatus::MsgOsdEventItem(((cMenuScheduleItem*)item)->event, item->Text(), ni++, Count());
+      }
+   }
+}
+#endif /* GRAPHTFT */
+
 void cMenuSchedule::PrepareScheduleAllThis(const cEvent *Event, const cChannel *Channel)
 {
   Clear();
@@ -1928,6 +2038,9 @@
   cMenuCam(cCamSlot *CamSlot);
   virtual ~cMenuCam();
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuCam"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuCam::cMenuCam(cCamSlot *CamSlot)
@@ -2115,6 +2228,9 @@
   cMenuRecording(const cRecording *Recording, bool WithButtons = false);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuRecording"; }
+#endif /* GRAPHTFT */
 };
 
 cMenuRecording::cMenuRecording(const cRecording *Recording, bool WithButtons)
@@ -2131,6 +2247,9 @@
 {
   cOsdMenu::Display();
   DisplayMenu()->SetRecording(recording);
+#ifdef USE_GRAPHTFT
+  cStatus::MsgOsdSetRecording(recording);
+#endif /* GRAPHTFT */
   if (recording->Info()->Description())
      cStatus::MsgOsdTextItem(recording->Info()->Description());
 }
@@ -2218,6 +2337,169 @@
      DisplayMenu->SetItem(Text(), Index, Current, Selectable);
 }
 
+#ifdef USE_VASARAJANAULOJA
+// --- cMenuEditRecording ----------------------------------------------------
+
+class cMenuEditRecording : public cOsdMenu {
+private:
+  char name[MaxFileName];
+  cMenuEditStrItem *file;
+  cOsdItem *marksItem, *resumeItem;
+  bool isResume, isMarks;
+  cRecording *recording;
+  void SetHelpKeys(void);
+  eOSState SetFolder(void);
+public:
+  cMenuEditRecording(cRecording *Recording);
+  virtual eOSState ProcessKey(eKeys Key);
+};
+
+cMenuEditRecording::cMenuEditRecording(cRecording *Recording)
+:cOsdMenu(tr("Edit recording"), 14)
+{
+  cMarks marks;
+
+  file = NULL;
+  recording = Recording;
+
+  if (recording) {
+     Utf8Strn0Cpy(name, recording->Name(), sizeof(name));
+     Add(file = new cMenuEditStrItem(tr("File"), name, sizeof(name)));
+
+     Add(new cOsdItem("", osUnknown, false));
+
+     Add(new cOsdItem(cString::sprintf("%s:\t%s", tr("Date"), *DayDateTime(recording->Start())), osUnknown, false));
+
+     cChannel *channel = Channels.GetByChannelID(((cRecordingInfo *)recording->Info())->ChannelID());
+     if (channel)
+        Add(new cOsdItem(cString::sprintf("%s:\t%s", tr("Channel"), *ChannelString(channel, 0)), osUnknown, false));
+
+     int recLen = recording->LengthInSeconds();
+     if (recLen >= 0)
+        Add(new cOsdItem(cString::sprintf("%s:\t%d:%02d:%02d", tr("Length"), recLen / 3600, recLen / 60 % 60, recLen % 60), osUnknown, false));
+     else
+        recLen = 0;
+
+     int dirSize = DirSizeMB(recording->FileName());
+     cString bitRate = recLen ? cString::sprintf(" (%.2f MBit/s)", 8.0 * dirSize / recLen) : cString("");
+     Add(new cOsdItem(cString::sprintf("%s:\t%s", tr("Format"), recording->IsPesRecording() ? tr("PES") : tr("TS")), osUnknown, false));
+     Add(new cOsdItem((dirSize > 9999) ? cString::sprintf("%s:\t%.2f GB%s", tr("Size"), dirSize / 1024.0, *bitRate) : cString::sprintf("%s:\t%d MB%s", tr("Size"), dirSize, *bitRate), osUnknown, false));
+
+     Add(new cOsdItem("", osUnknown, false));
+
+     isMarks = marks.Load(recording->FileName(), recording->FramesPerSecond(), recording->IsPesRecording()) && marks.Count();
+     marksItem = new cOsdItem(tr("Delete marks information?"), osUser1, isMarks);
+     Add(marksItem);
+
+     cResumeFile ResumeFile(recording->FileName(), recording->IsPesRecording());
+     isResume = (ResumeFile.Read() != -1);
+     resumeItem = new cOsdItem(tr("Delete resume information?"), osUser2, isResume);
+     Add(resumeItem);
+     }
+
+  SetHelpKeys();
+}
+
+void cMenuEditRecording::SetHelpKeys(void)
+{
+  SetHelp(tr("Button$Folder"), tr("Button$Cut"), tr("Button$Copy"), tr("Button$Rename/Move"));
+}
+
+eOSState cMenuEditRecording::SetFolder(void)
+{
+  cMenuFolder *mf = (cMenuFolder *)SubMenu();
+  if (mf) {
+     cString Folder = mf->GetFolder();
+     char *p = strrchr(name, FOLDERDELIMCHAR);
+     if (p)
+        p++;
+     else
+        p = name;
+     if (!isempty(*Folder))
+        strn0cpy(name, cString::sprintf("%s%c%s", *Folder, FOLDERDELIMCHAR, p), sizeof(name));
+     else if (p != name)
+        memmove(name, p, strlen(p) + 1);
+     SetCurrent(file);
+     Display();
+     }
+  return CloseSubMenu();
+}
+
+eOSState cMenuEditRecording::ProcessKey(eKeys Key)
+{
+  eOSState state = cOsdMenu::ProcessKey(Key);
+
+  if (state == osUnknown) {
+     switch (Key) {
+       case kRed:
+            return AddSubMenu(new cMenuFolder(tr("Select folder"), &Folders, name));
+            break;
+       case kGreen:
+            if (!cCutter::Active()) {
+               if (!isMarks)
+                  Skins.Message(mtError, tr("No editing marks defined!"));
+               else if (!cCutter::Start(recording->FileName(), strcmp(recording->Name(), name) ? *NewVideoFileName(recording->FileName(), name) : NULL, false))
+                  Skins.Message(mtError, tr("Can't start editing process!"));
+               else
+                  Skins.Message(mtInfo, tr("Editing process started"));
+               }
+            else
+               Skins.Message(mtError, tr("Editing process already active!"));
+            return osContinue;
+       case kYellow:
+       case kBlue:
+            if (strcmp(recording->Name(), name)) {
+               if (!cFileTransfer::Active()) {
+                  if (cFileTransfer::Start(recording, name, (Key == kYellow)))
+                     Skins.Message(mtInfo, tr("File transfer started"));
+                  else
+                     Skins.Message(mtError, tr("Can't start file transfer!"));
+                  }
+               else
+                  Skins.Message(mtError, tr("File transfer already active!"));
+               }
+            return osRecordings;
+       default:
+            break;
+       }
+     return osContinue;
+     }
+  else if (state == osEnd && HasSubMenu())
+     state = SetFolder();
+  else if (state == osUser1) {
+     if (isMarks && Interface->Confirm(tr("Delete marks information?"))) {
+        cMarks marks;
+        marks.Load(recording->FileName(), recording->FramesPerSecond(), recording->IsPesRecording());
+        cMark *mark = marks.First();
+        while (mark) {
+              cMark *nextmark = marks.Next(mark);
+              marks.Del(mark);
+              mark = nextmark;
+              }
+        marks.Save();
+        isMarks = false;
+        marksItem->SetSelectable(isMarks);
+        SetCurrent(First());
+        Display();
+        }
+     return osContinue;
+     }
+  else if (state == osUser2) {
+     if (isResume && Interface->Confirm(tr("Delete resume information?"))) {
+        cResumeFile ResumeFile(recording->FileName(), recording->IsPesRecording());
+        ResumeFile.Delete();
+        isResume = false;
+        resumeItem->SetSelectable(isResume);
+        SetCurrent(First());
+        Display();
+        }
+     return osContinue;
+     }
+
+  return state;
+}
+#endif /* VASARAJANAULOJA */
+
 // --- cMenuRecordings -------------------------------------------------------
 
 cMenuRecordings::cMenuRecordings(const char *Base, int Level, bool OpenSubMenus)
@@ -2294,7 +2576,13 @@
                    }
                 }
             }
+#ifdef USE_PINPLUGIN
+         if (*Item->Text() && !LastDir &&
+             !cStatus::MsgReplayProtected(Item->Recording(), Item->Name(), base,
+                                          Item->IsDirectory(), true)) {
+#else
          if (*Item->Text() && !LastDir) {
+#endif /* PINPLUGIN */
             Add(Item);
             LastItem = Item;
             if (Item->IsDirectory())
@@ -2347,6 +2635,11 @@
 {
   cMenuRecordingItem *ri = (cMenuRecordingItem *)Get(Current());
   if (ri) {
+#ifdef USE_PINPLUGIN
+     if (cStatus::MsgReplayProtected(ri->Recording(), ri->Name(), base,
+                                     ri->IsDirectory()) == true)
+        return osContinue;
+#endif /* PINPLUGIN */
      if (ri->IsDirectory())
         Open();
      else {
@@ -2451,6 +2744,21 @@
   return osContinue;
 }
 
+#ifdef USE_VASARAJANAULOJA
+eOSState cMenuRecordings::Edit(void)
+{
+  if (HasSubMenu() || Count() == 0)
+     return osContinue;
+  cMenuRecordingItem *ri = (cMenuRecordingItem *)Get(Current());
+  if (ri && !ri->IsDirectory()) {
+     cRecording *recording = (ri->Recording());
+     if (recording)
+        return AddSubMenu(new cMenuEditRecording(recording));
+     }
+  return osContinue;
+}
+#endif /* VASARAJANAULOJA */
+
 eOSState cMenuRecordings::Sort(void)
 {
   if (HasSubMenu())
@@ -2476,7 +2784,12 @@
        case kInfo:
        case kBlue:   return Info();
        case k0:      return Sort();
+#ifdef USE_VASARAJANAULOJA
+       case k1:      return Edit();
+       case k2...k9: return Commands(Key);
+#else
        case k1...k9: return Commands(Key);
+#endif /* VASARAJANAULOJA */
        case kNone:   if (Recordings.StateChanged(recordingsState))
                         Set(true);
                      break;
@@ -2540,6 +2853,9 @@
   cMenuSetupOSD(void);
   virtual ~cMenuSetupOSD();
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetupOsd"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetupOSD::cMenuSetupOSD(void)
@@ -2586,6 +2902,9 @@
   Add(new cMenuEditStraItem(tr("Setup.OSD$Skin"),                   &skinIndex, numSkins, skinDescriptions));
   if (themes.NumThemes())
   Add(new cMenuEditStraItem(tr("Setup.OSD$Theme"),                  &themeIndex, themes.NumThemes(), themes.Descriptions()));
+#ifdef USE_WAREAGLEICON
+  Add(new cMenuEditBoolItem(tr("Setup.OSD$WarEagle icons"),         &data.WarEagleIcons));
+#endif /* WAREAGLEICON */
   Add(new cMenuEditPrcItem( tr("Setup.OSD$Left (%)"),               &data.OSDLeftP, 0.0, 0.5));
   Add(new cMenuEditPrcItem( tr("Setup.OSD$Top (%)"),                &data.OSDTopP, 0.0, 0.5));
   Add(new cMenuEditPrcItem( tr("Setup.OSD$Width (%)"),              &data.OSDWidthP, 0.5, 1.0));
@@ -2690,6 +3009,9 @@
 public:
   cMenuSetupEPG(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetupEpg"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetupEPG::cMenuSetupEPG(void)
@@ -2720,6 +3042,12 @@
   for (int i = 0; i < numLanguages; i++)
       // TRANSLATORS: note the singular!
       Add(new cMenuEditStraItem(tr("Setup.EPG$Preferred language"),    &data.EPGLanguages[i], I18nLanguages()->Size(), &I18nLanguages()->At(0)));
+#ifdef USE_DDEPGENTRY
+  Add(new cMenuEditIntItem(tr("Setup.EPG$Period for double EPG search(min)"), &data.DoubleEpgTimeDelta));
+  Add(new cMenuEditBoolItem(tr("Setup.EPG$extern double Epg entry"),   &data.DoubleEpgAction, "adjust", "delete"));
+  Add(new cMenuEditBoolItem(tr("Setup.EPG$Mix intern and extern EPG"), &data.MixEpgAction));
+  Add(new cMenuEditBoolItem(tr("Setup.EPG$Disable running VPS event"), &data.DisableVPS));
+#endif /* DDEPGENTRY */
 
   SetCurrent(Get(current));
   Display();
@@ -2787,6 +3115,9 @@
 public:
   cMenuSetupDVB(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetupDvb"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetupDVB::cMenuSetupDVB(void)
@@ -2828,6 +3159,9 @@
      Add(new cMenuEditStraItem(tr("Setup.DVB$Video display format"), &data.VideoDisplayFormat, 3, videoDisplayFormatTexts));
   Add(new cMenuEditBoolItem(tr("Setup.DVB$Use Dolby Digital"),     &data.UseDolbyDigital));
   Add(new cMenuEditStraItem(tr("Setup.DVB$Update channels"),       &data.UpdateChannels, 6, updateChannelsTexts));
+#ifdef USE_CHANNELBIND
+  Add(new cMenuEditBoolItem(tr("Setup.DVB$channel binding by Rid"),&data.ChannelBindingByRid));
+#endif /* CHANNELBIND */
   Add(new cMenuEditIntItem( tr("Setup.DVB$Audio languages"),       &numAudioLanguages, 0, I18nLanguages()->Size()));
   for (int i = 0; i < numAudioLanguages; i++)
       Add(new cMenuEditStraItem(tr("Setup.DVB$Audio language"),    &data.AudioLanguages[i], I18nLanguages()->Size(), &I18nLanguages()->At(0)));
@@ -2840,6 +3174,9 @@
      Add(new cMenuEditIntItem( tr("Setup.DVB$Subtitle foreground transparency"), &data.SubtitleFgTransparency, 0, 9));
      Add(new cMenuEditIntItem( tr("Setup.DVB$Subtitle background transparency"), &data.SubtitleBgTransparency, 0, 10));
      }
+#ifdef USE_TTXTSUBS
+  Add(new cMenuEditBoolItem(tr("Setup.DVB$Enable teletext support"), &data.SupportTeletext));
+#endif /* USE_TTXTSUBS */
 
   SetCurrent(Get(current));
   Display();
@@ -2932,6 +3269,9 @@
 public:
   cMenuSetupLNB(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetupLnb"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetupLNB::cMenuSetupLNB(void)
@@ -3035,6 +3375,9 @@
 public:
   cMenuSetupCAM(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetupCam"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetupCAM::cMenuSetupCAM(void)
@@ -3112,12 +3455,49 @@
 private:
   const char *pauseKeyHandlingTexts[3];
   const char *delTimeshiftRecTexts[3];
+#ifdef USE_DVLVIDPREFER
+  void Set(void);
+  int tmpNVidPrefer,
+      tmpUseVidPrefer;
+#endif /* DVLVIDPREFER */
 public:
   cMenuSetupRecord(void);
+#ifdef USE_DVLVIDPREFER
+  eOSState ProcessKey(eKeys key);
+#endif /* DVLVIDPREFER */
   };
 
 cMenuSetupRecord::cMenuSetupRecord(void)
 {
+#ifdef USE_DVLVIDPREFER
+  Set();
+}
+
+eOSState cMenuSetupRecord::ProcessKey(eKeys key)
+{
+  eOSState s = cMenuSetupBase::ProcessKey(key);;
+
+  if (key != kNone) {
+    if (tmpNVidPrefer != data.nVidPrefer || tmpUseVidPrefer != data.UseVidPrefer) {
+      int cur = Current();
+
+      tmpNVidPrefer = data.nVidPrefer;
+      tmpUseVidPrefer = data.UseVidPrefer;
+
+      Clear();
+      Set();
+      SetCurrent(Get(cur));
+      Display();
+      cMenuSetupBase::ProcessKey(kNone);
+      return osContinue;
+      }
+   }
+   return s;
+}
+
+void cMenuSetupRecord::Set(void)
+{
+#endif /* DVLVIDPREFER */
   SetMenuCategory(mcSetupRecord);
   pauseKeyHandlingTexts[0] = tr("do not pause live video");
   pauseKeyHandlingTexts[1] = tr("confirm pause live video");
@@ -3133,6 +3513,22 @@
   Add(new cMenuEditStraItem(tr("Setup.Recording$Pause key handling"),        &data.PauseKeyHandling, 3, pauseKeyHandlingTexts));
   Add(new cMenuEditIntItem( tr("Setup.Recording$Pause priority"),            &data.PausePriority, 0, MAXPRIORITY));
   Add(new cMenuEditIntItem( tr("Setup.Recording$Pause lifetime (d)"),        &data.PauseLifetime, 0, MAXLIFETIME));
+#ifdef USE_DVLVIDPREFER
+  tmpNVidPrefer = data.nVidPrefer;
+  tmpUseVidPrefer = data.UseVidPrefer;
+
+  Add(new cMenuEditBoolItem(tr("Setup.Recording$Video directory policy"),    &data.UseVidPrefer));
+  if (data.UseVidPrefer != 0) {
+     char tmp[ 64 ];
+     Add(new cMenuEditIntItem(tr("Setup.Recording$Number of video directories"), &data.nVidPrefer, 1, DVLVIDPREFER_MAX));
+     for (int zz = 0; zz < data.nVidPrefer; zz++) {
+         sprintf(tmp, tr("Setup.Recording$Video %d priority"), zz);
+         Add(new cMenuEditIntItem(tmp, &data.VidPreferPrio[ zz ], 0, 99));
+         sprintf(tmp, tr("Setup.Recording$Video %d min. free MB"), zz);
+         Add(new cMenuEditIntItem(tmp, &data.VidPreferSize[ zz ], -1, 99999));
+         }
+     }
+#endif /* DVLVIDPREFER */
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Use episode name"),          &data.UseSubtitle));
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Use VPS"),                   &data.UseVps));
   Add(new cMenuEditIntItem( tr("Setup.Recording$VPS margin (s)"),            &data.VpsMargin, 0));
@@ -3142,6 +3538,9 @@
   Add(new cMenuEditIntItem( tr("Setup.Recording$Max. video file size (MB)"), &data.MaxVideoFileSize, MINVIDEOFILESIZE, MAXVIDEOFILESIZETS));
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Split edited files"),        &data.SplitEditedFiles));
   Add(new cMenuEditStraItem(tr("Setup.Recording$Delete timeshift recording"),&data.DelTimeshiftRec, 3, delTimeshiftRecTexts));
+#ifdef USE_NALUDUMP
+  Add(new cMenuEditBoolItem(tr("Setup.Recording$Dump NALU Fill data"),       &data.DumpNaluFill));
+#endif /* USE_NALUDUMP */
 }
 
 // --- cMenuSetupReplay ------------------------------------------------------
@@ -3163,6 +3562,16 @@
   Add(new cMenuEditIntItem( tr("Setup.Replay$Progress display time (s)"), &data.ProgressDisplayTime, 0, 60));
   Add(new cMenuEditBoolItem(tr("Setup.Replay$Pause replay when setting mark"), &data.PauseOnMarkSet));
   Add(new cMenuEditIntItem(tr("Setup.Replay$Resume ID"), &data.ResumeID, 0, 99));
+#ifdef USE_JUMPPLAY
+  Add(new cMenuEditBoolItem(tr("Setup.Replay$Jump&Play"),          &data.JumpPlay));
+  Add(new cMenuEditBoolItem(tr("Setup.Replay$Play&Jump"),          &data.PlayJump));
+  Add(new cMenuEditBoolItem(tr("Setup.Replay$Pause at last mark"), &data.PauseLastMark));
+#endif /* JUMPPLAY */
+#ifdef USE_JUMPINGSECONDS
+  Add(new cMenuEditIntItem(tr("Setup.Replay$Jump Seconds"),             &data.JumpSeconds));
+  Add(new cMenuEditIntItem(tr("Setup.Replay$Jump Seconds Slow"),        &data.JumpSecondsSlow));
+  Add(new cMenuEditIntItem(tr("Setup.Recording$Jump Seconds (Repeat)"), &data.JumpSecondsRepeat));
+#endif /* USE_JUMPINGSECONDS */
 }
 
 void cMenuSetupReplay::Store(void)
@@ -3175,14 +3584,51 @@
 // --- cMenuSetupMisc --------------------------------------------------------
 
 class cMenuSetupMisc : public cMenuSetupBase {
+#ifdef USE_VOLCTRL
+private:
+  const char *lrChannelGroupsTexts[3];
+  const char *lrForwardRewindTexts[3];
+  void Setup(void);
+#endif /* USE_VOLCTRL */
 public:
   cMenuSetupMisc(void);
+#ifdef USE_VOLCTRL
+  virtual eOSState ProcessKey(eKeys Key);
+#endif /* USE_VOLCTRL */
   };
 
 cMenuSetupMisc::cMenuSetupMisc(void)
 {
+#ifdef USE_VOLCTRL
+  lrChannelGroupsTexts[0] = tr("no");
+  lrChannelGroupsTexts[1] = tr("Setup.Miscellaneous$only in channelinfo");
+  lrChannelGroupsTexts[2] = tr("yes");
+  lrForwardRewindTexts[0] = tr("no");
+  lrForwardRewindTexts[1] = tr("Setup.Miscellaneous$only in progress display");
+  lrForwardRewindTexts[2] = tr("yes");
+#endif /* USE_VOLCTRL */
   SetMenuCategory(mcSetupMisc);
   SetSection(tr("Miscellaneous"));
+#ifdef USE_VOLCTRL
+  Setup();
+}
+
+eOSState cMenuSetupMisc::ProcessKey(eKeys Key)
+{
+  int newLRVolumeControl = data.LRVolumeControl;
+  eOSState state = cMenuSetupBase::ProcessKey(Key);
+
+  if (Key != kNone && data.LRVolumeControl != newLRVolumeControl)
+     Setup();
+  return state;
+}
+
+void cMenuSetupMisc::Setup(void)
+{
+  int current = Current();
+
+  Clear();
+#endif /* USE_VOLCTRL */
   Add(new cMenuEditIntItem( tr("Setup.Miscellaneous$Min. event timeout (min)"),   &data.MinEventTimeout));
   Add(new cMenuEditIntItem( tr("Setup.Miscellaneous$Min. user inactivity (min)"), &data.MinUserInactivity));
   Add(new cMenuEditIntItem( tr("Setup.Miscellaneous$SVDRP timeout (s)"),          &data.SVDRPTimeout));
@@ -3192,9 +3638,20 @@
   Add(new cMenuEditIntItem( tr("Setup.Miscellaneous$Remote control repeat delta (ms)"), &data.RcRepeatDelta, 0));
   Add(new cMenuEditChanItem(tr("Setup.Miscellaneous$Initial channel"),            &data.InitialChannel, tr("Setup.Miscellaneous$as before")));
   Add(new cMenuEditIntItem( tr("Setup.Miscellaneous$Initial volume"),             &data.InitialVolume, -1, 255, tr("Setup.Miscellaneous$as before")));
+#ifdef USE_VOLCTRL
+  Add(new cMenuEditBoolItem(tr("Setup.Miscellaneous$Volume ctrl with left/right"),     &data.LRVolumeControl));
+  if (data.LRVolumeControl) {
+     Add(new cMenuEditStraItem(tr("Setup.Miscellaneous$Channelgroups with left/right"),   &data.LRChannelGroups, 3, lrChannelGroupsTexts));
+     Add(new cMenuEditStraItem(tr("Setup.Miscellaneous$Search fwd/back with left/right"), &data.LRForwardRewind, 3, lrForwardRewindTexts));
+  }
+#endif /* USE_VOLCTRL */
   Add(new cMenuEditBoolItem(tr("Setup.Miscellaneous$Channels wrap"),              &data.ChannelsWrap));
   Add(new cMenuEditBoolItem(tr("Setup.Miscellaneous$Show channel names with source"), &data.ShowChannelNamesWithSource));
   Add(new cMenuEditBoolItem(tr("Setup.Miscellaneous$Emergency exit"),             &data.EmergencyExit));
+#ifdef USE_VOLCTRL
+  SetCurrent(Get(current));
+  Display();
+#endif /* USE_VOLCTRL */
 }
 
 // --- cMenuSetupPluginItem --------------------------------------------------
@@ -3219,6 +3676,9 @@
 public:
   cMenuSetupPlugins(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetupPlugins"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetupPlugins::cMenuSetupPlugins(void)
@@ -3274,6 +3734,9 @@
 public:
   cMenuSetup(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuSetup"; }
+#endif /* GRAPHTFT */
   };
 
 cMenuSetup::cMenuSetup(void)
@@ -3364,25 +3827,70 @@
 cMenuMain::cMenuMain(eOSState State)
 :cOsdMenu("")
 {
+#ifdef USE_SETUP
+  // Load Menu Configuration
+  cString menuXML = cString::sprintf("%s/setup/vdr-menu.%s.xml", cPlugin::ConfigDirectory(), Setup.OSDLanguage);
+  if (access(menuXML, 04) == -1)
+     menuXML = cString::sprintf("%s/setup/vdr-menu.xml", cPlugin::ConfigDirectory());
+  subMenu.LoadXml(menuXML);
+  nrDynamicMenuEntries = 0;
+#endif /* SETUP */
+
   SetMenuCategory(mcMain);
   replaying = false;
   stopReplayItem = NULL;
   cancelEditingItem = NULL;
+#ifdef USE_VASARAJANAULOJA
+  cancelFileTransferItem = NULL;
+#endif /* VASARAJANAULOJA */
   stopRecordingItem = NULL;
   recordControlsState = 0;
+
+#ifdef USE_MENUORG
+  MenuOrgPatch::EnterRootMenu();
+#endif /* MENUORG */
   Set();
 
   // Initial submenus:
 
+#ifdef USE_MAINMENUHOOKS
+  cOsdObject *menu = NULL;
+#endif /* MAINMENUHOOKS */
   switch (State) {
+#ifdef USE_MAINMENUHOOKS
+    case osSchedule:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osSchedule", &menu))
+            menu = new cMenuSchedule;
+        break;
+    case osChannels:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osChannels", &menu))
+            menu = new cMenuChannels;
+        break;
+    case osTimers:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osTimers", &menu))
+            menu = new cMenuTimers;
+        break;
+    case osRecordings:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osRecordings", &menu))
+            menu = new cMenuRecordings(NULL, 0, true);
+        break;
+    case osSetup:      menu = new cMenuSetup; break;
+    case osCommands:   menu = new cMenuCommands(tr("Commands"), &Commands); break;
+#else
     case osSchedule:   AddSubMenu(new cMenuSchedule); break;
     case osChannels:   AddSubMenu(new cMenuChannels); break;
     case osTimers:     AddSubMenu(new cMenuTimers); break;
     case osRecordings: AddSubMenu(new cMenuRecordings(NULL, 0, true)); break;
     case osSetup:      AddSubMenu(new cMenuSetup); break;
     case osCommands:   AddSubMenu(new cMenuCommands(tr("Commands"), &Commands)); break;
+#endif /* MAINMENUHOOKS */
     default: break;
     }
+#ifdef USE_MAINMENUHOOKS
+  if (menu)
+     if (menu->IsMenu())
+        AddSubMenu((cOsdMenu *) menu);
+#endif /* MAINMENUHOOKS */
 }
 
 cOsdObject *cMenuMain::PluginOsdObject(void)
@@ -3392,37 +3900,156 @@
   return o;
 }
 
+#ifdef USE_SETUP
+void cMenuMain::Set(int current)
+#else
 void cMenuMain::Set(void)
+#endif /* SETUP */
 {
   Clear();
   SetTitle("VDR");
   SetHasHotkeys();
 
+#ifdef USE_MENUORG
+  if (MenuOrgPatch::IsCustomMenuAvailable()) {
+     MenuItemDefinitions* menuItems = MenuOrgPatch::MainMenuItems();
+     for (MenuItemDefinitions::iterator i = menuItems->begin(); i != menuItems->end(); i++) {
+        cOsdItem* osdItem = NULL;
+        if ((*i)->IsCustomOsdItem()) {
+           osdItem = (*i)->CustomOsdItem();
+           if (osdItem &&  !(*i)->IsSeparatorItem())
+              osdItem->SetText(hk(osdItem->Text()));
+           }
+        else if ((*i)->IsPluginItem()) {
+           const char *item = (*i)->PluginMenuEntry();
+           if (item)
+              osdItem = new cMenuPluginItem(hk(item), (*i)->PluginIndex());
+           }
+        if (osdItem) {
+           Add(osdItem);
+           if ((*i)->IsSelected())
+              SetCurrent(osdItem);
+           }
+        }
+     }
+  else {
+#endif /* MENUORG */
+#ifdef USE_SETUP
+  stopReplayItem = NULL;
+  cancelEditingItem = NULL;
+  stopRecordingItem = NULL;
+
+  // remember initial dynamic MenuEntries added
+  nrDynamicMenuEntries = Count();
+  for (cSubMenuNode *node = subMenu.GetMenuTree()->First(); node; node = subMenu.GetMenuTree()->Next(node)) {
+      cSubMenuNode::Type type = node->GetType();
+      if (type==cSubMenuNode::PLUGIN) {
+         const char *item = node->GetPluginMainMenuEntry();
+#ifdef USE_PINPLUGIN
+         if (item && !cStatus::MsgPluginProtected(cPluginManager::GetPlugin(node->GetPluginIndex()), true))
+#else
+         if (item)
+#endif /* PINPLUGIN */
+            Add(new cMenuPluginItem(hk(item), node->GetPluginIndex()));
+         }
+      else if (type==cSubMenuNode::MENU) {
+         cString item = cString::sprintf("%s%s", node->GetName(), *subMenu.GetMenuSuffix());
+#ifdef USE_PINPLUGIN
+         if (!cStatus::MsgMenuItemProtected(item, true))
+            Add(new cOsdItem(hk(item), osUnknown, node));
+#else
+            Add(new cOsdItem(hk(item)));
+#endif /* PINPLUGIN */
+         }
+      else if ((type==cSubMenuNode::COMMAND) || (type==cSubMenuNode::THREAD)) {
+#ifdef USE_PINPLUGIN
+         if (!cStatus::MsgMenuItemProtected(node->GetName(), true))
+            Add(new cOsdItem(hk(node->GetName()), osUnknown, node));
+#else
+            Add(new cOsdItem(hk(node->GetName())));
+#endif /* PINPLUGIN */
+         }
+      else if (type==cSubMenuNode::SYSTEM) {
+         const char *item = node->GetName();
+#ifdef USE_PINPLUGIN
+         if (cStatus::MsgMenuItemProtected(item, true))
+            ; // nothing to do ;)
+         else
+#endif /* PINPLUGIN */
+         if (strcmp(item, "Schedule") == 0)
+            Add(new cOsdItem(hk(tr("Schedule")), osSchedule));
+         else if (strcmp(item, "Channels") == 0)
+            Add(new cOsdItem(hk(tr("Channels")), osChannels));
+         else if (strcmp(item, "Timers") == 0)
+            Add(new cOsdItem(hk(tr("Timers")), osTimers));
+         else if (strcmp(item, "Recordings") == 0)
+            Add(new cOsdItem(hk(tr("Recordings")), osRecordings));
+         else if (strcmp(item, "Setup") == 0) {
+            cString itemSetup = cString::sprintf("%s%s", tr("Setup"), *subMenu.GetMenuSuffix());
+            Add(new cOsdItem(hk(itemSetup), osSetup));
+            }
+         else if (strcmp(item, "Commands") == 0 && Commands.Count() > 0) {
+            cString itemCommands = cString::sprintf("%s%s", tr("Commands"), *subMenu.GetMenuSuffix());
+            Add(new cOsdItem(hk(itemCommands), osCommands));
+            }
+         }
+     }
+  if (current >=0 && current<Count()) {
+     SetCurrent(Get(current));
+     }
+
+#else /* NO SETUP */
+
   // Basic menu items:
 
+#ifdef USE_PINPLUGIN
+  if (!cStatus::MsgMenuItemProtected("Schedule", true))   Add(new cOsdItem(hk(tr("Schedule")),   osSchedule));
+  if (!cStatus::MsgMenuItemProtected("Channels", true))   Add(new cOsdItem(hk(tr("Channels")),   osChannels));
+  if (!cStatus::MsgMenuItemProtected("Timers", true))     Add(new cOsdItem(hk(tr("Timers")),     osTimers));
+  if (!cStatus::MsgMenuItemProtected("Recordings", true)) Add(new cOsdItem(hk(tr("Recordings")), osRecordings));
+#else
   Add(new cOsdItem(hk(tr("Schedule")),   osSchedule));
   Add(new cOsdItem(hk(tr("Channels")),   osChannels));
   Add(new cOsdItem(hk(tr("Timers")),     osTimers));
   Add(new cOsdItem(hk(tr("Recordings")), osRecordings));
+#endif /* PINPLUGIN */
 
   // Plugins:
 
   for (int i = 0; ; i++) {
       cPlugin *p = cPluginManager::GetPlugin(i);
       if (p) {
+#ifdef USE_PINPLUGIN
+         if (!cStatus::MsgPluginProtected(p, true)) {
+#endif /* PINPLUGIN */
          const char *item = p->MainMenuEntry();
          if (item)
             Add(new cMenuPluginItem(hk(item), i));
          }
+#ifdef USE_PINPLUGIN
+         }
+#endif /* PINPLUGIN */
       else
          break;
       }
 
   // More basic menu items:
 
+#ifdef USE_PINPLUGIN
+  if (!cStatus::MsgMenuItemProtected("Setup", true)) Add(new cOsdItem(hk(tr("Setup")), osSetup));
+#else
   Add(new cOsdItem(hk(tr("Setup")),      osSetup));
+#endif /* PINPLUGIN */
   if (Commands.Count())
+#ifdef USE_PINPLUGIN
+     if (!cStatus::MsgMenuItemProtected("Commands", true))
+#endif /* PINPLUGIN */
      Add(new cOsdItem(hk(tr("Commands")),  osCommands));
+#endif /* SETUP */
+
+#ifdef USE_MENUORG
+  }
+#endif /* MENUORG */
 
   Update(true);
 
@@ -3433,6 +4060,19 @@
 {
   bool result = false;
 
+#ifdef USE_SETUP
+  cOsdItem *fMenu = NULL;
+  if (Force && subMenu.isTopMenu()) {
+     fMenu = First();
+     nrDynamicMenuEntries = 0;
+     }
+
+  if (!subMenu.isTopMenu()) {
+     SetTitle(cString::sprintf("%s  -  %s", tr("VDR"), subMenu.GetParentMenuTitel()));
+     result = true;
+     }
+#endif /* SETUP */
+
   bool NewReplaying = cControl::Control() != NULL;
   if (Force || NewReplaying != replaying) {
      replaying = NewReplaying;
@@ -3462,6 +4102,21 @@
      result = true;
      }
 
+#ifdef USE_VASARAJANAULOJA
+  // File transfer control:
+  bool FileTransferActive = cFileTransfer::Active();
+  if (FileTransferActive && !cancelFileTransferItem) {
+    // TRANSLATORS: note the leading blank!
+    Add(cancelFileTransferItem = new cOsdItem(tr(" Cancel file transfer"), osCancelTransfer));
+    result = true;
+  }
+  else if (cancelFileTransferItem && !FileTransferActive) {
+    Del(cancelFileTransferItem->Index());
+    cancelFileTransferItem = NULL;
+    result = true;
+  }
+#endif /* VASARAJANAULOJA */
+
   // Record control:
   if (cRecordControls::StateChanged(recordControlsState)) {
      while (stopRecordingItem) {
@@ -3480,6 +4135,12 @@
      result = true;
      }
 
+#ifdef USE_SETUP
+  // adjust nrDynamicMenuEntries
+  if (fMenu != NULL)
+     nrDynamicMenuEntries = fMenu->Index();
+#endif /* SETUP */
+
   return result;
 }
 
@@ -3490,13 +4151,53 @@
   eOSState state = cOsdMenu::ProcessKey(Key);
   HadSubMenu |= HasSubMenu();
 
+#ifdef USE_PINPLUGIN
+  cOsdItem* item = Get(Current());
+
+  if (item && item->Text() && state != osContinue && state != osUnknown && state != osBack)
+     if (cStatus::MsgMenuItemProtected(item->Text()))
+        return osContinue;
+#endif /* PINPLUGIN */
+
+#ifdef USE_MAINMENUHOOKS
+  cOsdObject *menu = NULL;
+#endif /* MAINMENUHOOKS */
   switch (state) {
+#ifdef USE_MAINMENUHOOKS
+    case osSchedule:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osSchedule", &menu))
+            menu = new cMenuSchedule;
+        else
+            state = osContinue;
+        break;
+    case osChannels:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osChannels", &menu))
+            menu = new cMenuChannels;
+        else
+            state = osContinue;
+        break;
+    case osTimers:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osTimers", &menu))
+            menu = new cMenuTimers;
+        else
+            state = osContinue;
+        break;
+    case osRecordings:
+        if (!cPluginManager::CallFirstService("MainMenuHooksPatch-v1.0::osRecordings", &menu))
+            menu = new cMenuRecordings;
+        else
+            state = osContinue;
+        break;
+    case osSetup:      menu = new cMenuSetup; break;
+    case osCommands:   menu = new cMenuCommands(tr("Commands"), &Commands); break;
+#else
     case osSchedule:   return AddSubMenu(new cMenuSchedule);
     case osChannels:   return AddSubMenu(new cMenuChannels);
     case osTimers:     return AddSubMenu(new cMenuTimers);
     case osRecordings: return AddSubMenu(new cMenuRecordings);
     case osSetup:      return AddSubMenu(new cMenuSetup);
     case osCommands:   return AddSubMenu(new cMenuCommands(tr("Commands"), &Commands));
+#endif /* MAINMENUHOOKS */
     case osStopRecord: if (Interface->Confirm(tr("Stop recording?"))) {
                           cOsdItem *item = Get(Current());
                           if (item) {
@@ -3510,11 +4211,22 @@
                           return osEnd;
                           }
                        break;
+#ifdef USE_VASARAJANAULOJA
+    case osCancelTransfer:
+                       if (Interface->Confirm(tr("Cancel file transfer?"))) {
+                          cFileTransfer::Stop();
+                          return osEnd;
+                          }
+                       break;
+#endif
     case osPlugin:     {
                          cMenuPluginItem *item = (cMenuPluginItem *)Get(Current());
                          if (item) {
                             cPlugin *p = cPluginManager::GetPlugin(item->PluginIndex());
                             if (p) {
+#ifdef USE_PINPLUGIN
+                               if (!cStatus::MsgPluginProtected(p)) {
+#endif /* PINPLUGIN */
                                cOsdObject *menu = p->MainMenuAction();
                                if (menu) {
                                   if (menu->IsMenu())
@@ -3524,11 +4236,63 @@
                                      return osPlugin;
                                      }
                                   }
+#ifdef USE_PINPLUGIN
+                               }
+#endif /* PINPLUGIN */
                                }
                             }
                          state = osEnd;
                        }
                        break;
+#ifdef USE_MENUORG
+    case osBack:       {
+                          if (MenuOrgPatch::IsCustomMenuAvailable())
+                          {
+                              bool leavingMenuSucceeded = MenuOrgPatch::LeaveSubMenu();
+                              Set();
+                              stopReplayItem = NULL;
+                              cancelEditingItem = NULL;
+                              stopRecordingItem = NULL;
+                              recordControlsState = 0;
+                              Update(true);
+                              Display();
+                              if (leavingMenuSucceeded)
+                                 return osContinue;
+                              else
+                                 return osEnd;
+                          }
+                       }
+                       break;
+    case osUser1:      {
+                          if (MenuOrgPatch::IsCustomMenuAvailable()) {
+                             MenuOrgPatch::EnterSubMenu(Get(Current()));
+                             Set();
+                             return osContinue;
+                          }
+                       }
+                       break;
+    case osUser2:      {
+                          if (MenuOrgPatch::IsCustomMenuAvailable()) {
+                             cOsdMenu* osdMenu = MenuOrgPatch::Execute(Get(Current()));
+                             if (osdMenu)
+                                return AddSubMenu(osdMenu);
+                             return osEnd;
+                          }
+                       }
+                       break;
+#endif /* MENUORG */
+#ifdef USE_SETUP
+    case osBack:       {
+                         int newCurrent = 0;
+                         if (subMenu.Up(&newCurrent)) {
+                            Set(newCurrent);
+                            return osContinue;
+                            }
+                         else
+                            return osEnd;
+                       }
+                       break;
+#endif /* SETUP */
     default: switch (Key) {
                case kRecord:
                case kRed:    if (!HadSubMenu)
@@ -3545,9 +4309,67 @@
                case kBlue:   if (!HadSubMenu)
                                 state = replaying ? osStopReplay : cReplayControl::LastReplayed() ? osReplay : osRecordings;
                              break;
+#ifdef USE_SETUP
+               case kOk:     if (state == osUnknown) {
+                                cString buffer;
+                                int index = Current()-nrDynamicMenuEntries;
+                                cSubMenuNode *node = subMenu.GetNode(index);
+
+                                if (node != NULL) {
+                                   if (node->GetType() == cSubMenuNode::MENU) {
+#ifdef USE_PINPLUGIN
+                                      subMenu.Down(node, Current());
+#else
+                                      subMenu.Down(index);
+#endif /* PINPLUGIN */
+                                      }
+                                   else if (node->GetType() == cSubMenuNode::COMMAND) {
+                                      bool confirmed = true;
+                                      if (node->CommandConfirm()) {
+                                         buffer = cString::sprintf("%s?", node->GetName());
+                                         confirmed = Interface->Confirm(buffer);
+                                         }
+                                      if (confirmed) {
+                                         const char *Result = subMenu.ExecuteCommand(node->GetCommand());
+                                         if (Result)
+                                            return AddSubMenu(new cMenuText(node->GetName(), Result, fontFix));
+                                         return osEnd;
+                                         }
+                                      }
+                                   else if (node->GetType() == cSubMenuNode::THREAD) {
+                                      bool confirmed = true;
+                                      if (node->CommandConfirm()) {
+                                         buffer = cString::sprintf("%s?", node->GetName());
+                                         confirmed = Interface->Confirm(buffer);
+                                         }
+                                      if (confirmed) {
+                                         buffer = cString::sprintf("%s", node->GetCommand());
+                                         cExecCmdThread *execcmd = new cExecCmdThread(node->GetCommand());
+                                         if (execcmd->Start())
+                                            dsyslog("executing command '%s'", *buffer);
+                                         else
+                                            esyslog("ERROR: can't execute command '%s'", *buffer);
+                                         return osEnd;
+                                         }
+                                      }
+                                   }
+
+                                Set();
+                                return osContinue;
+                                }
+                             break;
+#endif /* SETUP */
                default:      break;
                }
     }
+#ifdef USE_MAINMENUHOOKS
+  if (menu) {
+     if (menu->IsMenu())
+        return AddSubMenu((cOsdMenu *) menu);
+     pluginOsdObject = menu;
+     return osPlugin;
+  }
+#endif /* MAINMENUHOOKS */
   if (!HasSubMenu() && Update(HadSubMenu))
      Display();
   if (Key != kNone) {
@@ -3694,6 +4516,9 @@
   if (Direction) {
      while (Channel) {
            Channel = Direction > 0 ? Channels.Next(Channel) : Channels.Prev(Channel);
+#ifdef USE_PINPLUGIN
+        if (cStatus::MsgChannelProtected(0, Channel) == false)
+#endif /* PINPLUGIN */
            if (!Channel && Setup.ChannelsWrap)
               Channel = Direction > 0 ? Channels.First() : Channels.Last();
            if (Channel && !Channel->GroupSep() && cDevice::GetDevice(Channel, LIVEPRIORITY, true, true))
@@ -3754,6 +4579,13 @@
     case kLeft:
     case kRight|k_Repeat:
     case kRight:
+#ifdef USE_VOLCTRL
+        if (Setup.LRVolumeControl && !Setup.LRChannelGroups) {
+          cRemote::Put(NORMALKEY(Key) == kLeft ? kVolDn : kVolUp, true);
+          break;
+           }
+        // else fall through
+#endif // USE_VOLCTRL
     case kNext|k_Repeat:
     case kNext:
     case kPrev|k_Repeat:
@@ -3913,6 +4745,17 @@
 eOSState cDisplayVolume::ProcessKey(eKeys Key)
 {
   switch (int(Key)) {
+#ifdef USE_VOLCTRL
+   case kLeft|k_Repeat:
+   case kLeft:
+   case kRight|k_Repeat:
+   case kRight:
+        if (Setup.LRVolumeControl) {
+          cRemote::Put(NORMALKEY(Key) == kLeft ? kVolDn : kVolUp, true);
+          break;
+           }
+        // else fall through
+#endif // USE_VOLCTRL
     case kVolUp|k_Repeat:
     case kVolUp:
     case kVolDn|k_Repeat:
@@ -4160,7 +5003,11 @@
 
 // --- cRecordControl --------------------------------------------------------
 
+#ifdef USE_ALTERNATECHANNEL
+cRecordControl::cRecordControl(cDevice *Device, cTimer *Timer, bool Pause, cChannel *Channel)
+#else
 cRecordControl::cRecordControl(cDevice *Device, cTimer *Timer, bool Pause)
+#endif /* ALTERNATECHANNEL */
 {
   // Whatever happens here, the timers will be modified in some way...
   Timers.SetModified();
@@ -4209,9 +5056,16 @@
   cRecordingUserCommand::InvokeCommand(RUC_BEFORERECORDING, fileName);
   isyslog("record %s", fileName);
   if (MakeDirs(fileName, true)) {
+#ifdef USE_ALTERNATECHANNEL
+     const cChannel *ch = Channel ? Channel : timer->Channel();
+     if (ch)
+        recorder = new cRecorder(fileName, ch, timer->Priority());
+     if (ch && device->AttachReceiver(recorder)) {
+#else
      const cChannel *ch = timer->Channel();
      recorder = new cRecorder(fileName, ch, timer->Priority());
      if (device->AttachReceiver(recorder)) {
+#endif /* ALTERNATECHANNEL */
         Recording.WriteInfo();
         cStatus::MsgRecording(device, Recording.Name(), Recording.FileName(), true);
         if (!Timer && !cReplayControl::LastReplayed()) // an instant recording, maybe from cRecordControls::PauseLiveVideo()
@@ -4234,7 +5088,12 @@
         return;
         }
      else
+#ifdef USE_ALTERNATECHANNEL
+        if (ch)
         DELETENULL(recorder);
+#else
+        DELETENULL(recorder);
+#endif /* ALTERNATECHANNEL */
      }
   else
      timer->SetDeferred(DEFERTIMER);
@@ -4335,6 +5194,17 @@
   if (channel) {
      int Priority = Timer ? Timer->Priority() : Pause ? Setup.PausePriority : Setup.DefaultPriority;
      cDevice *device = cDevice::GetDevice(channel, Priority, false);
+
+#ifdef USE_ALTERNATECHANNEL
+     if (!device && channel->AlternativeChannelID().Valid()) {// check for alternatives
+        dsyslog("prepare to use alternative channel for channel %d", channel->Number());
+        channel = Channels.GetByChannelID(channel->AlternativeChannelID());
+        device = cDevice::GetDevice(channel, Priority, false);
+        if (device)
+            dsyslog("use of alternative channel %d successfully initiated", channel->Number());
+        }
+#endif /* ALTERNATECHANNEL */
+
      if (device) {
         dsyslog("switching device %d to channel %d", device->DeviceNumber() + 1, channel->Number());
         if (!device->SwitchChannel(channel, false)) {
@@ -4344,7 +5214,14 @@
         if (!Timer || Timer->Matches()) {
            for (int i = 0; i < MAXRECORDCONTROLS; i++) {
                if (!RecordControls[i]) {
+#ifdef USE_ALTERNATECHANNEL
+                  RecordControls[i] = new cRecordControl(device, Timer, Pause, channel);
+#else
                   RecordControls[i] = new cRecordControl(device, Timer, Pause);
+#endif /* ALTERNATECHANNEL */
+#ifdef USE_PINPLUGIN
+                  cStatus::MsgRecordingFile(RecordControls[i]->FileName());
+#endif /* PINPLUGIN */
                   return RecordControls[i]->Process(time(NULL));
                   }
                }
@@ -4483,6 +5360,12 @@
 
 // --- cReplayControl --------------------------------------------------------
 
+#ifdef USE_VASARAJANAULOJA
+#define REPLAYCONTROLSKIPLIMIT   9    // s
+#define REPLAYCONTROLSKIPSECONDS 90   // s
+#define REPLAYCONTROLSKIPTIMEOUT 5000 // ms
+#endif /* VASARAJANAULOJA */
+
 cReplayControl *cReplayControl::currentReplayControl = NULL;
 cString cReplayControl::fileName;
 
@@ -4497,6 +5380,11 @@
   lastCurrent = lastTotal = -1;
   lastPlay = lastForward = false;
   lastSpeed = -2; // an invalid value
+#ifdef USE_VASARAJANAULOJA
+  lastSkipKey = kNone;
+  lastSkipSeconds = REPLAYCONTROLSKIPSECONDS;
+  lastSkipTimeout.Set(0);
+#endif /* VASARAJANAULOJA */
   timeoutShow = 0;
   timeSearchActive = false;
   cRecording Recording(fileName);
@@ -4772,8 +5660,15 @@
         marks.Add(Current);
         bool Play, Forward;
         int Speed;
+#ifdef USE_JUMPPLAY
+        if (Setup.PauseOnMarkSet || GetReplayMode(Play, Forward, Speed) && !Play) {
+#else
         if (Setup.PauseOnMarkSet || GetReplayMode(Play, Forward, Speed) && !Play)
+#endif /* JUMPPLAY */
            Goto(Current, true);
+#ifdef USE_JUMPPLAY
+           }
+#endif /* JUMPPLAY */
         }
      ShowTimed(2);
      marksModified = true;
@@ -4786,9 +5681,24 @@
   if (GetIndex(Current, Total)) {
      if (marks.Count()) {
         if (cMark *m = Forward ? marks.GetNext(Current) : marks.GetPrev(Current)) {
+#ifdef USE_JUMPPLAY
+           bool Play2, Forward2;
+           int Speed;
+           if (Setup.JumpPlay && GetReplayMode(Play2, Forward2, Speed) &&
+              Play2 && Forward && m->Position() < Total - SecondsToFrames(3, FramesPerSecond())) {
+              Goto(m->Position());
+              Play();
+              }
+           else {
+              Goto(m->Position(), true);
+              displayFrames = true;
+              return;
+              }
+#else
            Goto(m->Position(), true);
            displayFrames = true;
            return;
+#endif /* JUMPPLAY */
            }
         }
      // There are either no marks at all, or we already were at the first or last one,
@@ -4829,7 +5739,11 @@
            Skins.Message(mtError, tr("No editing marks defined!"));
         else if (!marks.GetNumSequences())
            Skins.Message(mtError, tr("No editing sequences defined!"));
+#ifdef USE_VASARAJANAULOJA
+        else if (!cCutter::Start(fileName, NULL, false))
+#else
         else if (!cCutter::Start(fileName))
+#endif /* VASARAJANAULOJA */
            Skins.Message(mtError, tr("Can't start editing process!"));
         else
            Skins.Message(mtInfo, tr("Editing process started"));
@@ -4848,7 +5762,11 @@
      if (!m)
         m = marks.GetNext(Current);
      if (m) {
+#ifdef USE_JUMPPLAY
+        if ((m->Index() & 0x01) != 0 && !Setup.PlayJump)
+#else
         if ((m->Index() & 0x01) != 0)
+#endif /* JUMPPLAY */
            m = marks.Next(m);
         if (m) {
            Goto(m->Position() - SecondsToFrames(3, FramesPerSecond()));
@@ -4906,6 +5824,24 @@
         Key = Play ? kPause : kPlay;
      }
   bool DoShowMode = true;
+#ifdef USE_VOLCTRL
+  if (Setup.LRVolumeControl &&
+       (!Setup.LRForwardRewind ||
+      (Setup.LRForwardRewind == 1 && !visible))) {
+    switch (int(Key)) {
+      // Left/Right volume control
+      case kLeft|k_Repeat:
+      case kLeft:
+      case kRight|k_Repeat:
+      case kRight:
+        cRemote::Put(NORMALKEY(Key) == kLeft ? kVolDn : kVolUp, true);
+        return osContinue;
+        break;
+      default:
+        break;
+    }
+  }
+#endif // USE_VOLCTRL
   switch (int(Key)) {
     // Positioning:
     case kPlay:
@@ -4923,10 +5859,53 @@
     case kFastFwd:
     case kRight:   Forward(); break;
     case kRed:     TimeSearch(); break;
+#ifdef USE_JUMPINGSECONDS
+    case kGreen|k_Repeat:
+                   SkipSeconds(-(Setup.JumpSecondsRepeat)); break;
+    case kGreen:   SkipSeconds(-(Setup.JumpSeconds)); break;
+    case k1|k_Repeat:
+    case k1:       SkipSeconds(-Setup.JumpSecondsSlow); break;
+    case k3|k_Repeat:
+    case k3:       SkipSeconds( Setup.JumpSecondsSlow); break;
+    case kYellow|k_Repeat:
+                   SkipSeconds(Setup.JumpSecondsRepeat); break;
+    case kYellow:  SkipSeconds(Setup.JumpSeconds); break;
+#else
     case kGreen|k_Repeat:
     case kGreen:   SkipSeconds(-60); break;
     case kYellow|k_Repeat:
     case kYellow:  SkipSeconds( 60); break;
+#endif /* JUMPINGSECONDS */
+#ifdef USE_VASARAJANAULOJA
+#ifndef USE_JUMPINGSECONDS
+    case k1|k_Repeat:
+    case k1:       SkipSeconds(-20); break;
+    case k3|k_Repeat:
+    case k3:       SkipSeconds( 20); break;
+#endif /* JUMPINGSECONDS */
+    case kPrev|k_Repeat:
+    case kPrev:    if (lastSkipTimeout.TimedOut()) {
+                      lastSkipSeconds = REPLAYCONTROLSKIPSECONDS;
+                      lastSkipKey = kPrev;
+                   }
+                   else if (RAWKEY(lastSkipKey) != kPrev && lastSkipSeconds > (2 * REPLAYCONTROLSKIPLIMIT)) {
+                      lastSkipSeconds /= 2;
+                      lastSkipKey = kNone;
+                   }
+                   lastSkipTimeout.Set(REPLAYCONTROLSKIPTIMEOUT);
+                   SkipSeconds(-lastSkipSeconds); break;
+    case kNext|k_Repeat:
+    case kNext:    if (lastSkipTimeout.TimedOut()) {
+                      lastSkipSeconds = REPLAYCONTROLSKIPSECONDS;
+                      lastSkipKey = kNext;
+                   }
+                   else if (RAWKEY(lastSkipKey) != kNext && lastSkipSeconds > (2 * REPLAYCONTROLSKIPLIMIT)) {
+                      lastSkipSeconds /= 2;
+                      lastSkipKey = kNone;
+                   }
+                   lastSkipTimeout.Set(REPLAYCONTROLSKIPTIMEOUT);
+                   SkipSeconds(lastSkipSeconds); break;
+#endif /* VASARAJANAULOJA */
     case kStop:
     case kBlue:    Hide();
                    Stop();
@@ -4936,12 +5915,16 @@
       switch (int(Key)) {
         // Editing:
         case kMarkToggle:      MarkToggle(); break;
+#ifndef USE_VASARAJANAULOJA
         case kPrev|k_Repeat:
         case kPrev:
+#endif /* VASARAJANAULOJA */
         case kMarkJumpBack|k_Repeat:
         case kMarkJumpBack:    MarkJump(false); break;
+#ifndef USE_VASARAJANAULOJA
         case kNext|k_Repeat:
         case kNext:
+#endif /* VASARAJANAULOJA */
         case kMarkJumpForward|k_Repeat:
         case kMarkJumpForward: MarkJump(true); break;
         case kMarkMoveBack|k_Repeat:
--- vdr-1.7.38.orig/menu.h	2013-02-18 11:36:24.547286925 +0100
+++ vdr-1.7.38/menu.h	2013-02-18 11:37:34.831403334 +0100
@@ -18,6 +18,9 @@
 #include "menuitems.h"
 #include "recorder.h"
 #include "skins.h"
+#ifdef USE_SETUP
+#include "submenu.h"
+#endif /* SETUP */
 
 class cMenuText : public cOsdMenu {
 private:
@@ -51,6 +54,9 @@
   cMenuFolder(const char *Title, cNestedItemList *NestedItemList, const char *Path = NULL);
   cString GetFolder(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuText"; }
+#endif /* GRAPHTFT */
   };
 
 class cMenuCommands : public cOsdMenu {
@@ -85,6 +91,9 @@
   cMenuEditTimer(cTimer *Timer, bool New = false);
   virtual ~cMenuEditTimer();
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuTimerEdit"; }
+#endif /* GRAPHTFT */
   };
 
 class cMenuEvent : public cOsdMenu {
@@ -94,22 +103,40 @@
   cMenuEvent(const cEvent *Event, bool CanSwitch = false, bool Buttons = false);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuEvent"; }
+#endif /* GRAPHTFT */
   };
 
 class cMenuMain : public cOsdMenu {
 private:
+#ifdef USE_SETUP
+  int    nrDynamicMenuEntries;
+#endif /* SETUP */
   bool replaying;
   cOsdItem *stopReplayItem;
   cOsdItem *cancelEditingItem;
+#ifdef USE_VASARAJANAULOJA
+  cOsdItem *cancelFileTransferItem;
+#endif /* VASARAJANAULOJA */
   cOsdItem *stopRecordingItem;
   int recordControlsState;
   static cOsdObject *pluginOsdObject;
+#ifdef USE_SETUP
+  void Set(int current=0);
+  bool Update(bool Force = false);
+  cSubMenu subMenu;
+#else
   void Set(void);
   bool Update(bool Force = false);
+#endif /* SETUP */
 public:
   cMenuMain(eOSState State = osUnknown);
   virtual eOSState ProcessKey(eKeys Key);
   static cOsdObject *PluginOsdObject(void);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuMain"; }
+#endif /* GRAPHTFT */
   };
 
 class cDisplayChannel : public cOsdObject {
@@ -206,6 +233,9 @@
   eOSState Info(void);
   eOSState Sort(void);
   eOSState Commands(eKeys Key = kNone);
+#ifdef USE_VASARAJANAULOJA
+  eOSState Edit(void);
+#endif /* VASARAJANAULOJA */
 protected:
   cString DirectoryName(void);
 public:
@@ -224,7 +254,11 @@
   char *fileName;
   bool GetEvent(void);
 public:
+#ifdef USE_ALTERNATECHANNEL
+  cRecordControl(cDevice *Device, cTimer *Timer = NULL, bool Pause = false, cChannel *Channel = NULL);
+#else
   cRecordControl(cDevice *Device, cTimer *Timer = NULL, bool Pause = false);
+#endif /* ALTERNATECHANNEL */
   virtual ~cRecordControl();
   bool Process(time_t t);
   cDevice *Device(void) { return device; }
@@ -264,6 +298,11 @@
   int lastCurrent, lastTotal;
   bool lastPlay, lastForward;
   int lastSpeed;
+#ifdef USE_VASARAJANAULOJA
+  int lastSkipSeconds;
+  eKeys lastSkipKey;
+  cTimeMs lastSkipTimeout;
+#endif /* VASARAJANAULOJA */
   time_t timeoutShow;
   bool timeSearchActive, timeSearchHide;
   int timeSearchTime, timeSearchPos;
--- vdr-1.7.38.orig/menuitems.h	2013-02-18 11:36:24.555286824 +0100
+++ vdr-1.7.38/menuitems.h	2013-02-18 11:37:34.831403334 +0100
@@ -209,6 +209,9 @@
   cMenuSetupPage(void);
   virtual eOSState ProcessKey(eKeys Key);
   void SetPlugin(cPlugin *Plugin);
+#ifdef USE_GRAPHTFT
+  const char* MenuKind() { return "MenuSetupPage"; }
+#endif /* GRAPHTFT */
   };
 
 #endif //__MENUITEMS_H
--- vdr-1.7.38.orig/menuorgpatch.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/menuorgpatch.h	2013-02-18 11:37:34.832403321 +0100
@@ -0,0 +1,102 @@
+#ifdef USE_MENUORG
+/*
+ * vdr-menuorg - A plugin for the Linux Video Disk Recorder
+ * Copyright (c) 2007 - 2008 Tobias Grimm <vdr@e-tobi.net>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ * $Id$
+ *
+ */
+
+#ifndef __MENUORGPATCH_H
+#define __MENUORGPATCH_H
+
+#include "mainmenuitemsprovider.h"
+
+class MenuOrgPatch
+{
+    private:
+        static IMainMenuItemsProvider* _mainMenuItemsProvider;
+
+    private:
+        static IMainMenuItemsProvider* MainMenuItemsProvider()
+        {
+            if (!_mainMenuItemsProvider)
+            {
+                IMainMenuItemsProvider* mainMenuItemsProvider;
+
+                if (cPluginManager::CallFirstService(MENU_ITEMS_PROVIDER_SERVICE_ID, &mainMenuItemsProvider))
+                {
+                    _mainMenuItemsProvider = mainMenuItemsProvider;
+                }
+            }
+            return _mainMenuItemsProvider;
+        }
+
+    public:
+        static bool IsCustomMenuAvailable()
+        {
+            return (MainMenuItemsProvider() != NULL) && (MainMenuItemsProvider()->IsCustomMenuAvailable());
+        }
+
+        static void EnterRootMenu()
+        {
+            if (MainMenuItemsProvider())
+            {
+                MainMenuItemsProvider()->EnterRootMenu();
+            }
+        }
+
+        static bool LeaveSubMenu()
+        {
+            if (MainMenuItemsProvider())
+            {
+                return MainMenuItemsProvider()->LeaveSubMenu();
+            }
+            return false;
+        }
+
+        static void EnterSubMenu(cOsdItem* item)
+        {
+            if (MainMenuItemsProvider())
+            {
+                MainMenuItemsProvider()->EnterSubMenu(item);
+            }
+        }
+
+        static MenuItemDefinitions* MainMenuItems()
+        {
+            if (MainMenuItemsProvider())
+            {
+                return MainMenuItemsProvider()->MainMenuItems();
+            }
+            return NULL;
+        }
+
+        static cOsdMenu* Execute(cOsdItem* item)
+        {
+            if (MainMenuItemsProvider())
+            {
+                return MainMenuItemsProvider()->Execute(item);
+            }
+            return NULL;
+        }
+};
+
+IMainMenuItemsProvider* MenuOrgPatch::_mainMenuItemsProvider = NULL;
+
+#endif //__MENUORGPATCH_H
+#endif /* MENUORG */
--- vdr-1.7.38.orig/osdbase.c	2013-02-18 11:36:24.554286837 +0100
+++ vdr-1.7.38/osdbase.c	2013-02-18 11:37:34.833403309 +0100
@@ -23,6 +23,9 @@
   state = State;
   selectable = true;
   fresh = true;
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+  subMenu = 0;
+#endif /* SETUP & PINPLUGIN */
 }
 
 cOsdItem::cOsdItem(const char *Text, eOSState State, bool Selectable)
@@ -32,8 +35,23 @@
   selectable = Selectable;
   fresh = true;
   SetText(Text);
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+  subMenu = 0;
+#endif /* SETUP & PINPLUGIN */
 }
 
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+cOsdItem::cOsdItem(const char *Text, eOSState State, cSubMenuNode* SubMenu)
+{
+  text = NULL;
+  state = State;
+  selectable = true;
+  fresh = true;
+  SetText(Text);
+  subMenu = SubMenu;
+}
+#endif /* SETUP & PINPLUGIN */
+
 cOsdItem::~cOsdItem()
 {
   free(text);
@@ -82,6 +100,9 @@
 {
   isMenu = true;
   digit = 0;
+#ifdef USE_VASARAJANAULOJA
+  key_nr = -1;
+#endif /* VASARAJANAULOJA */
   hasHotkeys = false;
   displayMenuItems = 0;
   title = NULL;
@@ -105,6 +126,9 @@
   free(status);
   displayMenu->Clear();
   cStatus::MsgOsdClear();
+#ifdef USE_GRAPHTFT
+  cStatus::MsgOsdMenuDestroy();
+#endif /* GRAPHTFT */
   if (!--displayMenuCount)
      DELETENULL(displayMenu);
 }
@@ -131,7 +155,11 @@
         digit = -1; // prevents automatic hotkeys - input already has them
      if (digit >= 0) {
         digit++;
+#ifdef USE_VASARAJANAULOJA
+        buffer = cString::sprintf(" %2d%s %s", digit, (digit > 9) ? "" : " ", s);
+#else
         buffer = cString::sprintf(" %c %s", (digit < 10) ? '0' + digit : ' ' , s);
+#endif /* VASARAJANAULOJA */
         s = buffer;
         }
      }
@@ -222,6 +250,9 @@
   displayMenu->SetMessage(mtStatus, NULL);
   displayMenu->Clear();
   cStatus::MsgOsdClear();
+#ifdef USE_GRAPHTFT
+  cStatus::MsgOsdMenuDisplay(MenuKind());
+#endif /* GRAPHTFT */
   if (menuCategory != displayMenu->MenuCategory())
      displayMenu->SetMenuCategory(menuCategory);
   displayMenuItems = displayMenu->MaxItems();
@@ -477,20 +508,77 @@
      }
 }
 
+#ifdef USE_VASARAJANAULOJA
+#define MENUKEY_TIMEOUT 1500
+#endif /* VASARAJANAULOJA */
+
 eOSState cOsdMenu::HotKey(eKeys Key)
 {
+#ifdef USE_VASARAJANAULOJA
+  bool match = false;
+  bool highlight = false;
+  int  item_nr;
+  int  i;
+
+  if (Key == kNone) {
+     if (lastActivity.TimedOut())
+        Key = kOk;
+     else
+        return osContinue;
+     }
+  else
+     lastActivity.Set(MENUKEY_TIMEOUT);
+  for (cOsdItem *item = Last(); item; item = Prev(item)) {
+#else
   for (cOsdItem *item = First(); item; item = Next(item)) {
+#endif /* VASARAJANAULOJA */
       const char *s = item->Text();
+#ifdef USE_VASARAJANAULOJA
+      i = 0;
+      item_nr = 0;
+      if (s && (s = skipspace(s)) != '\0' && '0' <= s[i] && s[i] <= '9') {
+         do {
+            item_nr = item_nr * 10 + (s[i] - '0');
+            }
+         while ( !((s[++i] == '\t')||(s[i] == ' ')) && (s[i] != '\0') && ('0' <= s[i]) && (s[i] <= '9'));
+         if ((Key == kOk) && (item_nr == key_nr)) {
+#else
       if (s && (s = skipspace(s)) != NULL) {
          if (*s == Key - k1 + '1') {
+#endif /* VASARAJANAULOJA */
             current = item->Index();
             RefreshCurrent();
             Display();
             cRemote::Put(kOk, true);
+#ifdef USE_VASARAJANAULOJA
+            key_nr = -1;
+#endif /* VASARAJANAULOJA */
             break;
             }
+#ifdef USE_VASARAJANAULOJA
+         else if (Key != kOk) {
+            if (!highlight && (item_nr == (Key - k0))) {
+               highlight = true;
+               current = item->Index();
+               }
+            if (!match && (key_nr == -1) && ((item_nr / 10) == (Key - k0))) {
+               match = true;
+               key_nr = (Key - k0);
+               }
+            else if (((key_nr == -1) && (item_nr == (Key - k0))) || (!match && (key_nr >= 0) && (item_nr == (10 * key_nr + Key - k0)))) {
+               current = item->Index();
+               cRemote::Put(kOk, true);
+               key_nr = -1;
+               break;
+               }
+            }
+#endif /* VASARAJANAULOJA */
          }
       }
+#ifdef USE_VASARAJANAULOJA
+  if ((!match) && (Key != kNone))
+     key_nr = -1;
+#endif /* VASARAJANAULOJA */
   return osContinue;
 }
 
@@ -529,8 +617,13 @@
         }
      }
   switch (int(Key)) {
+#ifdef USE_VASARAJANAULOJA
+    case kNone:
+    case k0...k9: return hasHotkeys ? HotKey(Key) : osUnknown;
+#else
     case k0:      return osUnknown;
     case k1...k9: return hasHotkeys ? HotKey(Key) : osUnknown;
+#endif /* VASARAJANAULOJA */
     case kUp|k_Repeat:
     case kUp:   CursorUp();   break;
     case kDown|k_Repeat:
--- vdr-1.7.38.orig/osdbase.h	2013-02-18 11:36:24.554286837 +0100
+++ vdr-1.7.38/osdbase.h	2013-02-18 11:37:34.834403296 +0100
@@ -15,6 +15,10 @@
 #include "skins.h"
 #include "tools.h"
 
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+#include "submenu.h"
+#endif /* SETUP & PINPLUGIN */
+
 enum eOSState { osUnknown,
                 osContinue,
                 osSchedule,
@@ -30,6 +34,9 @@
                 osStopRecord,
                 osStopReplay,
                 osCancelEdit,
+#ifdef USE_VASARAJANAULOJA
+                osCancelTransfer,
+#endif /* VASARAJANAULOJA */
                 osSwitchDvb,
                 osBack,
                 osEnd,
@@ -51,16 +58,26 @@
   char *text;
   eOSState state;
   bool selectable;
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+  cSubMenuNode* subMenu;
+#endif /* SETUP & PINPLUGIN */
 protected:
   bool fresh;
 public:
   cOsdItem(eOSState State = osUnknown);
   cOsdItem(const char *Text, eOSState State = osUnknown, bool Selectable = true);
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+  cOsdItem(const char *Text, eOSState State, cSubMenuNode* SubMenu);
+#endif /* SETUP & PINPLUGIN */
   virtual ~cOsdItem();
   bool Selectable(void) const { return selectable; }
   void SetText(const char *Text, bool Copy = true);
   void SetSelectable(bool Selectable);
   void SetFresh(bool Fresh);
+#if defined (USE_SETUP) && defined (USE_PINPLUGIN)
+  void SetSubMenu(cSubMenuNode* SubMenu) { subMenu = SubMenu; }
+  cSubMenuNode* SubMenu() { return subMenu; }
+#endif /* SETUP & PINPLUGIN */
   const char *Text(void) const { return text; }
   virtual void Set(void) {}
   virtual void SetMenuItem(cSkinDisplayMenu *DisplayMenu, int Index, bool Current, bool Selectable);
@@ -99,6 +116,10 @@
   int digit;
   bool hasHotkeys;
   void DisplayHelp(bool Force = false);
+#ifdef USE_VASARAJANAULOJA
+  int key_nr;
+  cTimeMs lastActivity;
+#endif /* VASARAJANAULOJA */
 protected:
   void SetDisplayMenu(void);
   cSkinDisplayMenu *DisplayMenu(void) { return displayMenu; }
@@ -136,6 +157,9 @@
   void Ins(cOsdItem *Item, bool Current = false, cOsdItem *Before = NULL);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+#ifdef USE_GRAPHTFT
+  virtual const char* MenuKind() { return "MenuUnknown"; }
+#endif /* GRAPHTFT */
   };
 
 #endif //__OSDBASE_H
--- vdr-1.7.38.orig/osd.c	2013-02-18 11:36:24.553286849 +0100
+++ vdr-1.7.38/osd.c	2013-02-18 11:37:34.837403258 +0100
@@ -1623,6 +1623,10 @@
 int cOsd::osdHeight = 0;
 cVector<cOsd *> cOsd::Osds;
 cMutex cOsd::mutex;
+#ifdef USE_PINPLUGIN
+bool cOsd::pinValid = false;
+#endif /* PINPLUGIN */
+
 
 cOsd::cOsd(int Left, int Top, uint Level)
 {
@@ -1636,6 +1640,9 @@
   width = height = 0;
   level = Level;
   active = false;
+#ifdef USE_YAEPG
+  vidWin.bpp = 0;
+#endif /* YAEPG */
   for (int i = 0; i < Osds.Size(); i++) {
       if (Osds[i]->level > level) {
          Osds.Insert(this, i);
--- vdr-1.7.38.orig/osd.h	2013-02-18 11:36:24.602286233 +0100
+++ vdr-1.7.38/osd.h	2013-02-18 11:37:34.841403208 +0100
@@ -728,6 +728,10 @@
   int left, top, width, height;
   uint level;
   bool active;
+#ifdef USE_YAEPG
+public:
+  tArea vidWin;
+#endif /* YAEPG */
 protected:
   cOsd(int Left, int Top, uint Level);
        ///< Initializes the OSD with the given coordinates.
@@ -926,6 +930,9 @@
        ///<        MyOsdDrawPixmap(Left() + pm->ViewPort().X(), Top() + pm->ViewPort().Y(), pm->Data(), w, h, h * d);
        ///<        delete pm;
        ///<        }
+#ifdef USE_PINPLUGIN
+  static bool pinValid;
+#endif /* PINPLUGIN */
   };
 
 #define MAXOSDIMAGES 64
--- vdr-1.7.38.orig/pat.c	2013-02-18 11:36:24.590286384 +0100
+++ vdr-1.7.38/pat.c	2013-02-18 11:37:34.843403183 +0100
@@ -13,6 +13,9 @@
 #include "libsi/section.h"
 #include "libsi/descriptor.h"
 #include "thread.h"
+#ifdef USE_TTXTSUBS
+#include "vdrttxtsubshooks.h"
+#endif  // USE_TTXTSUBS
 
 #define PMT_SCAN_TIMEOUT  10 // seconds
 
@@ -343,6 +346,10 @@
         char DLangs[MAXDPIDS][MAXLANGCODE2] = { "" };
         char SLangs[MAXSPIDS][MAXLANGCODE2] = { "" };
         int Tpid = 0;
+#ifdef USE_TTXTSUBS
+        tTeletextSubtitlePage TeletextSubtitlePages[MAXTXTPAGES];
+        int NumTPages = 0;
+#endif // USE_TTXTSUBS
         int NumApids = 0;
         int NumDpids = 0;
         int NumSpids = 0;
@@ -436,6 +443,22 @@
                                  break;
                             case SI::TeletextDescriptorTag:
                                  Tpid = esPid;
+#ifdef USE_TTXTSUBS
+                                 {
+                                 SI::TeletextDescriptor *sd = (SI::TeletextDescriptor *)d;
+                                 SI::TeletextDescriptor::Teletext ttxt;
+                                 for (SI::Loop::Iterator it; sd->teletextLoop.getNext(ttxt, it); ) {
+                                     bool isSubtitlePage = (ttxt.getTeletextType() == 0x02) || (ttxt.getTeletextType() == 0x05);
+                                     if ((NumTPages < MAXTXTPAGES) && ttxt.languageCode[0] && isSubtitlePage) {
+                                        strn0cpy(TeletextSubtitlePages[NumTPages].ttxtLanguage, I18nNormalizeLanguageCode(ttxt.languageCode), MAXLANGCODE1);
+                                        TeletextSubtitlePages[NumTPages].ttxtPage = ttxt.getTeletextPageNumber();
+                                        TeletextSubtitlePages[NumTPages].ttxtMagazine = ttxt.getTeletextMagazineNumber();
+                                        TeletextSubtitlePages[NumTPages].ttxtType = ttxt.getTeletextType();
+                                        NumTPages++;
+                                        }
+                                     }
+                                 }
+#endif // USE_TTXTSUBS
                                  break;
                             case SI::ISO639LanguageDescriptorTag: {
                                  SI::ISO639LanguageDescriptor *ld = (SI::ISO639LanguageDescriptor *)d;
@@ -547,6 +570,14 @@
             }
         if (Setup.UpdateChannels >= 2) {
            Channel->SetPids(Vpid, Ppid, Vtype, Apids, Atypes, ALangs, Dpids, Dtypes, DLangs, Spids, SLangs, Tpid);
+#ifdef USE_TTXTSUBS
+           if (NumTPages < MAXTXTPAGES) {
+              int manualPageNumber = cVDRTtxtsubsHookListener::Hook()->ManualPageNumber(Channel);
+              if (manualPageNumber)
+                 TeletextSubtitlePages[NumTPages++] = tTeletextSubtitlePage(manualPageNumber);
+              }
+           Channel->SetTeletextSubtitlePages(TeletextSubtitlePages, NumTPages);
+#endif // USE_TTXTSUBS
            Channel->SetCaIds(CaDescriptors->CaIds());
            Channel->SetSubtitlingDescriptors(SubtitlingTypes, CompositionPageIds, AncillaryPageIds);
            }
--- vdr-1.7.38.orig/plugin.c	2013-02-18 11:36:24.588286409 +0100
+++ vdr-1.7.38/plugin.c	2013-02-18 11:37:34.844403170 +0100
@@ -341,6 +341,14 @@
   char *p = strchr(s, ' ');
   if (p)
      *p = 0;
+#ifdef USE_PLUGINMISSING
+  struct stat st;
+  if (stat (cString::sprintf("%s/%s%s%s%s", directory, LIBVDR_PREFIX, s, SO_INDICATOR, APIVERSION), &st) && errno == ENOENT) {
+     esyslog("WARN: missing plugin '%s'", s);
+     fprintf(stderr, "vdr: missing plugin '%s'\n", s);
+     }
+  else
+#endif /* PLUGINMISSING */
   dlls.Add(new cDll(cString::sprintf("%s/%s%s%s%s", directory, LIBVDR_PREFIX, s, SO_INDICATOR, APIVERSION), Args));
   free(s);
 }
@@ -349,7 +357,11 @@
 {
   for (cDll *dll = dlls.First(); dll; dll = dlls.Next(dll)) {
       if (!dll->Load(Log))
+#ifdef USE_PLUGINMISSING
+         ;
+#else
          return false;
+#endif /* PLUGINMISSING */
       }
   return true;
 }
--- vdr-1.7.38.orig/receiver.c	2013-02-18 11:36:24.548286912 +0100
+++ vdr-1.7.38/receiver.c	2013-02-18 11:37:34.906402391 +0100
@@ -67,7 +67,12 @@
             (Channel->Ppid() == Channel->Vpid() || AddPid(Channel->Ppid())) &&
             AddPids(Channel->Apids()) &&
             AddPids(Channel->Dpids()) &&
+#ifdef USE_TTXTSUBS
+            AddPids(Channel->Spids()) &&
+            (!Setup.SupportTeletext || AddPid(Channel->Tpid()));
+#else
             AddPids(Channel->Spids());
+#endif // USE_TTXTSUBS
      }
   return true;
 }
--- vdr-1.7.38.orig/recorder.c	2013-02-18 11:36:24.547286925 +0100
+++ vdr-1.7.38/recorder.c	2013-02-18 11:37:34.908402366 +0100
@@ -46,6 +46,16 @@
      Type = 0x06;
      }
   frameDetector = new cFrameDetector(Pid, Type);
+#ifdef USE_NALUDUMP
+  if (   Type == 0x1B // MPEG4 video
+      && (Setup.DumpNaluFill ? (strstr(FileName, "NALUKEEP") == NULL) : (strstr(FileName, "NALUDUMP") != NULL))) { // MPEG4
+     isyslog("Starting NALU fill dumper");
+     naluStreamProcessor = new cNaluStreamProcessor();
+     naluStreamProcessor->SetPid(Pid);
+     }
+  else
+     naluStreamProcessor = NULL;
+#endif // USE_NALUDUMP
   index = NULL;
   fileSize = 0;
   lastDiskSpaceCheck = time(NULL);
@@ -67,6 +77,14 @@
 cRecorder::~cRecorder()
 {
   Detach();
+#ifdef USE_NALUDUMP
+  if (naluStreamProcessor) {
+     long long int TotalPackets = naluStreamProcessor->GetTotalPackets();
+     long long int DroppedPackets = naluStreamProcessor->GetDroppedPackets();
+     isyslog("NALU fill dumper: %lld of %lld packets dropped, %lli%%", DroppedPackets, TotalPackets, TotalPackets ? DroppedPackets*100/TotalPackets : 0);
+     delete naluStreamProcessor;
+     }
+#endif // USE_NALUDUMP
   delete index;
   delete fileName;
   delete frameDetector;
@@ -155,11 +173,39 @@
                              fileSize += TS_SIZE;
                              }
                        }
+#ifndef USE_NALUDUMP
                     if (recordFile->Write(b, Count) < 0) {
                        LOG_ERROR_STR(fileName->Name());
                        break;
                        }
                     fileSize += Count;
+#else
+                    if (naluStreamProcessor) {
+                       naluStreamProcessor->PutBuffer(b, Count);
+                       bool Fail = false;
+                       while (true) {
+                             int OutLength = 0;
+                             uchar *OutData = naluStreamProcessor->GetBuffer(OutLength);
+                             if (!OutData || OutLength <= 0)
+                                break;
+                             if (recordFile->Write(OutData, OutLength) < 0) {
+                                LOG_ERROR_STR(fileName->Name());
+                                Fail = true;
+                                break;
+                                }
+                             fileSize += OutLength;
+                             }
+                       if (Fail)
+                          break;
+                       }
+                    else {
+                    if (recordFile->Write(b, Count) < 0) {
+                          LOG_ERROR_STR(fileName->Name());
+                          break;
+                       }
+                       fileSize += Count;
+                    }
+#endif // USE_NALUDUMP
                     t = time(NULL);
                     }
                  }
--- vdr-1.7.38.orig/recorder.h	2013-02-18 11:36:24.543286975 +0100
+++ vdr-1.7.38/recorder.h	2013-02-18 11:37:34.909402353 +0100
@@ -21,6 +21,9 @@
   cRingBufferLinear *ringBuffer;
   cFrameDetector *frameDetector;
   cPatPmtGenerator patPmtGenerator;
+#ifdef USE_NALUDUMP
+  cNaluStreamProcessor *naluStreamProcessor;
+#endif // USE_NALUDUMP
   cFileName *fileName;
   cIndexFile *index;
   cUnbufferedFile *recordFile;
--- vdr-1.7.38.orig/recording.c	2013-02-18 11:36:24.591286372 +0100
+++ vdr-1.7.38/recording.c	2013-02-18 11:37:34.911402328 +0100
@@ -8,6 +8,9 @@
  */
 
 #include "recording.h"
+#ifdef USE_WAREAGLEICON
+#include "iconpatch.h"
+#endif /* WAREAGLEICON */
 #include <ctype.h>
 #include <dirent.h>
 #include <errno.h>
@@ -987,7 +990,11 @@
 
 const char *cRecording::Title(char Delimiter, bool NewIndicator, int Level) const
 {
+#ifdef USE_WAREAGLEICON
+  const char *New = NewIndicator && IsNew() ? Setup.WarEagleIcons ? IsLangUtf8() ? ICON_NEW_UTF8 : ICON_NEW : "*" : " ";
+#else
   char New = NewIndicator && IsNew() ? '*' : ' ';
+#endif /* WAREAGLEICON */
   free(titleBuffer);
   titleBuffer = NULL;
   if (Level < 0 || Level == HierarchyLevels()) {
@@ -1007,7 +1014,11 @@
                    Minutes % 60
                    );
         }
+#ifdef USE_WAREAGLEICON
+     titleBuffer = strdup(cString::sprintf("%02d.%02d.%02d%c%02d:%02d%s%s%c%s",
+#else
      titleBuffer = strdup(cString::sprintf("%02d.%02d.%02d%c%02d:%02d%s%c%c%s",
+#endif /* WAREAGLEICON */
                             t->tm_mday,
                             t->tm_mon + 1,
                             t->tm_year % 100,
@@ -1057,6 +1068,18 @@
   return NULL;
 }
 
+#ifdef USE_VASARAJANAULOJA
+const char *cRecording::UpdateFileName(const char *FileName)
+{
+    if (FileName && *FileName) {
+        free(fileName);
+        fileName = strdup(FileName);
+        return fileName;
+    }
+    return NULL;
+}
+#endif /* VASARAJANAULOJA */
+
 int cRecording::HierarchyLevels(void) const
 {
   const char *s = name;
@@ -1349,7 +1372,11 @@
      }
 }
 
+#ifdef USE_VASARAJANAULOJA
+void cRecordings::DelByName(const char *FileName, bool RemoveRecording)
+#else
 void cRecordings::DelByName(const char *FileName)
+#endif /* VASARAJANAULOJA */
 {
   LOCK_THREAD;
   cRecording *recording = GetByName(FileName);
@@ -1357,7 +1384,11 @@
      cThreadLock DeletedRecordingsLock(&DeletedRecordings);
      Del(recording, false);
      char *ext = strrchr(recording->fileName, '.');
+#ifdef USE_VASARAJANAULOJA
+     if (ext && RemoveRecording) {
+#else
      if (ext) {
+#endif /* VASARAJANAULOJA */
         strncpy(ext, DELEXT, strlen(ext));
         if (access(recording->FileName(), F_OK) == 0) {
            recording->deleted = time(NULL);
--- vdr-1.7.38.orig/recording.h	2013-02-18 11:36:24.552286862 +0100
+++ vdr-1.7.38/recording.h	2013-02-18 11:37:34.913402303 +0100
@@ -68,6 +68,9 @@
   const cEvent *GetEvent(void) const { return event; }
   const char *Title(void) const { return event->Title(); }
   const char *ShortText(void) const { return event->ShortText(); }
+#ifdef USE_GRAPHTFT
+  tEventID EventID(void) const { return event->EventID(); }
+#endif /* GRAPHTFT */
   const char *Description(void) const { return event->Description(); }
   const cComponents *Components(void) const { return event->Components(); }
   const char *Aux(void) const { return aux; }
@@ -118,6 +121,9 @@
   const char *Title(char Delimiter = ' ', bool NewIndicator = false, int Level = -1) const;
   const cRecordingInfo *Info(void) const { return info; }
   const char *PrefixFileName(char Prefix);
+#ifdef USE_VASARAJANAULOJA
+  const char *UpdateFileName(const char *FileName);
+#endif /* VASARAJANAULOJA */
   int HierarchyLevels(void) const;
   void ResetResume(void) const;
   double FramesPerSecond(void) const { return framesPerSecond; }
@@ -129,7 +135,11 @@
   int FileSizeMB(void) const;
        ///< Returns the total file size of this recording (in MB), or -1 if the file
        ///< size is unknown.
+#ifdef USE_VASARAJANAULOJA
+  bool IsNew(void) const { return GetResume() < 0; }
+#else
   bool IsNew(void) const { return GetResume() <= 0; }
+#endif /* VASARAJANAULOJA */
   bool IsEdited(void) const;
   bool IsPesRecording(void) const { return isPesRecording; }
   bool IsOnVideoDirectoryFileSystem(void) const;
@@ -189,7 +199,11 @@
   void ResetResume(const char *ResumeFileName = NULL);
   cRecording *GetByName(const char *FileName);
   void AddByName(const char *FileName, bool TriggerUpdate = true);
+#ifdef USE_VASARAJANAULOJA
+  void DelByName(const char *FileName, bool RemoveRecording = true);
+#else
   void DelByName(const char *FileName);
+#endif /* VASARAJANAULOJA */
   void UpdateByName(const char *FileName);
   int TotalFileSizeMB(void);
   double MBperMinute(void);
--- vdr-1.7.38.orig/remux.c	2013-02-18 11:36:24.589286397 +0100
+++ vdr-1.7.38/remux.c	2013-02-18 11:37:34.917402253 +0100
@@ -194,6 +194,44 @@
         }
 }
 
+#ifdef USE_NALUDUMP
+void TsExtendAdaptionField(unsigned char *Packet, int ToLength)
+{
+    // Hint: ExtenAdaptionField(p, TsPayloadOffset(p) - 4) is a null operation
+
+    int Offset = TsPayloadOffset(Packet); // First byte after existing adaption field
+
+    if (ToLength <= 0)
+    {
+        // Remove adaption field
+        Packet[3] = Packet[3] & ~TS_ADAPT_FIELD_EXISTS;
+        return;
+    }
+
+    // Set adaption field present
+    Packet[3] = Packet[3] | TS_ADAPT_FIELD_EXISTS;
+
+    // Set new length of adaption field:
+    Packet[4] = ToLength <= TS_SIZE-4 ? ToLength-1 : TS_SIZE-4-1;
+
+    if (Packet[4] == TS_SIZE-4-1)
+    {
+        // No more payload, remove payload flag
+        Packet[3] = Packet[3] & ~TS_PAYLOAD_EXISTS;
+    }
+
+    int NewPayload = TsPayloadOffset(Packet); // First byte after new adaption field
+
+    // Fill new adaption field
+    if (Offset == 4 && Offset < NewPayload)
+        Offset++; // skip adaptation_field_length
+    if (Offset == 5 && Offset < NewPayload)
+        Packet[Offset++] = 0; // various flags set to 0
+    while (Offset < NewPayload)
+        Packet[Offset++] = 0xff; // stuffing byte
+}
+#endif // USE_NALUDUMP
+
 // --- Some PES handling tools -----------------------------------------------
 
 void PesSetPts(uchar *p, int64_t Pts)
@@ -385,6 +423,31 @@
   return i;
 }
 
+#ifdef USE_TTXTSUBS
+int cPatPmtGenerator::MakeTeletextDescriptor(uchar *Target, const tTeletextSubtitlePage *pages, int pageCount)
+{
+  int i = 0, j = 0;
+  Target[i++] = SI::TeletextDescriptorTag;
+  int l = i;
+  Target[i++] = 0x00; // length
+  for (int n = 0; n < pageCount; n++) {
+      const char* Language = pages[n].ttxtLanguage;
+      Target[i++] = *Language++;
+      Target[i++] = *Language++;
+      Target[i++] = *Language++;
+      Target[i++] = (pages[n].ttxtType << 3) + pages[n].ttxtMagazine;
+      Target[i++] = pages[n].ttxtPage;
+      j++;
+      }
+  if (j > 0) {
+     Target[l] = j * 5; // update length
+     IncEsInfoLength(i);
+     return i;
+     }
+  return 0;
+}
+#endif // USE_TTXTSUBS
+
 int cPatPmtGenerator::MakeLanguageDescriptor(uchar *Target, const char *Language)
 {
   int i = 0;
@@ -472,6 +535,9 @@
   if (Channel) {
      int Vpid = Channel->Vpid();
      int Ppid = Channel->Ppid();
+#ifdef USE_TTXTSUBS
+     int Tpid = Channel->Tpid();
+#endif // USE_TTXTSUBS
      uchar *p = buf;
      int i = 0;
      p[i++] = 0x02; // table id
@@ -504,6 +570,12 @@
          i += MakeStream(buf + i, 0x06, Channel->Spid(n));
          i += MakeSubtitlingDescriptor(buf + i, Channel->Slang(n), Channel->SubtitlingType(n), Channel->CompositionPageId(n), Channel->AncillaryPageId(n));
          }
+#ifdef USE_TTXTSUBS
+     if (Tpid) {
+        i += MakeStream(buf + i, 0x06, Tpid);
+        i += MakeTeletextDescriptor(buf + i, Channel->TeletextSubtitlePages(), Channel->TotalTeletextSubtitlePages());
+        }
+#endif // USE_TTXTSUBS
 
      int sl = i - SectionLength - 2 + 4; // -2 = SectionLength storage, +4 = length of CRC
      buf[SectionLength] |= (sl >> 8) & 0x0F;
@@ -577,6 +649,9 @@
   pmtPids[0] = 0;
   vpid = vtype = 0;
   ppid = 0;
+#ifdef USE_TTXTSUBS
+  tpid = 0;
+#endif // USE_TTXTSUBS
 }
 
 void cPatPmtParser::ParsePat(const uchar *Data, int Length)
@@ -665,11 +740,17 @@
      int NumSpids = 0;
      vpid = vtype = 0;
      ppid = 0;
+#ifdef USE_TTXTSUBS
+     tpid = 0;
+#endif // USE_TTXTSUBS
      apids[0] = 0;
      dpids[0] = 0;
      spids[0] = 0;
      atypes[0] = 0;
      dtypes[0] = 0;
+#ifdef USE_TTXTSUBS
+     totalTtxtSubtitlePages = 0;
+#endif // USE_TTXTSUBS
      SI::PMT::Stream stream;
      for (SI::Loop::Iterator it; Pmt.streamLoop.getNext(stream, it); ) {
          dbgpatpmt("     stream type = %02X, pid = %d", stream.getStreamType(), stream.getPid());
@@ -768,6 +849,30 @@
                                     spids[NumSpids]= 0;
                                     }
                                  break;
+#ifdef USE_TTXTSUBS
+                            case SI::TeletextDescriptorTag: {
+                                 dbgpatpmt(" teletext");
+                                 tpid = stream.getPid();
+                                 SI::TeletextDescriptor *sd = (SI::TeletextDescriptor *)d;
+                                 SI::TeletextDescriptor::Teletext ttxt;
+                                 if (totalTtxtSubtitlePages < MAXTXTPAGES) {
+                                    for (SI::Loop::Iterator it; sd->teletextLoop.getNext(ttxt, it); ) {
+                                        bool isSubtitlePage = (ttxt.getTeletextType() == 0x02) || (ttxt.getTeletextType() == 0x05);
+                                        if (isSubtitlePage && ttxt.languageCode[0]) {
+                                           dbgpatpmt(" '%s:%x.%x'", ttxt.languageCode, ttxt.getTeletextMagazineNumber(), ttxt.getTeletextPageNumber());
+                                           strn0cpy(teletextSubtitlePages[totalTtxtSubtitlePages].ttxtLanguage, I18nNormalizeLanguageCode(ttxt.languageCode), MAXLANGCODE1);
+                                           teletextSubtitlePages[totalTtxtSubtitlePages].ttxtPage = ttxt.getTeletextPageNumber();
+                                           teletextSubtitlePages[totalTtxtSubtitlePages].ttxtMagazine = ttxt.getTeletextMagazineNumber();
+                                           teletextSubtitlePages[totalTtxtSubtitlePages].ttxtType = ttxt.getTeletextType();
+                                           totalTtxtSubtitlePages++;
+                                           if (totalTtxtSubtitlePages >= MAXTXTPAGES)
+                                              break;
+                                           }
+                                        }
+                                    }
+                                 }
+                                 break;
+#endif // USE_TTXTSUBS
                             case SI::ISO639LanguageDescriptorTag: {
                                  SI::ISO639LanguageDescriptor *ld = (SI::ISO639LanguageDescriptor *)d;
                                  dbgpatpmt(" '%s'", ld->languageCode);
@@ -1493,3 +1598,346 @@
         }
   return Processed;
 }
+#ifdef USE_NALUDUMP
+
+// --- cNaluDumper ---------------------------------------------------------
+
+cNaluDumper::cNaluDumper()
+{
+    LastContinuityOutput = -1;
+    reset();
+}
+
+void cNaluDumper::reset()
+{
+    LastContinuityInput = -1;
+    ContinuityOffset = 0;
+    PesId = -1;
+    PesOffset = 0;
+    NaluFillState = NALU_NONE;
+    NaluOffset = 0;
+    History = 0xffffffff;
+    DropAllPayload = false;
+}
+
+void cNaluDumper::ProcessPayload(unsigned char *Payload, int size, bool PayloadStart, sPayloadInfo &Info)
+{
+    Info.DropPayloadStartBytes = 0;
+    Info.DropPayloadEndBytes = 0;
+    int LastKeepByte = -1;
+
+    if (PayloadStart)
+    {
+        History = 0xffffffff;
+        PesId = -1;
+        NaluFillState = NALU_NONE;
+    }
+
+    for (int i=0; i<size; i++) {
+        History = (History << 8) | Payload[i];
+
+        PesOffset++;
+        NaluOffset++;
+
+        bool DropByte = false;
+
+        if (History >= 0x00000180 && History <= 0x000001FF)
+        {
+            // Start of PES packet
+            PesId = History & 0xff;
+            PesOffset = 0;
+            NaluFillState = NALU_NONE;
+        }
+        else if (PesId >= 0xe0 && PesId <= 0xef // video stream
+                 && History >= 0x00000100 && History <= 0x0000017F) // NALU start code
+        {
+            int NaluId = History & 0xff;
+            NaluOffset = 0;
+            NaluFillState = ((NaluId & 0x1f) == 0x0c) ? NALU_FILL : NALU_NONE;
+        }
+
+        if (PesId >= 0xe0 && PesId <= 0xef // video stream
+            && PesOffset >= 1 && PesOffset <= 2)
+        {
+            Payload[i] = 0; // Zero out PES length field
+        }
+
+        if (NaluFillState == NALU_FILL && NaluOffset > 0) // Within NALU fill data
+        {
+            // We expect a series of 0xff bytes terminated by a single 0x80 byte.
+
+            if (Payload[i] == 0xFF)
+            {
+                DropByte = true;
+            }
+            else if (Payload[i] == 0x80)
+            {
+                NaluFillState = NALU_TERM; // Last byte of NALU fill, next byte sets NaluFillEnd=true
+                DropByte = true;
+            }
+            else // Invalid NALU fill
+            {
+                dsyslog("cNaluDumper: Unexpected NALU fill data: %02x", Payload[i]);
+                NaluFillState = NALU_END;
+                if (LastKeepByte == -1)
+                {
+                    // Nalu fill from beginning of packet until last byte
+                    // packet start needs to be dropped
+                    Info.DropPayloadStartBytes = i;
+                }
+            }
+        }
+        else if (NaluFillState == NALU_TERM) // Within NALU fill data
+        {
+            // We are after the terminating 0x80 byte
+            NaluFillState = NALU_END;
+            if (LastKeepByte == -1)
+            {
+                // Nalu fill from beginning of packet until last byte
+                // packet start needs to be dropped
+                Info.DropPayloadStartBytes = i;
+            }
+        }
+
+        if (!DropByte)
+            LastKeepByte = i; // Last useful byte
+    }
+
+    Info.DropAllPayloadBytes = (LastKeepByte == -1);
+    Info.DropPayloadEndBytes = size-1-LastKeepByte;
+}
+
+bool cNaluDumper::ProcessTSPacket(unsigned char *Packet)
+{
+    bool HasAdaption = TsHasAdaptationField(Packet);
+    bool HasPayload = TsHasPayload(Packet);
+
+    // Check continuity:
+    int ContinuityInput = TsContinuityCounter(Packet);
+    if (LastContinuityInput >= 0)
+    {
+        int NewContinuityInput = HasPayload ? (LastContinuityInput + 1) & TS_CONT_CNT_MASK : LastContinuityInput;
+        int Offset = (NewContinuityInput - ContinuityInput) & TS_CONT_CNT_MASK;
+        if (Offset > 0)
+            dsyslog("cNaluDumper: TS continuity offset %i", Offset);
+        if (Offset > ContinuityOffset)
+            ContinuityOffset = Offset; // max if packets get dropped, otherwise always the current one.
+    }
+    LastContinuityInput = ContinuityInput;
+
+    if (HasPayload) {
+        sPayloadInfo Info;
+        int Offset = TsPayloadOffset(Packet);
+        ProcessPayload(Packet + Offset, TS_SIZE - Offset, TsPayloadStart(Packet), Info);
+
+        if (DropAllPayload && !Info.DropAllPayloadBytes)
+        {
+            // Return from drop packet mode to normal mode
+            DropAllPayload = false;
+
+            // Does the packet start with some remaining NALU fill data?
+            if (Info.DropPayloadStartBytes > 0)
+            {
+                // Add these bytes as stuffing to the adaption field.
+
+                // Sample payload layout:
+                // FF FF FF FF FF 80 00 00 01 xx xx xx xx
+                //                   ^DropPayloadStartBytes
+
+                TsExtendAdaptionField(Packet, Offset - 4 + Info.DropPayloadStartBytes);
+            }
+        }
+
+        bool DropThisPayload = DropAllPayload;
+
+        if (!DropAllPayload && Info.DropPayloadEndBytes > 0) // Payload ends with 0xff NALU Fill
+        {
+            // Last packet of useful data
+            // Do early termination of NALU fill data
+            Packet[TS_SIZE-1] = 0x80;
+            DropAllPayload = true;
+            // Drop all packets AFTER this one
+
+            // Since we already wrote the 0x80, we have to make sure that
+            // as soon as we stop dropping packets, any beginning NALU fill of next
+            // packet gets dumped. (see DropPayloadStartBytes above)
+        }
+
+        if (DropThisPayload && HasAdaption)
+        {
+            // Drop payload data, but keep adaption field data
+            TsExtendAdaptionField(Packet, TS_SIZE-4);
+            DropThisPayload = false;
+        }
+
+        if (DropThisPayload)
+        {
+            return true; // Drop packet
+        }
+    }
+
+    // Fix Continuity Counter and reproduce incoming offsets:
+    int NewContinuityOutput = TsHasPayload(Packet) ? (LastContinuityOutput + 1) & TS_CONT_CNT_MASK : LastContinuityOutput;
+    NewContinuityOutput = (NewContinuityOutput + ContinuityOffset) & TS_CONT_CNT_MASK;
+    TsSetContinuityCounter(Packet, NewContinuityOutput);
+    LastContinuityOutput = NewContinuityOutput;
+    ContinuityOffset = 0;
+
+    return false; // Keep packet
+}
+
+// --- cNaluStreamProcessor ---------------------------------------------------------
+
+cNaluStreamProcessor::cNaluStreamProcessor()
+{
+    pPatPmtParser = NULL;
+    vpid = -1;
+    data = NULL;
+    length = 0;
+    tempLength = 0;
+    tempLengthAtEnd = false;
+    TotalPackets = 0;
+    DroppedPackets = 0;
+}
+
+void cNaluStreamProcessor::PutBuffer(uchar *Data, int Length)
+{
+    if (length > 0)
+        esyslog("cNaluStreamProcessor::PutBuffer: New data before old data was processed!");
+
+    data = Data;
+    length = Length;
+}
+
+uchar* cNaluStreamProcessor::GetBuffer(int &OutLength)
+{
+    if (length <= 0)
+    {
+        // Need more data - quick exit
+        OutLength = 0;
+        return NULL;
+    }
+    if (tempLength > 0) // Data in temp buffer?
+    {
+        if (tempLengthAtEnd) // Data is at end, copy to beginning
+        {
+            // Overlapping src and dst!
+            for (int i=0; i<tempLength; i++)
+                tempBuffer[i] = tempBuffer[TS_SIZE-tempLength+i];
+        }
+        // Normalize TempBuffer fill
+        if (tempLength < TS_SIZE && length > 0)
+        {
+            int Size = min(TS_SIZE-tempLength, length);
+            memcpy(tempBuffer+tempLength, data, Size);
+            data += Size;
+            length -= Size;
+            tempLength += Size;
+        }
+        if (tempLength < TS_SIZE)
+        {
+            // All incoming data buffered, but need more data
+            tempLengthAtEnd = false;
+            OutLength = 0;
+            return NULL;
+        }
+        // Now: TempLength==TS_SIZE
+        if (tempBuffer[0] != TS_SYNC_BYTE)
+        {
+            // Need to sync on TS within temp buffer
+            int Skipped = 1;
+            while (Skipped < TS_SIZE && (tempBuffer[Skipped] != TS_SYNC_BYTE || (Skipped < length && data[Skipped] != TS_SYNC_BYTE)))
+                Skipped++;
+            esyslog("ERROR: skipped %d bytes to sync on start of TS packet", Skipped);
+            // Pass through skipped bytes
+            tempLengthAtEnd = true;
+            tempLength = TS_SIZE - Skipped; // may be 0, thats ok
+            OutLength = Skipped;
+            return tempBuffer;
+        }
+        // Now: TempBuffer is a TS packet
+        int Pid = TsPid(tempBuffer);
+        if (pPatPmtParser)
+        {
+            if (Pid == 0)
+                pPatPmtParser->ParsePat(tempBuffer, TS_SIZE);
+            else if (Pid == pPatPmtParser->IsPmtPid(Pid))
+                pPatPmtParser->ParsePmt(tempBuffer, TS_SIZE);
+        }
+
+        TotalPackets++;
+        bool Drop = false;
+        if (Pid == vpid || (pPatPmtParser && Pid == pPatPmtParser->Vpid() && pPatPmtParser->Vtype() == 0x1B))
+            Drop = NaluDumper.ProcessTSPacket(tempBuffer);
+        if (!Drop)
+        {
+            // Keep this packet, then continue with new data
+            tempLength = 0;
+            OutLength = TS_SIZE;
+            return tempBuffer;
+        }
+        // Drop TempBuffer
+        DroppedPackets++;
+        tempLength = 0;
+    }
+    // Now: TempLength==0, just process data/length
+
+    // Pointer to processed data / length:
+    uchar *Out = data;
+    uchar *OutEnd = Out;
+
+    while (length >= TS_SIZE)
+    {
+        if (data[0] != TS_SYNC_BYTE) {
+            int Skipped = 1;
+            while (Skipped < length && (data[Skipped] != TS_SYNC_BYTE || (length - Skipped > TS_SIZE && data[Skipped + TS_SIZE] != TS_SYNC_BYTE)))
+                Skipped++;
+            esyslog("ERROR: skipped %d bytes to sync on start of TS packet", Skipped);
+
+            // Pass through skipped bytes
+            if (OutEnd != data)
+                memcpy(OutEnd, data, Skipped);
+            OutEnd += Skipped;
+            continue;
+        }
+        // Now: Data starts with complete TS packet
+
+        int Pid = TsPid(data);
+        if (pPatPmtParser)
+        {
+            if (Pid == 0)
+                pPatPmtParser->ParsePat(data, TS_SIZE);
+            else if (Pid == pPatPmtParser->IsPmtPid(Pid))
+                pPatPmtParser->ParsePmt(data, TS_SIZE);
+        }
+
+        TotalPackets++;
+        bool Drop = false;
+        if (Pid == vpid || (pPatPmtParser && Pid == pPatPmtParser->Vpid() && pPatPmtParser->Vtype() == 0x1B))
+            Drop = NaluDumper.ProcessTSPacket(data);
+        if (!Drop)
+        {
+            if (OutEnd != data)
+                memcpy(OutEnd, data, TS_SIZE);
+            OutEnd += TS_SIZE;
+        }
+        else
+        {
+            DroppedPackets++;
+        }
+        data += TS_SIZE;
+        length -= TS_SIZE;
+    }
+    // Now: Less than a packet remains.
+    if (length > 0)
+    {
+        // copy remains into temp buffer
+        memcpy(tempBuffer, data, length);
+        tempLength = length;
+        tempLengthAtEnd = false;
+        length = 0;
+    }
+    OutLength = (OutEnd - Out);
+    return OutLength > 0 ? Out : NULL;
+}
+#endif // USE_NALUDUMP
--- vdr-1.7.38.orig/remux.h	2013-02-18 11:36:24.547286925 +0100
+++ vdr-1.7.38/remux.h	2013-02-18 11:37:34.919402228 +0100
@@ -62,6 +62,13 @@
   return p[3] & TS_PAYLOAD_EXISTS;
 }
 
+#ifdef USE_NALUDUMP
+inline bool TsSetPayload(const uchar *p)
+{
+  return p[3] & TS_PAYLOAD_EXISTS;
+}
+
+#endif // USE_NALUDUMP
 inline bool TsHasAdaptationField(const uchar *p)
 {
   return p[3] & TS_ADAPT_FIELD_EXISTS;
@@ -118,6 +125,13 @@
   return p[3] & TS_CONT_CNT_MASK;
 }
 
+#ifdef USE_NALUDUMP
+inline void TsSetContinuityCounter(uchar *p, int Counter)
+{
+  p[3] = (p[3] & ~TS_CONT_CNT_MASK) | (Counter & TS_CONT_CNT_MASK);
+}
+
+#endif // USE_NALUDUMP
 inline int64_t TsGetPcr(const uchar *p)
 {
   if (TsHasAdaptationField(p)) {
@@ -140,6 +154,9 @@
 // The following functions all take a pointer to a sequence of complete TS packets.
 
 int64_t TsGetPts(const uchar *p, int l);
+#ifdef USE_NALUDUMP
+void TsExtendAdaptionField(unsigned char *Packet, int ToLength);
+#endif // USE_NALUDUMP
 int64_t TsGetDts(const uchar *p, int l);
 void TsSetPts(uchar *p, int l, int64_t Pts);
 void TsSetDts(uchar *p, int l, int64_t Dts);
@@ -294,6 +311,9 @@
   int MakeStream(uchar *Target, uchar Type, int Pid);
   int MakeAC3Descriptor(uchar *Target, uchar Type);
   int MakeSubtitlingDescriptor(uchar *Target, const char *Language, uchar SubtitlingType, uint16_t CompositionPageId, uint16_t AncillaryPageId);
+#ifdef USE_TTXTSUBS
+  int MakeTeletextDescriptor(uchar *Target, const tTeletextSubtitlePage *pages, int pageCount);
+#endif // USE_TTXTSUBS
   int MakeLanguageDescriptor(uchar *Target, const char *Language);
   int MakeCRC(uchar *Target, const uchar *Data, int Length);
   void GeneratePmtPid(const cChannel *Channel);
@@ -341,6 +361,9 @@
   int vpid;
   int ppid;
   int vtype;
+#ifdef USE_TTXTSUBS
+  int tpid;
+#endif // USE_TTXTSUBS
   int apids[MAXAPIDS + 1]; // list is zero-terminated
   int atypes[MAXAPIDS + 1]; // list is zero-terminated
   char alangs[MAXAPIDS][MAXLANGCODE2];
@@ -353,6 +376,10 @@
   uint16_t compositionPageIds[MAXSPIDS];
   uint16_t ancillaryPageIds[MAXSPIDS];
   bool updatePrimaryDevice;
+#ifdef USE_TTXTSUBS
+  int totalTtxtSubtitlePages;
+  tTeletextSubtitlePage teletextSubtitlePages[MAXTXTPAGES];
+#endif // USE_TTXTSUBS
 protected:
   int SectionLength(const uchar *Data, int Length) { return (Length >= 3) ? ((int(Data[1]) & 0x0F) << 8)| Data[2] : 0; }
 public:
@@ -389,6 +416,11 @@
   int Vtype(void) const { return vtype; }
        ///< Returns the video stream type as defined by the current PMT, or 0 if no video
        ///< stream type has been detected, yet.
+#ifdef USE_TTXTSUBS
+  int Tpid(void) { return tpid; }
+       ///< Returns the teletext pid as defined by the current PMT, or 0 if no teletext
+       ///< pid has been detected, yet.
+#endif // USE_TTXTSUBS
   const int *Apids(void) const { return apids; }
   const int *Dpids(void) const { return dpids; }
   const int *Spids(void) const { return spids; }
@@ -403,6 +435,10 @@
   uchar SubtitlingType(int i) const { return (0 <= i && i < MAXSPIDS) ? subtitlingTypes[i] : uchar(0); }
   uint16_t CompositionPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? compositionPageIds[i] : uint16_t(0); }
   uint16_t AncillaryPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? ancillaryPageIds[i] : uint16_t(0); }
+#ifdef USE_TTXTSUBS
+  const tTeletextSubtitlePage *TeletextSubtitlePages() const { return teletextSubtitlePages; }
+  int TotalTeletextSubtitlePages() const { return totalTtxtSubtitlePages; }
+#endif // USE_TTXTSUBS
   };
 
 // TS to PES converter:
@@ -512,4 +548,80 @@
       ///< available.
   };
 
+#ifdef USE_NALUDUMP
+
+#define PATCH_NALUDUMP 100
+
+class cNaluDumper {
+    unsigned int History;
+
+    int LastContinuityInput;
+    int LastContinuityOutput;
+    int ContinuityOffset;
+
+    bool DropAllPayload;
+
+    int PesId;
+    int PesOffset;
+
+    int NaluOffset;
+
+    enum eNaluFillState {
+        NALU_NONE=0,    // currently not NALU fill stream
+        NALU_FILL,      // Within NALU fill stream, 0xff bytes and NALU start code in byte 0
+        NALU_TERM,      // Within NALU fill stream, read 0x80 terminating byte
+        NALU_END        // Beyond end of NALU fill stream, expecting 0x00 0x00 0x01 now
+        };
+
+    eNaluFillState NaluFillState;
+
+    struct sPayloadInfo {
+        int DropPayloadStartBytes;
+        int DropPayloadEndBytes;
+        bool DropAllPayloadBytes;
+    };
+
+public:
+    cNaluDumper();
+
+    void reset();
+
+    // Single packet interface:
+    bool ProcessTSPacket(unsigned char *Packet);
+
+private:
+    void ProcessPayload(unsigned char *Payload, int size, bool PayloadStart, sPayloadInfo &Info);
+};
+
+class cNaluStreamProcessor {
+    //Buffer stream interface:
+    int vpid;
+    uchar *data;
+    int length;
+    uchar tempBuffer[TS_SIZE];
+    int tempLength;
+    bool tempLengthAtEnd;
+    cPatPmtParser *pPatPmtParser;
+    cNaluDumper NaluDumper;
+
+    long long int TotalPackets;
+    long long int DroppedPackets;
+public:
+    cNaluStreamProcessor();
+
+    void SetPid(int VPid) { vpid = VPid; }
+    void SetPatPmtParser(cPatPmtParser *_pPatPmtParser) { pPatPmtParser = _pPatPmtParser; }
+    // Set either a PID or set a pointer to an PatPmtParser that will detect _one_ PID
+
+    void PutBuffer(uchar *Data, int Length);
+    // Add new data to be processed. Data must be valid until Get() returns NULL.
+    uchar* GetBuffer(int &OutLength);
+    // Returns filtered data, or NULL/0 to indicate that all data from Put() was processed
+    // or buffered.
+
+    long long int GetTotalPackets() { return TotalPackets; }
+    long long int GetDroppedPackets() { return DroppedPackets; }
+};
+
+#endif // USE_NALUDUMP
 #endif // __REMUX_H
--- vdr-1.7.38.orig/shutdown.c	2013-02-18 11:36:24.549286900 +0100
+++ vdr-1.7.38/shutdown.c	2013-02-18 11:37:34.920402215 +0100
@@ -17,6 +17,9 @@
 #include "channels.h"
 #include "config.h"
 #include "cutter.h"
+#ifdef USE_VASARAJANAULOJA
+#include "filetransfer.h"
+#endif /* VASARAJANAULOJA */
 #include "i18n.h"
 #include "interface.h"
 #include "menu.h"
@@ -166,6 +169,12 @@
      if (!Interactive || !Interface->Confirm(tr("Editing - shut down anyway?")))
         return false;
      }
+#ifdef USE_VASARAJANAULOJA
+  if (cFileTransfer::Active()) {
+      if (!Interactive || !Interface->Confirm(tr("Transfering file - shut down anyway?")))
+          return false;
+  }
+#endif /* VASARAJANAULOJA */
 
   cTimer *timer = Timers.GetNextActiveTimer();
   time_t Next = timer ? timer->StartTime() : 0;
@@ -209,6 +218,12 @@
      if (!Interactive || !Interface->Confirm(tr("Editing - restart anyway?")))
         return false;
      }
+#ifdef USE_VASARAJANAULOJA
+  if (cFileTransfer::Active()) {
+      if (!Interactive || !Interface->Confirm(tr("Transfering file - restart anyway?")))
+          return false;
+  }
+#endif /* VASARAJANAULOJA */
 
   cTimer *timer = Timers.GetNextActiveTimer();
   time_t Next  = timer ? timer->StartTime() : 0;
--- vdr-1.7.38.orig/status.c	2013-02-18 11:36:24.590286384 +0100
+++ vdr-1.7.38/status.c	2013-02-18 11:37:34.921402202 +0100
@@ -124,3 +124,88 @@
   for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
       sm->OsdProgramme(PresentTime, PresentTitle, PresentSubtitle, FollowingTime, FollowingTitle, FollowingSubtitle);
 }
+#ifdef USE_GRAPHTFT
+
+void cStatus::MsgOsdSetEvent(const cEvent* event)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdSetEvent(event);
+}
+
+void cStatus::MsgOsdSetRecording(const cRecording* recording)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdSetRecording(recording);
+}
+
+void cStatus::MsgOsdMenuDisplay(const char* kind)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdMenuDisplay(kind);
+}
+
+void cStatus::MsgOsdMenuDestroy()
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdMenuDestroy();
+}
+void cStatus::MsgOsdEventItem(const cEvent* Event, const char *Text, int Index, int Count)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     sm->OsdEventItem(Event, Text, Index, Count);
+}
+#endif /* GRAPHTFT */
+#ifdef USE_PINPLUGIN
+
+bool cStatus::MsgChannelProtected(const cDevice* Device, const cChannel* Channel)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      if (sm->ChannelProtected(Device, Channel) == true)
+          return true;
+
+  return false;
+}
+
+bool cStatus::MsgReplayProtected(const cRecording* Recording, const char* Name,
+                                 const char* Base, bool isDirectory, int menuView)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     if (sm->ReplayProtected(Recording, Name, Base, isDirectory, menuView) == true)
+         return true;
+     return false;
+}
+
+void cStatus::MsgRecordingFile(const char* FileName)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->RecordingFile(FileName);
+}
+
+void cStatus::MsgTimerCreation(cTimer* Timer, const cEvent *Event)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     sm->TimerCreation(Timer, Event);
+}
+
+bool cStatus::MsgPluginProtected(cPlugin* Plugin, int menuView)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     if (sm->PluginProtected(Plugin, menuView) == true)
+         return true;
+     return false;
+}
+
+void cStatus::MsgUserAction(const eKeys key, const cOsdObject* Interact)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     sm->UserAction(key, Interact);
+}
+
+bool cStatus::MsgMenuItemProtected(const char* Name, int menuView)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     if (sm->MenuItemProtected(Name, menuView) == true)
+         return true;
+     return false;
+}
+#endif /* PINPLUGIN */
--- vdr-1.7.38.orig/status.h	2013-02-18 11:36:24.601286246 +0100
+++ vdr-1.7.38/status.h	2013-02-18 11:37:34.922402190 +0100
@@ -14,6 +14,9 @@
 #include "device.h"
 #include "player.h"
 #include "tools.h"
+#ifdef USE_PINPLUGIN
+#include "plugin.h"
+#endif
 
 enum eTimerChange { tcMod, tcAdd, tcDel };
 
@@ -81,6 +84,38 @@
                // The OSD displays the single line Text with the current channel information.
   virtual void OsdProgramme(time_t PresentTime, const char *PresentTitle, const char *PresentSubtitle, time_t FollowingTime, const char *FollowingTitle, const char *FollowingSubtitle) {}
                // The OSD displays the given programme information.
+#ifdef USE_GRAPHTFT
+  virtual void OsdSetRecording(const cRecording* recording) {}
+               // The OSD displays the recording information.
+  virtual void OsdSetEvent(const cEvent* event) {}
+               // The OSD displays the event information.
+  virtual void OsdMenuDisplay(const char* kind) {}
+               // report menu creation
+  virtual void OsdMenuDestroy() {}
+               // report menu destruvtion
+  virtual void OsdEventItem(const cEvent* Event, const char *Text, int Index, int Count) {}
+               // The OSD displays the given single line Event as menu item at Index.
+#endif /* GRAPHTFT */
+#ifdef USE_PINPLUGIN
+  virtual bool ChannelProtected(const cDevice *Device, const cChannel* Channel)  { return false; }
+               // Checks if a channel is protected.
+  virtual bool ReplayProtected(const cRecording* Recording, const char* Name,
+                               const char* Base, bool isDirectory, int menuView = false) { return false; }
+               // Checks if a recording is protected.
+  virtual void RecordingFile(const char* FileName) {}
+               // The given DVB device has started recording to FileName. FileName is the name of the
+               // recording directory
+  virtual void TimerCreation(cTimer* Timer, const cEvent *Event) {}
+               // The given timer is created
+  virtual bool PluginProtected(cPlugin* Plugin, int menuView = false)  { return false; }
+               // Checks if a plugin is protected.
+  virtual void UserAction(const eKeys key, const cOsdObject* Interact) {}
+               // report user action
+  virtual bool MenuItemProtected(const char* Name, int menuView = false)  { return false; }
+               // Checks if a menu entry is protected.
+#endif /* PINPLUGIn */
+
+
 public:
   cStatus(void);
   virtual ~cStatus();
@@ -102,6 +137,23 @@
   static void MsgOsdTextItem(const char *Text,  bool Scroll = false);
   static void MsgOsdChannel(const char *Text);
   static void MsgOsdProgramme(time_t PresentTime, const char *PresentTitle, const char *PresentSubtitle, time_t FollowingTime, const char *FollowingTitle, const char *FollowingSubtitle);
+#ifdef USE_GRAPHTFT
+  static void MsgOsdSetEvent(const cEvent* event);
+  static void MsgOsdSetRecording(const cRecording* recording);
+  static void MsgOsdMenuDisplay(const char* kind);
+  static void MsgOsdMenuDestroy();
+  static void MsgOsdEventItem(const cEvent* Event, const char *Text, int Index, int Count);
+#endif /* GRAPHTFT */
+#ifdef USE_PINPLUGIN
+  static bool MsgChannelProtected(const cDevice* Device, const cChannel* Channel);
+  static bool MsgReplayProtected(const cRecording* Recording, const char* Name,
+                                 const char* Base, bool isDirectory, int menuView = false);
+  static void MsgRecordingFile(const char* FileName);
+  static void MsgTimerCreation(cTimer* Timer, const cEvent *Event);
+  static bool MsgPluginProtected(cPlugin* Plugin, int menuView = false);
+  static void MsgUserAction(const eKeys key, const cOsdObject* Interact);
+  static bool MsgMenuItemProtected(const char* Name, int menuView = false);
+#endif /* PINPLUGIN */
   };
 
 #endif //__STATUS_H
--- vdr-1.7.38.orig/submenu.c	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/submenu.c	2013-02-18 11:37:34.924402165 +0100
@@ -0,0 +1,947 @@
+/****************************************************************************
+ * DESCRIPTION:
+ *             Submenu
+ *
+ * $Id: vdr-1.3.44-Setup-0.3.0.diff,v 1.1 2006/03/04 09:58:47 ralf Exp $
+ *
+ * Contact:    ranga@teddycats.de
+ *
+ * Copyright (C) 2004, 2005 by Ralf Dotzert
+ *
+ * modified for the VDR Extensions Patch by zulu @vdr-portal
+ ****************************************************************************/
+
+#ifndef SUBMENU_H
+#include "submenu.h"
+#include "plugin.h"
+#ifdef USE_WAREAGLEICON
+#include "iconpatch.h"
+#endif /* WAREAGLEICON */
+
+static const char* TAG_SYSTEM      = "system";
+static const char* TAG_PLUGIN      = "plugin";
+static const char* TAG_COMMAND     = "command";
+static const char* TAG_THREAD      = "thread";
+static const char* TAG_MENU        = "menu";
+static const char* TAG_UNDEFINED   = "undefined";
+static const char* TRUE_STR        = "yes";
+
+
+//################################################################################
+//# SubMenuNode
+//################################################################################
+
+cSubMenuNode::cSubMenuNode(TiXmlElement *xml, int level,  cSubMenuNodes *currentMenu, cSubMenuNodes *parentMenu)
+{
+  init();
+  _parentMenu  = parentMenu;
+  _currentMenu = currentMenu;
+  _level       = level;
+
+  if (xml != NULL && xml->Type() == TiXmlNode::TINYXML_ELEMENT) {
+     const char *tag = xml->Value();
+
+     if (cSubMenuNode::IsType(tag) != cSubMenuNode::UNDEFINED) {
+        SetType(tag);
+        SetName(xml->Attribute("name"));
+        if ((_type == COMMAND) || (_type == THREAD)) {
+           SetCommand(xml->Attribute("execute"));
+           const char *confirmStr = xml->Attribute("confirm");
+           if (confirmStr != NULL && strcmp(confirmStr, TRUE_STR) == 0)
+              _commandConfirm = true;
+           }
+        else if (_type == PLUGIN) { // Add Plugin Index
+           SetCustomTitle(xml->Attribute("title"));
+           SetPlugin();
+           }
+        else if (_type == MENU && xml->NoChildren() == false) {
+           xml = xml->FirstChildElement();
+           do {
+              cSubMenuNode *node = new cSubMenuNode(xml, level+1, &_subMenus, currentMenu);
+              _subMenus.Add(node);
+              } while ((xml=xml->NextSiblingElement()) != NULL);
+           }
+        }
+     }
+  else
+     throw "Invalid XML Node";
+}
+
+/**
+ * Construct new Node empty Node
+ *
+ *
+ */
+cSubMenuNode::cSubMenuNode(cSubMenuNodes *currentMenu, cSubMenuNodes *parentMenu)
+{
+  init();
+  _parentMenu  = parentMenu;
+  _currentMenu = currentMenu;
+
+}
+
+
+/**
+ *
+ */
+void cSubMenuNode::init()
+{
+  _name                = NULL;
+  _command             = NULL;
+  _title               = NULL;
+  _pluginMainMenuEntry = NULL;
+  _type                = UNDEFINED;
+  _level               = 0;
+  _parentMenu          = NULL;
+  _currentMenu         = NULL;
+  _pluginIndex         = 0;
+  _commandConfirm      = false;
+}
+
+
+cSubMenuNode::~ cSubMenuNode()
+{
+  if (_name != NULL)
+     free((void*)_name);
+  if (_command != NULL)
+     free((void*)_command);
+  if (_title != NULL)
+     free((void*)_title);
+  if (_pluginMainMenuEntry != NULL)
+     free((void*)_pluginMainMenuEntry);
+}
+
+/**
+ *
+ */
+void cSubMenuNode::SetPlugin()
+{
+  bool found = false;
+  for (int i = 0; ; i++) {
+      cPlugin *p = cPluginManager::GetPlugin(i);
+      if (p) {
+         if (strcmp(_name, p->Name()) == 0 && p->MainMenuEntry() != NULL) {
+            SetPluginMainMenuEntry(p->MainMenuEntry());
+            _pluginIndex = i;
+            found = true;
+            break;
+            }
+         }
+      else
+         break;
+      }
+
+      if (!found)
+         _type = UNDEFINED;
+}
+
+
+bool cSubMenuNode::SaveXml(TiXmlElement *root)
+{
+  bool ok = true;
+
+  if (root!=NULL) {
+     TiXmlElement *e = NULL;
+     switch(_type) {
+        case SYSTEM:
+           e = new TiXmlElement(TAG_SYSTEM);
+           e->SetAttribute("name", GetName());
+           break;
+        case COMMAND:
+           e = new TiXmlElement(TAG_COMMAND);
+           e->SetAttribute("name", GetName());
+           e->SetAttribute("execute", GetCommand());
+           if (_commandConfirm)
+              e->SetAttribute("confirm", TRUE_STR);
+           break;
+        case THREAD:
+           e = new TiXmlElement(TAG_THREAD);
+           e->SetAttribute("name", GetName());
+           e->SetAttribute("execute", GetCommand());
+           if (_commandConfirm)
+              e->SetAttribute("confirm", TRUE_STR);
+           break;
+        case PLUGIN:
+           e = new TiXmlElement(TAG_PLUGIN);
+           e->SetAttribute("name", GetName());
+           if (GetCustomTitle() != NULL && strcmp(GetCustomTitle(), "") != 0)
+              e->SetAttribute("title", GetCustomTitle());
+           break;
+        case MENU:
+           e = new TiXmlElement(TAG_MENU);
+           e->SetAttribute("name", GetName());
+           break;
+        case UNDEFINED:
+        default:
+           ok = false;
+           break;
+        }
+        if (ok) {
+           root->LinkEndChild(e);
+           if (HasSubMenus())
+              for (cSubMenuNode *node = _subMenus.First(); node; node = _subMenus.Next(node))
+                  node->SaveXml(e);
+           }
+     }
+
+  return(ok);
+}
+
+
+cSubMenuNode::Type cSubMenuNode::IsType(const char *name)
+{
+  Type type = UNDEFINED;
+
+  if (strcmp(name ,TAG_SYSTEM) == 0)
+     type = cSubMenuNode::SYSTEM;
+  else if (strcmp(name ,TAG_PLUGIN) == 0)
+     type = cSubMenuNode::PLUGIN;
+  else if (strcmp(name ,TAG_COMMAND) == 0)
+     type = cSubMenuNode::COMMAND;
+  else if (strcmp(name ,TAG_THREAD) == 0)
+     type = cSubMenuNode::THREAD;
+  else if (strcmp(name ,TAG_MENU) == 0)
+     type = cSubMenuNode::MENU;
+
+  return(type);
+}
+
+void cSubMenuNode::SetType(const char *name)
+{
+   _type = IsType(name);
+}
+
+void cSubMenuNode::SetType(enum Type type)
+{
+  _type = type;
+}
+
+
+cSubMenuNode::Type cSubMenuNode::GetType()
+{
+  return(_type);
+}
+
+const char *cSubMenuNode::GetTypeAsString()
+{
+  const char *str=NULL;
+  switch(_type) {
+     case SYSTEM:
+        str = TAG_SYSTEM;
+        break;
+     case COMMAND:
+        str = TAG_COMMAND;
+        break;
+     case THREAD:
+        str = TAG_THREAD;
+        break;
+     case PLUGIN:
+        str = TAG_PLUGIN;
+        break;
+     case MENU:
+        str = TAG_MENU;
+        break;
+     case UNDEFINED:
+        str = TAG_UNDEFINED;
+     default:
+        break;
+    }
+
+  return(str);
+}
+
+void cSubMenuNode::SetCommand(const char *command)
+{
+  if (_command != NULL)
+     free((void*)_command);
+
+  if (command != NULL)
+     _command = strdup(command);
+  else
+     _command = NULL;
+}
+
+const char *cSubMenuNode::GetCommand()
+{
+  return(_command);
+}
+
+bool cSubMenuNode::CommandConfirm()
+{
+  return(_commandConfirm);
+}
+
+void cSubMenuNode::SetCommandConfirm(int val)
+{
+  if (val == 1)
+     _commandConfirm = true;
+  else
+     _commandConfirm = false;
+}
+
+void cSubMenuNode::SetCustomTitle(const char *title)
+{
+  if (_title != NULL)
+     free((void*)_title);
+
+  if (title != NULL)
+     _title = strdup(title);
+  else
+     _title = NULL;
+}
+
+const char *cSubMenuNode::GetCustomTitle()
+{
+  return(_title);
+}
+
+void cSubMenuNode::SetName(const char *name)
+{
+  if (_name)
+     free ((void*)_name);
+
+  if (name != NULL)
+     _name = strdup(name);
+  else
+     _name = NULL;
+}
+
+const char *cSubMenuNode::GetName()
+{
+  return(_name);
+}
+
+int cSubMenuNode::GetLevel()
+{
+  return(_level);
+}
+
+void cSubMenuNode::SetLevel(int level)
+{
+  _level = level;
+  if (HasSubMenus()) { //Adjust Levels of Subnodes
+     for (cSubMenuNode *node = _subMenus.First(); node; node = _subMenus.Next(node))
+         node->SetLevel(level+1);
+     }
+}
+
+int cSubMenuNode::GetPluginIndex()
+{
+  return(_pluginIndex);
+}
+
+void cSubMenuNode::SetPluginIndex(int index)
+{
+  _pluginIndex = index;
+}
+
+void cSubMenuNode::SetPluginMainMenuEntry(const char *mainMenuEntry)
+{
+  if (_pluginMainMenuEntry != NULL)
+     free((void*)_pluginMainMenuEntry);
+
+  if (_title != NULL && strcmp(_title, "") != 0)
+     _pluginMainMenuEntry = strdup(_title);
+  else if (mainMenuEntry != NULL)
+     _pluginMainMenuEntry = strdup(mainMenuEntry);
+  else
+     _pluginMainMenuEntry = NULL;
+}
+
+const char *cSubMenuNode::GetPluginMainMenuEntry()
+{
+  return(_pluginMainMenuEntry);
+}
+
+
+cSubMenuNodes *cSubMenuNode::GetParentMenu()
+{
+  return(_parentMenu);
+}
+
+void cSubMenuNode::SetParentMenu(cSubMenuNodes *parent)
+{
+  _parentMenu = parent;
+}
+
+cSubMenuNodes *cSubMenuNode::GetCurrentMenu()
+{
+  return(_currentMenu);
+}
+
+void cSubMenuNode::SetCurrentMenu(cSubMenuNodes *current)
+{
+  _currentMenu = current;
+}
+
+
+cSubMenuNodes *cSubMenuNode::GetSubMenus()
+{
+  return(&_subMenus);
+}
+
+bool cSubMenuNode::HasSubMenus()
+{
+  if (_subMenus.Count() > 0)
+     return(true);
+  else
+     return(false);
+}
+
+
+void cSubMenuNode::Print(int index)
+{
+  for (int i = 0; i < index; i++)
+      printf(" ");
+
+  printf("Name=%s Type=%s Level=%d", _name, GetTypeAsString(), _level);
+  if (_type == COMMAND || _type == THREAD)
+     printf(" Command=%s", _command);
+  else if (_type == PLUGIN && _title != NULL)
+     printf(" Title=%s", _title);
+  printf("\n");
+
+  for (cSubMenuNode *node = _subMenus.First(); node; node = _subMenus.Next(node))
+      node->Print(index+4);
+}
+
+
+//################################################################################
+//#
+//################################################################################
+cSubMenu::cSubMenu()
+{
+  _commandResult         = NULL;
+  _currentMenuTree       = &_menuTree;
+  _currentParentMenuTree = NULL;
+#ifdef USE_PINPLUGIN
+  _currentParentIndex    = -1;
+#endif /* PINPLUGIN */
+  _nodeArray             = NULL;
+  _nrNodes               = 0;
+}
+
+
+cSubMenu::~cSubMenu()
+{
+  if (_commandResult)
+     free(_commandResult);
+  if (_nodeArray)
+     free(_nodeArray);
+  _nrNodes = 0;
+}
+
+
+bool cSubMenu::LoadXml(cString fname)
+{
+  TiXmlDocument  xmlDoc = TiXmlDocument(fname);
+  TiXmlElement  *root   = NULL;
+  cSubMenuNode  *node   = NULL;
+
+  bool  ok = true;
+  // Clear previously loaded Menu
+  _menuTree.Clear();
+  _fname = fname;
+
+  if ((ok = xmlDoc.LoadFile())) {
+     if ((root = xmlDoc.FirstChildElement("menus")) != NULL) {
+        cString tmp = root->Attribute("suffix");
+#ifdef USE_WAREAGLEICON
+        if      (strcmp(tmp, "ICON_FOLDER") == 0)      tmp = cString::sprintf(" %s", IsLangUtf8() ? ICON_FOLDER_UTF8 : ICON_FOLDER);
+        else if (strcmp(tmp, "ICON_MOVE_FOLDER") == 0) tmp = cString::sprintf(" %s", IsLangUtf8() ? ICON_MOVE_FOLDER_UTF8 : ICON_MOVE_FOLDER);
+#endif /* WAREAGLEICON */
+        if (*tmp)
+           _menuSuffix = tmp;
+        else
+           _menuSuffix = cString::sprintf(" ");
+
+        if ((root = root->FirstChildElement()) != NULL) {
+           do {
+              try {
+                 node = new cSubMenuNode(root, 0,  &_menuTree, NULL);
+                 _menuTree.Add(node);
+                 }
+              catch (char *message) {
+                 esyslog("ERROR: while decoding XML Node");
+                 ok = false;
+                 }
+              } while (ok == true && (root = root->NextSiblingElement()) != NULL);
+           addMissingPlugins();
+           removeUndefinedNodes();
+           }
+        }
+     else {
+        esyslog("ERROR: in %s, missing Tag <menus>\n", *fname);
+        ok = false;
+        }
+     }
+  else {
+     esyslog("ERROR: in %s : %s  Col=%d Row=%d\n",
+            *fname,
+            xmlDoc.ErrorDesc(),
+            xmlDoc.ErrorCol(),
+            xmlDoc.ErrorRow());
+     ok = false;
+     }
+
+  return(ok);
+}
+
+
+bool cSubMenu::SaveXml()
+{
+  return(SaveXml(_fname));
+}
+
+
+bool cSubMenu::SaveXml(cString fname)
+{
+  bool ok = true;
+
+  if (*_fname) {
+     TiXmlDocument xml = TiXmlDocument(fname);
+     TiXmlComment  comment;
+     comment.SetValue("\n\
+-    VDR Menu-Configuration File\n\
+-\n\
+-\n\
+-   Example:\n\
+-\n\
+ <menus>\n\
+    <system name=\"Schedule\" />\n\
+    <system name=\"Channels\" />\n\
+    <system name=\"Timers\" />\n\
+    <system name=\"Recordings\" />\n\
+    <menu name=\"System\">\n\
+        <system name=\"Setup\" />\n\
+        <system name=\"Commands\" />\n\
+        <plugin name=\"setup\" title=\"My Setup\" />\n\
+        <command name=\"myCommand1\" execute=\"/usr/bin/mycommand1\" />\n\
+        <command name=\"myCommand2\" execute=\"/usr/bin/mycommand2\" confirm=\"yes\" />\n\
+        <thread name=\"myCommand3\" execute=\"/usr/bin/mycommand3\" confirm=\"yes\" />\n\
+        <plugin name=\"epgsearch\" title=\"myProgram\" />\n\
+        <menu name=\"mySubSubMenu\">\n\
+            ...\n\
+        </menu>\n\
+    </menu>\n\
+     <menu name=\"Suche\">\n\
+        <plugin name=\"epgsearch\" />\n\
+        ...\n\
+    </menu>\n\
+ </menus>\n\
+");
+
+     TiXmlElement root("menus");
+     root.SetAttribute("suffix", _menuSuffix);
+     for (cSubMenuNode *node = _menuTree.First(); node; node = _menuTree.Next(node))
+         node->SaveXml(&root);
+
+         if (xml.InsertEndChild(comment) != NULL && xml.InsertEndChild(root) != NULL)
+            ok = xml.SaveFile(fname);
+     }
+  else
+     ok = false;
+
+  return(ok);
+}
+
+
+cSubMenuNodes *cSubMenu::GetMenuTree()
+{
+  return(_currentMenuTree);
+}
+
+
+void cSubMenu::PrintMenuTree()
+{
+  for (cSubMenuNode *node = _menuTree.First(); node; node = _menuTree.Next(node))
+      node->Print();
+}
+
+
+int cSubMenu::GetNrOfNodes()
+{
+  if (_nrNodes == 0) {
+     if ((_nrNodes = countNodes(&_menuTree)) > 0) {
+        _nodeArray = (cSubMenuNode**) malloc(sizeof(cSubMenuNode*)*_nrNodes);
+        int index = 0;
+        tree2Array(&_menuTree, index);
+        }
+     }
+
+  return(_nrNodes);
+}
+
+
+/**
+ * returns the specified node within the current menu
+ * @param index position in the current menu
+ * @return node or null if not found
+ */
+cSubMenuNode *cSubMenu::GetNode(int index)
+{
+  cSubMenuNode *node = NULL;
+  if (_currentMenuTree == NULL || (node=_currentMenuTree->Get(index)) == NULL)
+     esyslog("ERROR: illegal call of cSubMenu::GetNode(%d)", index);
+
+  return(node);
+}
+
+
+/**
+ * Get the specified Node
+ * @param index specfies the absolut indes in the list of all nodes
+ * @return node or NULL if not found
+ */
+cSubMenuNode *cSubMenu::GetAbsNode(int index)
+{
+  cSubMenuNode *node = NULL;
+  GetNrOfNodes();
+  if (_nrNodes > 0 && index >= 0 && index < _nrNodes)
+     node = _nodeArray[index];
+
+  return(node);
+}
+
+
+#ifdef USE_PINPLUGIN
+bool cSubMenu::Down(cSubMenuNode *node, int currentIndex)
+#else
+bool cSubMenu::Down(int index)
+#endif /* PINPLUGIN */
+{
+  bool ok = true;
+#ifdef USE_PINPLUGIN
+  if (_currentMenuTree != NULL && node && node->GetType() == cSubMenuNode::MENU) {
+#else
+  cSubMenuNode *node = NULL;
+
+  if (_currentMenuTree != NULL && (node=_currentMenuTree->Get(index)) != NULL && node->GetType() == cSubMenuNode::MENU) {
+#endif /* PINPLUGIN */
+     _currentParentMenuTree = _currentMenuTree;
+#ifdef USE_PINPLUGIN
+     _currentParentIndex = currentIndex;
+#endif /* PINPLUGIN */
+     _currentMenuTree = node->GetSubMenus();
+     }
+  else {
+     ok = false;
+#ifdef USE_PINPLUGIN
+     esyslog("ERROR: illegal call of cSubMenu::Down");
+#else
+     esyslog("ERROR: illegal call of cSubMenu::Down(%d)", index);
+#endif /* PINPLUGIN */
+     }
+
+  return(ok);
+}
+
+bool cSubMenu::Up(int *parentIndex)
+{
+  bool ok = true;
+
+  if (_currentMenuTree != NULL && parentIndex != NULL) {
+#ifndef USE_PINPLUGIN
+     cSubMenuNode *node = NULL;
+#endif /* PINPLUGIN */
+     *parentIndex = 0;
+#ifdef USE_PINPLUGIN
+     if (_currentParentIndex >= 0)
+        *parentIndex = _currentParentIndex;
+#else
+     if (_currentParentMenuTree != NULL)
+        for (int i = 0; (node = _currentParentMenuTree->Get(i)) != NULL; i++) {
+            if (_currentMenuTree == node->GetSubMenus()) {
+               *parentIndex = i;
+               break;
+               }
+            }
+#endif /* PINPLUGIN */
+
+     _currentMenuTree = _currentParentMenuTree;
+     if (_currentMenuTree != NULL)
+        _currentParentMenuTree = _currentMenuTree->Get(0)->GetParentMenu();
+     else
+        ok = false;
+     }
+  else {
+     ok = false;
+     esyslog("ERROR: illegal call of cSubMenu::Up()");
+     }
+
+  return(ok);
+}
+
+const char *cSubMenu::ExecuteCommand(const char *cmd)
+{
+  free(_commandResult);
+  _commandResult = NULL;
+
+  dsyslog("executing command '%s'", cmd);
+  FILE *p = popen(cmd, "r");
+  if (p) {
+     int l = 0;
+     int c;
+     while ((c = fgetc(p)) != EOF) {
+           if (l % 20 == 0)
+              _commandResult = (char *)realloc(_commandResult, l + 21);
+           _commandResult[l++] = c;
+           }
+     if (_commandResult)
+        _commandResult[l] = 0;
+     pclose(p);
+     }
+  else
+     esyslog("ERROR: can't open pipe for command '%s'", cmd);
+
+  return _commandResult;
+}
+
+/**
+ * Move Menu Entry to new Position
+ * @param index  index of menu entry to move
+ * @param toIndex index of destination
+ * @param where After ore before the destination index
+ */
+void cSubMenu::MoveMenu(int index, int toIndex, enum Where where)
+{
+  if (index < 0 || index > _nrNodes || // invalid index is ignored
+     toIndex < 0 || toIndex > _nrNodes || index == toIndex)
+     return;
+
+  cSubMenuNode *srcNode  = GetAbsNode(index);
+  cSubMenuNode *destNode = GetAbsNode(toIndex);
+
+  if (where == cSubMenu::INTO && destNode->GetType() != cSubMenuNode::MENU)
+     return;
+
+  if (where == cSubMenu::INTO) {
+     if (destNode->GetType() == cSubMenuNode::MENU) {
+        srcNode->GetCurrentMenu()->Del(srcNode, false);
+        srcNode->SetLevel(destNode->GetLevel()+1);
+        srcNode->SetParentMenu(destNode->GetCurrentMenu());
+        srcNode->SetCurrentMenu(destNode->GetSubMenus());
+
+        destNode->GetSubMenus()->Add(srcNode);
+        reloadNodeArray();
+        }
+     }
+  else {
+     srcNode->GetCurrentMenu()->Del(srcNode, false);
+     srcNode->SetLevel(destNode->GetLevel());
+     srcNode->SetParentMenu(destNode->GetParentMenu());
+     srcNode->SetCurrentMenu(destNode->GetCurrentMenu());
+
+     if (where == cSubMenu::BEHIND) {
+        destNode->GetCurrentMenu()->Add(srcNode, GetAbsNode(toIndex));
+        reloadNodeArray();
+        }
+     else {
+        destNode->GetCurrentMenu()->Ins(srcNode, GetAbsNode(toIndex));
+        reloadNodeArray();
+        }
+     }
+}
+
+/**
+ * Create a new Menu Entry
+ * @param index index of destination
+ * @param menuTitle  Titel of new Menu entry
+ */
+void cSubMenu::CreateMenu(int index, const char *menuTitle)
+{
+  if (index >= 0 && index < _nrNodes) {
+     cSubMenuNode *srcNode  = GetAbsNode(index);
+     if (srcNode != NULL) {
+        cSubMenuNode *newNode = new cSubMenuNode(srcNode->GetParentMenu(), srcNode->GetCurrentMenu());
+        newNode->SetLevel(srcNode->GetLevel());
+        newNode->SetName(menuTitle);
+        newNode->SetType(cSubMenuNode::MENU);
+        newNode->SetParentMenu(srcNode->GetParentMenu());
+        newNode->SetCurrentMenu(srcNode->GetCurrentMenu());
+
+        srcNode->GetCurrentMenu()->Add(newNode, GetAbsNode(index));
+        reloadNodeArray();
+        }
+     }
+}
+
+/**
+ * delete the specified entry, or subtree if the specified entry is a menu
+ * @param index destion index
+ */
+void cSubMenu::DeleteMenu(int index)
+{
+  if (index >= 0 && index < _nrNodes) {
+     cSubMenuNode *srcNode = GetAbsNode(index);
+     srcNode->GetCurrentMenu()->Del(srcNode, true);
+     reloadNodeArray();
+     }
+}
+
+
+// Private Methods
+
+int cSubMenu::countNodes(cSubMenuNodes *tree)
+{
+  int count = 0;
+  if (tree != NULL) {
+     for (cSubMenuNode *node = tree->First(); node; node = tree->Next(node)) {
+         count++;
+         if (node->HasSubMenus())
+            count += countNodes(node->GetSubMenus());
+         }
+     }
+  return(count);
+}
+
+
+void cSubMenu::tree2Array(cSubMenuNodes *tree, int &index)
+{
+  if (tree != NULL) {
+     for (cSubMenuNode *node = tree->First(); node; node = tree->Next(node)) {
+         _nodeArray[index++]=node;
+         if (node->HasSubMenus())
+            tree2Array(node->GetSubMenus(), index);
+         }
+     }
+
+}
+
+bool cSubMenu::IsPluginInMenu(const char *name)
+{
+  bool found = false;
+  for (int i = 0; i < _nrNodes && found == false; i++) {
+      cSubMenuNode *node = GetAbsNode(i);
+      if (node != NULL && node->GetType() == cSubMenuNode::PLUGIN && strcmp(name, node->GetName()) == 0)
+         found = true;
+      }
+  return(found);
+}
+
+/**
+ * Adds the given plugin to the Menu-Tree if not allready in List
+ * @param name specifies the name of the plugin
+ */
+void cSubMenu::AddPlugin(const char *name)
+{
+  if (! IsPluginInMenu(name)) {
+     cSubMenuNode *node = new  cSubMenuNode(&_menuTree, NULL);
+     node->SetName(name);
+     node->SetType("plugin");
+     node->SetPlugin();
+     _menuTree.Add(node);
+     }
+}
+
+void cSubMenu::addMissingPlugins()
+{
+  _nrNodes = GetNrOfNodes();
+  for (int i = 0; ; i++) {
+      cPlugin *p = cPluginManager::GetPlugin(i);
+      if (p)
+         AddPlugin(p->Name());
+      else
+         break;
+      }
+  reloadNodeArray();
+}
+
+/**
+ * Adds the given command to the Menu-Tree
+ * @param name specifies the name of the command
+ */
+void cSubMenu::CreateCommand(int index, const char *name, const char *execute, int confirm)
+{
+  if (index >= 0 && index < _nrNodes) {
+     cSubMenuNode *srcNode  = GetAbsNode(index);
+     if (srcNode != NULL) {
+        cSubMenuNode *newNode = new cSubMenuNode(srcNode->GetParentMenu(), srcNode->GetCurrentMenu());
+        newNode->SetLevel(srcNode->GetLevel());
+        newNode->SetName(name);
+        newNode->SetType("command");
+        newNode->SetCommand(execute);
+        newNode->SetCommandConfirm(confirm);
+        newNode->SetParentMenu(srcNode->GetParentMenu());
+        newNode->SetCurrentMenu(srcNode->GetCurrentMenu());
+
+        srcNode->GetCurrentMenu()->Add(newNode, GetAbsNode(index));
+        reloadNodeArray();
+        }
+     }
+}
+
+void cSubMenu::CreateThread(int index, const char *name, const char *execute, int confirm)
+{
+  if (index >= 0 && index < _nrNodes) {
+     cSubMenuNode *srcNode  = GetAbsNode(index);
+     if (srcNode != NULL) {
+        cSubMenuNode *newNode = new cSubMenuNode(srcNode->GetParentMenu(), srcNode->GetCurrentMenu());
+        newNode->SetLevel(srcNode->GetLevel());
+        newNode->SetName(name);
+        newNode->SetType("thread");
+        newNode->SetCommand(execute);
+        newNode->SetCommandConfirm(confirm);
+        newNode->SetParentMenu(srcNode->GetParentMenu());
+        newNode->SetCurrentMenu(srcNode->GetCurrentMenu());
+
+        srcNode->GetCurrentMenu()->Add(newNode, GetAbsNode(index));
+        reloadNodeArray();
+        }
+     }
+}
+
+/**
+ * reloads the internal Array of Nodes
+ */
+void cSubMenu::reloadNodeArray()
+{
+  if (_nrNodes > 0)
+     free(_nodeArray);
+  _nodeArray = NULL;
+  _nrNodes = 0;
+  _nrNodes = GetNrOfNodes();
+}
+
+/**
+ * remove Undefined Nodes
+ */
+void cSubMenu::removeUndefinedNodes()
+{
+  bool remove = false;
+
+  reloadNodeArray();
+  for (int i = 0; i < _nrNodes; i++) {
+      cSubMenuNode *node = GetAbsNode(i);
+      if (node != NULL && node->GetType() == cSubMenuNode::UNDEFINED) {
+         cSubMenuNodes *pMenu = node->GetCurrentMenu();
+         pMenu->Del(node, true);
+         remove = true;
+         }
+      }
+  if (remove)
+     reloadNodeArray();
+}
+
+
+/**
+* Retrieves the Menutitel of the parent Menu
+*/
+const char *cSubMenu::GetParentMenuTitel()
+{
+  const char *result = "";
+
+  if (_currentMenuTree != NULL && _currentParentMenuTree != NULL) {
+     cSubMenuNode *node = NULL;
+     for (int i = 0; (node = _currentParentMenuTree->Get(i)) != NULL; i++) {
+         if (_currentMenuTree == node->GetSubMenus()) {
+            result = node->GetName();
+            break;
+            }
+         }
+     }
+
+  return(result);
+}
+
+#endif
--- vdr-1.7.38.orig/submenu.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/submenu.h	2013-02-18 11:37:34.925402152 +0100
@@ -0,0 +1,159 @@
+/****************************************************************************
+ * DESCRIPTION:
+ *             Submenu
+ *
+ * $Id: vdr-1.3.44-Setup-0.3.0.diff,v 1.1 2006/03/04 09:58:47 ralf Exp $
+ *
+ * Contact:    ranga@teddycats.de
+ *
+ * Copyright (C) 2004, 2005 by Ralf Dotzert
+ *
+ * modified for the VDR Extensions Patch by zulu @vdr-portal
+ ****************************************************************************/
+
+#ifndef SUBMENU_H
+#define SUBMENU_H
+
+#include "thread.h"
+#include "tools.h"
+#define  TIXML_USE_STL
+#include <tinystr.h>
+#include <tinyxml.h>
+
+class cSubMenuNode;
+class cSubMenuNodes;
+class cSubMenu;
+
+
+class cSubMenuNodes : public cList<cSubMenuNode> {};
+
+// execute cmd thread
+class cExecCmdThread : public cThread {
+private:
+  cString ExecCmd;
+protected:
+  virtual void Action(void) {
+     if (system(ExecCmd) == 0)
+        esyslog("%s - finished", *ExecCmd);
+     delete(this);
+     };
+public:
+  cExecCmdThread(char *cmd) {
+     ExecCmd = cString::sprintf("%s", cmd);
+     }
+  cExecCmdThread(const char *cmd) {
+     ExecCmd = cString::sprintf("%s", cmd);
+     }
+  ~cExecCmdThread() {
+     };
+  };
+
+//################################################################################
+//# SubMenuNode
+//################################################################################
+class cSubMenuNode : public cListObject {
+public:
+  enum Type { UNDEFINED, SYSTEM, COMMAND, THREAD, PLUGIN, MENU };
+  cSubMenuNode(TiXmlElement *xml, int level, cSubMenuNodes *currentMenu, cSubMenuNodes *parentMenu);
+  cSubMenuNode(cSubMenuNodes *currentMenu, cSubMenuNodes *parentMenu);
+  ~cSubMenuNode();
+  bool SaveXml(TiXmlElement *root);
+  static cSubMenuNode::Type IsType(const char *name);
+  void  SetType(const char *name);
+  void  SetType(enum Type type);
+  void  SetPlugin();
+  cSubMenuNode::Type GetType();
+  const char *GetTypeAsString();
+  void SetCommand(const char *command);
+  bool CommandConfirm();
+  void SetCommandConfirm(int val);
+  const char *GetCommand();
+  void SetCustomTitle(const char *title);
+  const char *GetCustomTitle();
+  void SetName(const char *name);
+  const char*GetName();
+  int  GetLevel();
+  void SetLevel(int level);
+  int  GetPluginIndex();
+  void SetPluginIndex(int index);
+  void SetPluginMainMenuEntry(const char *mainMenuEntry);
+  const char *GetPluginMainMenuEntry();
+  cSubMenuNodes *GetParentMenu();
+  void SetParentMenu(cSubMenuNodes *parent);
+  cSubMenuNodes *GetCurrentMenu();
+  void SetCurrentMenu(cSubMenuNodes *current);
+  cSubMenuNodes *GetSubMenus();
+  bool HasSubMenus();
+  void Print(int index = 0);
+private:
+  Type _type;
+  int _level;
+  // Plugin Variables
+  int _pluginIndex;
+  const char *_pluginMainMenuEntry;
+  // common
+  const char *_name;
+  const char *_command;
+  bool _commandConfirm;
+  const char *_title;
+  cSubMenuNodes _subMenus;
+  cSubMenuNodes *_parentMenu;
+  cSubMenuNodes *_currentMenu;
+  void init();
+  };
+
+
+//################################################################################
+//# SubMenu Class
+//################################################################################
+class cSubMenu {
+public:
+  cSubMenu();
+  ~cSubMenu();
+  enum Where { BEFORE, BEHIND, INTO};
+  bool LoadXml(cString fname);
+  bool SaveXml(cString fname);
+  bool SaveXml();
+  cSubMenuNodes *GetMenuTree();
+  bool Up(int *ParentIndex);
+#ifdef USE_PINPLUGIN
+  bool Down(cSubMenuNode* node, int currentIndex);
+#else
+  bool Down(int index);
+#endif /* PINPLUGIN */
+  int  GetNrOfNodes();
+  cSubMenuNode* GetAbsNode(int index);
+  cSubMenuNode* GetNode(int index);
+  void PrintMenuTree();
+  bool IsPluginInMenu(const char *name);
+  void AddPlugin(const char *name);
+  void CreateCommand(int index, const char *name, const char *execute, int confirm);
+  void CreateThread(int index, const char *name, const char *execute, int confirm);
+  const char *ExecuteCommand(const char *command);
+  void MoveMenu(int index, int toindex, enum Where);
+  void CreateMenu(int index, const char *menuTitle);
+  void DeleteMenu(int index);
+  cString GetMenuSuffix() { return _menuSuffix; }
+  void SetMenuSuffix(char *suffix) { _menuSuffix = suffix; }
+  bool isTopMenu() { return (_currentParentMenuTree == NULL); }
+  const char *GetParentMenuTitel();
+private:
+  cSubMenuNodes _menuTree;
+  cSubMenuNodes *_currentMenuTree;
+  cSubMenuNodes *_currentParentMenuTree;
+#ifdef USE_PINPLUGIN
+  int _currentParentIndex;
+#endif /* PINPLUGIN */
+  cString _fname;
+  char *_commandResult;
+  int _nrNodes;
+  cSubMenuNode **_nodeArray;
+  cString _menuSuffix;
+  int countNodes(cSubMenuNodes *tree);
+  void tree2Array(cSubMenuNodes *tree, int &index);
+  void addMissingPlugins();
+  void reloadNodeArray();
+  void removeUndefinedNodes();
+  };
+
+#endif //__SUBMENU_H
--- vdr-1.7.38.orig/svdrp.c	2013-02-18 11:36:24.557286799 +0100
+++ vdr-1.7.38/svdrp.c	2013-02-18 11:37:34.927402127 +0100
@@ -31,6 +31,9 @@
 #include "cutter.h"
 #include "device.h"
 #include "eitscan.h"
+#ifdef USE_VASARAJANAULOJA
+#include "filetransfer.h"
+#endif /* VASARAJANAULOJA */
 #include "keys.h"
 #include "menu.h"
 #include "plugin.h"
@@ -193,6 +196,13 @@
   "    After a CLRE command, no further EPG processing is done for 10\n"
   "    seconds, so that data sent with subsequent PUTE commands doesn't\n"
   "    interfere with data from the broadcasters.",
+#ifdef USE_VASARAJANAULOJA
+  "CPYR <number> <new name>\n"
+  "    Copy the recording with the given number. Before a recording can be\n"
+  "    copied, an LSTR command must have been executed in order to retrieve\n"
+  "    the recording numbers. The numbers don't change during subsequent CPYR\n"
+  "    commands.",
+#endif /* VASARAJANAULOJA */
   "DELC <number>\n"
   "    Delete channel.",
   "DELR <number>\n"
@@ -258,6 +268,13 @@
   "    used to easily activate or deactivate a timer.",
   "MOVC <number> <to>\n"
   "    Move a channel to a new position.",
+#ifdef USE_VASARAJANAULOJA
+  "MOVR <number> <new name>\n"
+  "    Move the recording with the given number. Before a recording can be\n"
+  "    moved, an LSTR command must have been executed in order to retrieve\n"
+  "    the recording numbers. The numbers don't change during subsequent MOVR\n"
+  "    commands.",
+#endif /* VASARAJANAULOJA */
   "NEWC <settings>\n"
   "    Create a new channel. Settings must be in the same format as returned\n"
   "    by the LSTC command.",
@@ -612,6 +629,34 @@
      }
 }
 
+#ifdef USE_VASARAJANAULOJA
+void cSVDRP::CmdCPYR(const char *Option)
+{
+  if (*Option) {
+     char *tail;
+     int n = strtol(Option, &tail, 10);
+     cRecording *recording = Recordings.Get(n - 1);
+     if (recording && tail && tail != Option) {
+        char *oldName = strdup(recording->Name());
+        tail = skipspace(tail);
+        if (!cFileTransfer::Active()) {
+           if (cFileTransfer::Start(recording, tail, true))
+              Reply(250, "Copying recording \"%s\" to \"%s\"", oldName, tail);
+           else
+              Reply(554, "Can't start file transfer");
+           }
+        else
+           Reply(554, "File transfer already active");
+        free(oldName);
+        }
+     else
+        Reply(550, "Recording \"%d\" not found%s", n, Recordings.Count() ? "" : " (use LSTR before copying)");
+     }
+  else
+     Reply(501, "Invalid Option \"%s\"", Option);
+}
+#endif /* VASARAJANAULOJA */
+
 void cSVDRP::CmdDELC(const char *Option)
 {
   if (*Option) {
@@ -1320,6 +1365,34 @@
      Reply(501, "Missing channel number");
 }
 
+#ifdef USE_VASARAJANAULOJA
+void cSVDRP::CmdMOVR(const char *Option)
+{
+  if (*Option) {
+     char *tail;
+     int n = strtol(Option, &tail, 10);
+     cRecording *recording = Recordings.Get(n - 1);
+     if (recording && tail && tail != Option) {
+        char *oldName = strdup(recording->Name());
+        tail = skipspace(tail);
+        if (!cFileTransfer::Active()) {
+           if (cFileTransfer::Start(recording, tail))
+              Reply(250, "Moving recording \"%s\" to \"%s\"", oldName, tail);
+           else
+              Reply(554, "Can't start file transfer");
+           }
+        else
+           Reply(554, "File transfer already active");
+        free(oldName);
+        }
+     else
+        Reply(550, "Recording \"%d\" not found%s", n, Recordings.Count() ? "" : " (use LSTR before moving)");
+     }
+  else
+     Reply(501, "Invalid Option \"%s\"", Option);
+}
+#endif /* VASARAJANAULOJA */
+
 void cSVDRP::CmdNEWC(const char *Option)
 {
   if (*Option) {
@@ -1644,6 +1717,9 @@
   s = skipspace(s);
   if      (CMD("CHAN"))  CmdCHAN(s);
   else if (CMD("CLRE"))  CmdCLRE(s);
+#ifdef USE_VASARAJANAULOJA
+  else if (CMD("CPYR"))  CmdCPYR(s);
+#endif /* VASARAJANAULOJA */
   else if (CMD("DELC"))  CmdDELC(s);
   else if (CMD("DELR"))  CmdDELR(s);
   else if (CMD("DELT"))  CmdDELT(s);
@@ -1659,6 +1735,9 @@
   else if (CMD("MODC"))  CmdMODC(s);
   else if (CMD("MODT"))  CmdMODT(s);
   else if (CMD("MOVC"))  CmdMOVC(s);
+#ifdef USE_VASARAJANAULOJA
+  else if (CMD("MOVR"))  CmdMOVR(s);
+#endif /* VASARAJANAULOJA */
   else if (CMD("NEWC"))  CmdNEWC(s);
   else if (CMD("NEWT"))  CmdNEWT(s);
   else if (CMD("NEXT"))  CmdNEXT(s);
--- vdr-1.7.38.orig/svdrp.h	2013-02-18 11:36:24.602286233 +0100
+++ vdr-1.7.38/svdrp.h	2013-02-18 11:37:34.928402114 +0100
@@ -56,6 +56,9 @@
   void PrintHelpTopics(const char **hp);
   void CmdCHAN(const char *Option);
   void CmdCLRE(const char *Option);
+#ifdef USE_VASARAJANAULOJA
+  void CmdCPYR(const char *Option);
+#endif /* VASARAJANAULOJA */
   void CmdDELC(const char *Option);
   void CmdDELR(const char *Option);
   void CmdDELT(const char *Option);
@@ -71,6 +74,9 @@
   void CmdMODC(const char *Option);
   void CmdMODT(const char *Option);
   void CmdMOVC(const char *Option);
+#ifdef USE_VASARAJANAULOJA
+  void CmdMOVR(const char *Option);
+#endif /* VASARAJANAULOJA */
   void CmdNEWC(const char *Option);
   void CmdNEWT(const char *Option);
   void CmdNEXT(const char *Option);
--- vdr-1.7.38.orig/timers.c	2013-02-18 11:36:24.553286849 +0100
+++ vdr-1.7.38/timers.c	2013-02-18 11:37:34.929402102 +0100
@@ -33,6 +33,9 @@
   *file = 0;
   aux = NULL;
   event = NULL;
+#ifdef USE_PINPLUGIN
+  fskProtection = 0;
+#endif /* PINPLUGIN */
   if (Instant)
      SetFlags(tfActive | tfInstant);
   channel = Channel ? Channel : Channels.GetByNumber(cDevice::CurrentChannel());
@@ -90,6 +93,9 @@
   *file = 0;
   aux = NULL;
   event = NULL;
+#ifdef USE_PINPLUGIN
+  fskProtection = 0;
+#endif /* PINPLUGIN */
   if (Event->Vps() && Setup.UseVps)
      SetFlags(tfVps);
   channel = Channels.GetByChannelID(Event->ChannelID(), true);
@@ -113,6 +119,9 @@
   const char *Title = Event->Title();
   if (!isempty(Title))
      Utf8Strn0Cpy(file, Event->Title(), sizeof(file));
+#ifdef USE_PINPLUGIN
+  cStatus::MsgTimerCreation(this, Event);
+#endif /* PINPLUGIN */
   SetEvent(Event);
 }
 
@@ -149,6 +158,9 @@
      stop         = Timer.stop;
      priority     = Timer.priority;
      lifetime     = Timer.lifetime;
+#ifdef USE_PINPLUGIN
+     fskProtection = Timer.fskProtection;
+#endif /* PINPLUGIN */
      strncpy(file, Timer.file, sizeof(file));
      free(aux);
      aux = Timer.aux ? strdup(Timer.aux) : NULL;
@@ -331,6 +343,9 @@
         result = false;
         }
      }
+#ifdef USE_PINPLUGIN
+  fskProtection = aux && strstr(aux, "<pin-plugin><protected>yes</protected></pin-plugin>");
+#endif /* PINPLUGIN */
   free(channelbuffer);
   free(daybuffer);
   free(filebuffer);
@@ -689,6 +704,37 @@
   Matches(); // refresh start and end time
 }
 
+#ifdef USE_PINPLUGIN
+void cTimer::SetFskProtection(int aFlag)
+{
+   char* p;
+   char* tmp = 0;
+
+   fskProtection = aFlag;
+
+   if (fskProtection && (!aux || !strstr(aux, "<pin-plugin><protected>yes</protected></pin-plugin>")))
+   {
+      // add protection info to aux
+
+      if (aux) { tmp = strdup(aux); free(aux); }
+      if (asprintf(&aux,"%s<pin-plugin><protected>yes</protected></pin-plugin>", tmp ? tmp : "") < 0 )
+         aux = NULL;
+   }
+   else if (!fskProtection && aux && (p = strstr(aux, "<pin-plugin><protected>yes</protected></pin-plugin>")))
+   {
+      // remove protection info to aux
+
+      if (asprintf(&tmp, "%.*s%s", p-aux, aux, p+strlen("<pin-plugin><protected>yes</protected></pin-plugin>")) >= 0 ) {
+         free(aux);
+         aux = strdup(tmp);
+         }
+   }
+
+   if (tmp)
+      free(tmp);
+}
+#endif /* PINPLUGIN */
+
 // --- cTimers ---------------------------------------------------------------
 
 cTimers Timers;
--- vdr-1.7.38.orig/timers.h	2013-02-18 11:36:24.558286787 +0100
+++ vdr-1.7.38/timers.h	2013-02-18 11:37:34.930402089 +0100
@@ -38,6 +38,9 @@
   int start;
   int stop;
   int priority;
+#ifdef USE_PINPLUGIN
+  int fskProtection;
+#endif /* PINPLUGIN */
   int lifetime;
   mutable char file[NAME_MAX * 2]; // *2 to be able to hold 'title' and 'episode', which can each be up to 255 characters long
   char *aux;
@@ -59,6 +62,9 @@
   int Start(void) const { return start; }
   int Stop(void) const { return stop; }
   int Priority(void) const { return priority; }
+#ifdef USE_PINPLUGIN
+  int FskProtection(void) const { return fskProtection; }
+#endif /* PINPLUGIN */
   int Lifetime(void) const { return lifetime; }
   const char *File(void) const { return file; }
   time_t FirstDay(void) const { return weekdays ? day : 0; }
@@ -95,6 +101,9 @@
   void SetAux(const char *Aux);
   void SetDeferred(int Seconds);
   void SetFlags(uint Flags);
+#ifdef USE_PINPLUGIN
+  void SetFskProtection(int aFlag);
+#endif /* PINPLUGIN */
   void ClrFlags(uint Flags);
   void InvFlags(uint Flags);
   bool HasFlags(uint Flags) const;
--- vdr-1.7.38.orig/vdr.5	2013-02-18 11:36:24.561286749 +0100
+++ vdr-1.7.38/vdr.5	2013-02-18 11:37:34.931402077 +0100
@@ -233,6 +233,12 @@
 
 .B ...:201;2001=deu,2002=eng:...
 
+Manual teletext subtitling pages can be defined separated by a '+' sign.
+The pages (separated by commas) can contain language codes, delimited by a '='
+sign, as in
+
+.B ...:201+150=deu,151=fin;2001,2002:...
+
 .TP
 .B Conditional access
 A hexadecimal integer defining how this channel can be accessed:
--- vdr-1.7.38.orig/vdr.c	2013-02-18 11:36:24.601286246 +0100
+++ vdr-1.7.38/vdr.c	2013-02-18 11:43:11.969164938 +0100
@@ -45,6 +45,9 @@
 #include "dvbdevice.h"
 #include "eitscan.h"
 #include "epg.h"
+#ifdef USE_VASARAJANAULOJA
+#include "filetransfer.h"
+#endif /* VASARAJANAULOJA */
 #include "i18n.h"
 #include "interface.h"
 #include "keys.h"
@@ -65,6 +68,9 @@
 #include "tools.h"
 #include "transfer.h"
 #include "videodir.h"
+#ifdef USE_PINPLUGIN
+#include "status.h"
+#endif /* USE_PINPLUGIN */
 
 #define MINCHANNELWAIT        10 // seconds to wait between failed channel switchings
 #define ACTIVITYTIMEOUT       60 // seconds before starting housekeeping
@@ -671,7 +677,12 @@
   RecordingCommands.Load(AddDirectory(ConfigDirectory, "reccmds.conf"));
   SVDRPhosts.Load(AddDirectory(ConfigDirectory, "svdrphosts.conf"), true);
   Keys.Load(AddDirectory(ConfigDirectory, "remote.conf"));
+#ifdef USE_ALTERNATECHANNEL
+  KeyMacros.Load(AddDirectory(ConfigDirectory, "keymacros.conf"), true) &&
+    Channels.LoadAlternativeChannels(AddDirectory(ConfigDirectory, "channel_alternative.conf"));
+#else
   KeyMacros.Load(AddDirectory(ConfigDirectory, "keymacros.conf"), true);
+#endif /* ALTERNATECHANNEL */
   Folders.Load(AddDirectory(ConfigDirectory, "folders.conf"));
 
   if (!*cFont::GetFontFileName(Setup.FontOsd)) {
@@ -999,6 +1010,9 @@
         cOsdObject *Interact = Menu ? Menu : cControl::Control();
         eKeys key = Interface->GetKey(!Interact || !Interact->NeedsFastResponse());
         if (ISREALKEY(key)) {
+#ifdef USE_PINPLUGIN
+           cStatus::MsgUserAction(key, Interact);
+#endif /* PINPLUGIN */
            EITScanner.Activity();
            // Cancel shutdown countdown:
            if (ShutdownHandler.countdown)
@@ -1071,10 +1085,16 @@
                      cControl::Control()->Hide();
                   cPlugin *plugin = cPluginManager::GetPlugin(PluginName);
                   if (plugin) {
+#ifdef USE_PINPLUGIN
+                  if (!cStatus::MsgPluginProtected(plugin)) {
+#endif /* PINPLUGIN */
                      Menu = plugin->MainMenuAction();
                      if (Menu)
                         Menu->Show();
                      }
+#ifdef USE_PINPLUGIN
+                     }
+#endif /* PINPLUGIN */
                   else
                      esyslog("ERROR: unknown plugin '%s'", PluginName);
                   }
@@ -1263,13 +1283,26 @@
                   Channels.SwitchTo(PreviousChannel[PreviousChannelIndex ^= 1]);
                   break;
                   }
+#ifdef USE_VOLCTRL
+             // Left/Right volume control
+#else
              // Direct Channel Select:
              case k1 ... k9:
              // Left/Right rotates through channel groups:
+#endif // USE_VOLCTRL
              case kLeft|k_Repeat:
              case kLeft:
              case kRight|k_Repeat:
              case kRight:
+#ifdef USE_VOLCTRL
+                  if (Setup.LRVolumeControl && Setup.LRChannelGroups < 2) {
+                    cRemote::Put(NORMALKEY(key) == kLeft ? kVolDn : kVolUp, true);
+                    break;
+                    }
+                  // else fall through
+             // Direct Channel Select:
+             case k1 ... k9:
+#endif // USE_VOLCTRL
              // Previous/Next rotates through channel groups:
              case kPrev|k_Repeat:
              case kPrev:
@@ -1287,11 +1320,17 @@
              // Instant resume of the last viewed recording:
              case kPlay:
                   if (cReplayControl::LastReplayed()) {
+#ifdef USE_PINPLUGIN
+                     if (cStatus::MsgReplayProtected(0, cReplayControl::LastReplayed(), 0, false) == false) {
+#endif /* PINPLUGIN */
                      cControl::Shutdown();
                      cControl::Launch(new cReplayControl);
                      }
                   else
                      DirectMainFunction(osRecordings); // no last viewed recording, so enter the Recordings menu
+#ifdef USE_PINPLUGIN
+                     }
+#endif /* PINPLUGIN */
                   break;
              default:    break;
              }
@@ -1305,6 +1344,14 @@
               else
                  Skins.QueueMessage(mtInfo, tr("Editing process finished"));
               }
+#ifdef USE_VASARAJANAULOJA
+           if (!cFileTransfer::Active() && cFileTransfer::Ended()) {
+               if (cFileTransfer::Error())
+                   Skins.Message(mtError, tr("File transfer failed!"));
+               else
+                   Skins.Message(mtInfo, tr("File transfer finished"));
+           }
+#endif /* VASARAJANAULOJA */
            }
 
         // SIGHUP shall cause a restart:
@@ -1320,7 +1367,11 @@
               ShutdownHandler.countdown.Cancel();
            }
 
+#ifdef USE_VASARAJANAULOJA
+        if ((Now - LastInteract) > ACTIVITYTIMEOUT && !cRecordControls::Active() && !cCutter::Active() && !cFileTransfer::Active() && !Interface->HasSVDRPConnection() && (Now - cRemote::LastActivity()) > ACTIVITYTIMEOUT) {
+#else
         if ((Now - LastInteract) > ACTIVITYTIMEOUT && !cRecordControls::Active() && !cCutter::Active() && !Interface->HasSVDRPConnection() && (Now - cRemote::LastActivity()) > ACTIVITYTIMEOUT) {
+#endif /* VASARAJANAULOJA */
            // Handle housekeeping tasks
 
            // Shutdown:
@@ -1369,6 +1420,9 @@
 
   PluginManager.StopPlugins();
   cRecordControls::Shutdown();
+#ifdef USE_VASARAJANAULOJA
+  cFileTransfer::Stop();
+#endif /* VASARAJANAULOJA */
   cCutter::Stop();
   delete Menu;
   cControl::Shutdown();
--- vdr-1.7.38.orig/vdrttxtsubshooks.c	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/vdrttxtsubshooks.c	2013-02-18 11:37:34.935402026 +0100
@@ -0,0 +1,63 @@
+/*                                                                  -*- c++ -*-
+ * vdr-ttxtsubs - A plugin for the Linux Video Disk Recorder
+ * Copyright (c) 2003 - 2008 Ragnar Sundblad <ragge@nada.kth.se>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
+
+#include "vdrttxtsubshooks.h"
+
+// XXX Really should be a list...
+static cVDRTtxtsubsHookListener *gListener;
+
+// ------ class cVDRTtxtsubsHookProxy ------
+
+class cVDRTtxtsubsHookProxy : public cVDRTtxtsubsHookListener
+{
+ public:
+  virtual void HideOSD(void) { if(gListener) gListener->HideOSD(); };
+  virtual void ShowOSD(void) { if(gListener) gListener->ShowOSD(); };
+  virtual void PlayerTeletextData(uint8_t *p, int length, bool IsPesRecording, const struct tTeletextSubtitlePage teletextSubtitlePages[] = NULL, int pageCount = 0)
+    { if(gListener) gListener->PlayerTeletextData(p, length, IsPesRecording, teletextSubtitlePages, pageCount); };
+  virtual int ManualPageNumber(const cChannel *channel)
+    { if(gListener) return gListener->ManualPageNumber(channel); else return 0; };
+};
+
+
+// ------ class cVDRTtxtsubsHookListener ------
+
+cVDRTtxtsubsHookListener::~cVDRTtxtsubsHookListener()
+{
+  gListener = 0;
+}
+
+void cVDRTtxtsubsHookListener::HookAttach(void)
+{
+  gListener = this;
+  //printf("cVDRTtxtsubsHookListener::HookAttach\n");
+}
+
+static cVDRTtxtsubsHookProxy gProxy;
+
+cVDRTtxtsubsHookListener *cVDRTtxtsubsHookListener::Hook(void)
+{
+  return &gProxy;
+}
+
--- vdr-1.7.38.orig/vdrttxtsubshooks.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.38/vdrttxtsubshooks.h	2013-02-18 11:37:34.935402026 +0100
@@ -0,0 +1,46 @@
+/*                                                                  -*- c++ -*-
+ * vdr-ttxtsubs - A plugin for the Linux Video Disk Recorder
+ * Copyright (c) 2003 - 2008 Ragnar Sundblad <ragge@nada.kth.se>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#ifndef __VDRTTXTSUBSHOOKS_H
+#define __VDRTTXTSUBSHOOKS_H
+
+#define TTXTSUBSVERSNUM 2
+
+class cDevice;
+class cChannel;
+struct tTeletextSubtitlePage;
+
+class cVDRTtxtsubsHookListener {
+ public:
+  cVDRTtxtsubsHookListener(void) {};
+  virtual ~cVDRTtxtsubsHookListener();
+
+  void HookAttach(void);
+
+  virtual void HideOSD(void) {};
+  virtual void ShowOSD(void) {};
+  virtual void PlayerTeletextData(uint8_t *p, int length, bool IsPesRecording = true, const struct tTeletextSubtitlePage teletextSubtitlePages[] = NULL, int pageCount = 0) {};
+  virtual int ManualPageNumber(const cChannel *channel) { return 0; };
+
+  // used by VDR to call hook listeners
+  static cVDRTtxtsubsHookListener *Hook(void);
+};
+
+#endif
--- vdr-1.7.38.orig/videodir.c	2013-02-18 11:36:24.551286875 +0100
+++ vdr-1.7.38/videodir.c	2013-02-18 11:37:34.936402014 +0100
@@ -41,6 +41,11 @@
   bool Next(void);
   void Store(void);
   const char *Adjust(const char *FileName);
+#ifdef USE_DVLVIDPREFER
+  char *GetVidPath(int nVid);
+  bool GetPreferedVideoDir(void);
+  bool IsVidDirOK(int nVid, int *freeMB = NULL);
+#endif /* DVLVIDPREFER */
   };
 
 cVideoDirectory::cVideoDirectory(void)
@@ -122,6 +127,9 @@
   if ((Flags & O_CREAT) != 0) {
      cVideoDirectory Dir;
      if (Dir.IsDistributed()) {
+#ifdef USE_DVLVIDPREFER
+        if (Setup.UseVidPrefer == 0) {
+#endif /* DVLVIDPREFER */
         // Find the directory with the most free space:
         int MaxFree = Dir.FreeMB();
         while (Dir.Next()) {
@@ -131,14 +139,24 @@
                  MaxFree = Free;
                  }
               }
+#ifdef USE_DVLVIDPREFER
+        }
+          else Dir.GetPreferedVideoDir();
+#endif /* DVLVIDPREFER */
         if (Dir.Stored()) {
            ActualFileName = Dir.Adjust(FileName);
            if (!MakeDirs(ActualFileName, false))
               return NULL; // errno has been set by MakeDirs()
+#ifdef USE_DVLVIDPREFER
+           if (strcmp(ActualFileName, FileName) != 0) {
+#endif /* DVLVIDPREFER */
            if (symlink(ActualFileName, FileName) < 0) {
               LOG_ERROR_STR(FileName);
               return NULL;
               }
+#ifdef USE_DVLVIDPREFER
+              }
+#endif /* DVLVIDPREFER */
            ActualFileName = strdup(ActualFileName); // must survive Dir!
            }
         }
@@ -229,6 +247,24 @@
   return NULL;
 }
 
+#ifdef USE_VASARAJANAULOJA
+cString NewVideoFileName(const char *FileName, const char *NewDirName)
+{
+    char *NewDir = ExchangeChars(strdup(NewDirName), true);
+    if (NewDir) {
+        const char *p = FileName + strlen(FileName); // p points at the terminating 0
+        while (p-- > FileName) {
+            if (*p == '/')
+                break;
+        }
+        cString NewName = cString::sprintf("%s/%s%s", VideoDirectory, NewDir, p);
+        free(NewDir);
+        return NewName;
+    }
+    return NULL;
+}
+#endif /* VASARAJANAULOJA */
+
 void RemoveEmptyVideoDirectories(const char *IgnoreFiles[])
 {
   cVideoDirectory Dir;
@@ -237,6 +273,129 @@
      } while (Dir.Next());
 }
 
+#ifdef USE_DVLVIDPREFER
+// returns path to nVid'th video directory or NULL if not existing
+char *cVideoDirectory::GetVidPath(int nVid)
+{
+  char *b = strdup(VideoDirectory);
+  int l = strlen(b), di, n;
+
+  while (l-- > 0 && isdigit(b[ l ]));
+
+  l++;
+  di = strlen(b) - l;
+
+  // di == number of digits
+  n = atoi(&b[ l ]);
+  if (n != 0)
+     return NULL;
+
+  // add requested number to dir name
+  sprintf(&b[ l ], "%0*d", di, nVid);
+
+  if (DirectoryOk(b) == true)
+     return b;
+
+  free(b);
+  return NULL;
+}
+
+// checks if a video dir is 'valid'
+bool cVideoDirectory::IsVidDirOK(int nVid, int *freeMB)
+{
+  char *dn;
+  int fMB;
+
+  if (nVid >= Setup.nVidPrefer)
+     return false;
+
+  if (Setup.VidPreferSize[ nVid ] == -1)
+     return false;
+
+  dn = GetVidPath(nVid);
+  if (dn == NULL)
+     return false;
+
+  fMB = FreeDiskSpaceMB(dn, NULL);
+  if (freeMB != NULL)
+     *freeMB = fMB;
+
+  free(dn);
+
+  if (Setup.VidPreferSize[ nVid ] >= fMB)
+     return false;
+  return true;
+}
+
+
+// calculates which video dir to use
+bool cVideoDirectory::GetPreferedVideoDir(void)
+{
+  cVideoDirectory d;
+  int nDirs = 1,
+  vidUse = Setup.nVidPrefer;
+  int i, top, topFree, x;
+
+  if (name == NULL)
+     return(false);
+
+  // count available video dirs
+  while (d.Next() == true)
+        nDirs++;
+
+  if (vidUse > nDirs)
+     vidUse = nDirs;
+
+  // check for prefered video dir
+  for (i = 0, top = -1, topFree = 0; i < vidUse; i++) {
+      if (IsVidDirOK(i, &x) == true) {
+         if (top == -1) {
+            // nothing set yet, use first 'ok' dir
+            top = i;
+            topFree = x;
+            }
+         else {
+            // check if we got a higher priority
+            if (Setup.VidPreferPrio[ i ] >= Setup.VidPreferPrio[ top ]) {
+               top = i;
+               topFree = x;
+               }
+            // check if we got same priority but more space
+            else if (Setup.VidPreferPrio[ i ] == Setup.VidPreferPrio[ top ] && x >= topFree) {
+               top = i;
+               topFree = x;
+               }
+            }
+         }
+      }
+
+  if (top == -1) {
+     isyslog("VidPrefer: no prefered video directory could be determined!");
+
+     // something went wrong here...
+     // let VDR determine the video directory
+     int MaxFree = FreeMB();
+
+     while (Next()) {
+           int Free = FreeDiskSpaceMB(Name());
+
+           if (Free > MaxFree) {
+              Store();
+              MaxFree = Free;
+              }
+           }
+     }
+  else {
+     isyslog("VidPrefer: prefered video directory '%d' set.", top);
+     if (stored != NULL)
+        free(stored);
+     stored = GetVidPath(top);
+     }
+
+  return true;
+}
+#endif /* DVLVIDPREFER */
+
 bool IsOnVideoDirectoryFileSystem(const char *FileName)
 {
   cVideoDirectory Dir;
--- vdr-1.7.38.orig/videodir.h	2013-02-18 11:36:24.590286384 +0100
+++ vdr-1.7.38/videodir.h	2013-02-18 11:37:34.937402001 +0100
@@ -23,6 +23,9 @@
 bool VideoFileSpaceAvailable(int SizeMB);
 int VideoDiskSpace(int *FreeMB = NULL, int *UsedMB = NULL); // returns the used disk space in percent
 cString PrefixVideoFileName(const char *FileName, char Prefix);
+#ifdef USE_VASARAJANAULOJA
+cString NewVideoFileName(const char *FileName, const char *NewDirName);
+#endif /* VASARAJANAULOJA */
 void RemoveEmptyVideoDirectories(const char *IgnoreFiles[] = NULL);
 bool IsOnVideoDirectoryFileSystem(const char *FileName);
 
