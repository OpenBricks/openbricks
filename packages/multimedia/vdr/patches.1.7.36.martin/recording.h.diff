--- vdr-1.7.36.orig/recording.h	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.36/recording.h	2013-01-26 15:56:02.000000000 +0100
@@ -68,6 +68,9 @@
   const cEvent *GetEvent(void) const { return event; }
   const char *Title(void) const { return event->Title(); }
   const char *ShortText(void) const { return event->ShortText(); }
+#ifdef USE_GRAPHTFT
+  tEventID EventID(void) const { return event->EventID(); }
+#endif /* GRAPHTFT */
   const char *Description(void) const { return event->Description(); }
   const cComponents *Components(void) const { return event->Components(); }
   const char *Aux(void) const { return aux; }
@@ -118,6 +121,9 @@
   const char *Title(char Delimiter = ' ', bool NewIndicator = false, int Level = -1) const;
   const cRecordingInfo *Info(void) const { return info; }
   const char *PrefixFileName(char Prefix);
+#ifdef USE_VASARAJANAULOJA
+  const char *UpdateFileName(const char *FileName);
+#endif /* VASARAJANAULOJA */
   int HierarchyLevels(void) const;
   void ResetResume(void) const;
   double FramesPerSecond(void) const { return framesPerSecond; }
@@ -129,7 +135,11 @@
   int FileSizeMB(void) const;
        ///< Returns the total file size of this recording (in MB), or -1 if the file
        ///< size is unknown.
+#ifdef USE_VASARAJANAULOJA
+  bool IsNew(void) const { return GetResume() < 0; }
+#else
   bool IsNew(void) const { return GetResume() <= 0; }
+#endif /* VASARAJANAULOJA */
   bool IsEdited(void) const;
   bool IsPesRecording(void) const { return isPesRecording; }
   bool IsOnVideoDirectoryFileSystem(void) const;
@@ -189,7 +199,11 @@
   void ResetResume(const char *ResumeFileName = NULL);
   cRecording *GetByName(const char *FileName);
   void AddByName(const char *FileName, bool TriggerUpdate = true);
+#ifdef USE_VASARAJANAULOJA
+  void DelByName(const char *FileName, bool RemoveRecording = true);
+#else
   void DelByName(const char *FileName);
+#endif /* VASARAJANAULOJA */
   void UpdateByName(const char *FileName);
   int TotalFileSizeMB(void);
   double MBperMinute(void);
