--- vdr-1.7.36.orig/dvbdevice.c	2013-01-26 15:55:50.000000000 +0100
+++ vdr-1.7.36/dvbdevice.c	2013-01-26 15:56:02.000000000 +0100
@@ -287,6 +287,9 @@
 private:
   static cMutex bondMutex;
   enum eTunerStatus { tsIdle, tsSet, tsTuned, tsLocked };
+#ifdef USE_ROTOR
+  bool SendDiseqc;
+#endif /* ROTOR */
   int frontendType;
   const cDvbDevice *device;
   int fd_frontend;
@@ -303,6 +306,9 @@
   cMutex mutex;
   cCondVar locked;
   cCondVar newSet;
+#ifdef USE_ROTOR
+  dvb_diseqc_master_cmd diseqc_cmd;
+#endif /* ROTOR */
   cDvbTuner *bondedTuner;
   bool bondedMaster;
   bool SetFrontendType(const cChannel *Channel);
@@ -325,6 +331,9 @@
   uint32_t SubsystemId(void) const { return subsystemId; }
   bool IsTunedTo(const cChannel *Channel) const;
   void SetChannel(const cChannel *Channel);
+#ifdef USE_ROTOR
+  bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd);
+#endif /* ROTOR */
   bool Locked(int TimeoutMs = 0);
   int GetSignalStrength(void) const;
   int GetSignalQuality(void) const;
@@ -337,6 +346,9 @@
   frontendType = SYS_UNDEFINED;
   device = Device;
   fd_frontend = Fd_Frontend;
+#ifdef USE_ROTOR
+  SendDiseqc=false;
+#endif /* ROTOR */
   adapter = Adapter;
   frontend = Frontend;
   subsystemId = cDvbDeviceProbe::GetSubsystemId(adapter, frontend);
@@ -864,6 +876,12 @@
            Status = NewStatus;
         cMutexLock MutexLock(&mutex);
         int WaitTime = 1000;
+#ifdef USE_ROTOR
+        if (SendDiseqc) {
+           CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_MASTER_CMD, &diseqc_cmd));
+           SendDiseqc=false;
+           }
+#endif /* ROTOR */
         switch (tunerStatus) {
           case tsIdle:
                break;
@@ -914,6 +932,19 @@
         }
 }
 
+#ifdef USE_ROTOR
+bool cDvbTuner::SendDiseqcCmd(dvb_diseqc_master_cmd cmd)
+{
+  cMutexLock MutexLock(&mutex);
+  if (SendDiseqc)
+    return false;
+  diseqc_cmd=cmd;
+  SendDiseqc=true;
+  newSet.Broadcast();
+  return true;
+}
+#endif /* ROTOR */
+
 // --- cDvbSourceParam -------------------------------------------------------
 
 class cDvbSourceParam : public cSourceParam {
@@ -1458,6 +1489,16 @@
   bool needsDetachReceivers = false;
   needsDetachBondedReceivers = false;
 
+#ifdef USE_CHANNELBIND
+  if (Setup.ChannelBindingByRid && Channel->Rid()) {
+    if (0 == ((unsigned) Channel->Rid() & (1<<(unsigned) CardIndex())) ) {
+      #if 0
+      printf("device %d doesn't provide channel %s", CardIndex(), *Channel->ToText());
+      #endif
+      return false;
+      }
+    }
+#endif /* CHANNELBIND */
   if (dvbTuner && ProvidesTransponder(Channel)) {
      result = hasPriority;
      if (Priority > IDLEPRIORITY) {
@@ -1546,6 +1587,16 @@
   return dvbTuner ? dvbTuner->Locked(TimeoutMs) : false;
 }
 
+#ifdef USE_ROTOR
+bool cDvbDevice::SendDiseqcCmd(dvb_diseqc_master_cmd cmd)
+{
+  if (ProvidesDeliverySystem(SYS_DVBS) || ProvidesDeliverySystem(SYS_DVBS2))
+     return dvbTuner->SendDiseqcCmd(cmd);
+  else
+     return false;
+}
+#endif /* ROTOR */
+
 void cDvbDevice::SetTransferModeForDolbyDigital(int Mode)
 {
   setTransferModeForDolbyDigital = Mode;
