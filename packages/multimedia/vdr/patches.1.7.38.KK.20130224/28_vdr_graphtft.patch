diff -ur vdr-1.7.37/menu.c vdr-1.7.37/menue.c
--- vdr-1.7.37/menu.c        2012-12-07 14:48:15.000000000 +0100
+++ vdr-1.7.37/menu.c      2012-12-10 10:21:12.498031920 +0100
@@ -171,6 +171,7 @@
 public:
   cMenuEditChannel(cChannel *Channel, bool New = false);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuEditChannel"; } 
   };

 cMenuEditChannel::cMenuEditChannel(cChannel *Channel, bool New)
@@ -364,6 +365,7 @@
   cMenuChannels(void);
   ~cMenuChannels();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuChannels"; }
   };

 cMenuChannels::cMenuChannels(void)
@@ -1102,6 +1104,7 @@
   cMenuTimers(void);
   virtual ~cMenuTimers();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuTimers"; }
   };

 cMenuTimers::cMenuTimers(void)
@@ -1264,6 +1267,7 @@
 {
   cOsdMenu::Display();
   DisplayMenu()->SetEvent(event);
+  cStatus::MsgOsdSetEvent(event);
   if (event->Description())
      cStatus::MsgOsdTextItem(event->Description());
 }
@@ -1398,6 +1402,8 @@
   static void SetCurrentChannel(int ChannelNr) { currentChannel = ChannelNr; }
   static const cEvent *ScheduleEvent(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return now ? "MenuWhatsOnNow" : "MenuWhatsOnNext"; }
+  virtual void Display(void);
   };

 int cMenuWhatsOn::currentChannel = 0;
@@ -1426,6 +1432,18 @@
   SetHelpKeys();
 }

+void cMenuWhatsOn::Display(void)
+{
+   cOsdMenu::Display();
+   
+   if (Count() > 0) {
+      int ni = 0;
+      for (cOsdItem *item = First(); item; item = Next(item)) {
+         cStatus::MsgOsdEventItem(((cMenuScheduleItem*)item)->event, item->Text(), ni++, Count());
+      }
+   }
+}
+
 bool cMenuWhatsOn::Update(void)
 {
   bool result = false;
@@ -1566,6 +1584,8 @@
   cMenuSchedule(void);
   virtual ~cMenuSchedule();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSchedule"; }
+  virtual void Display(void);
   };

 cMenuSchedule::cMenuSchedule(void)
@@ -1592,6 +1612,18 @@
   cMenuWhatsOn::ScheduleEvent(); // makes sure any posted data is cleared
 }

+void cMenuSchedule::Display(void)
+{
+   cOsdMenu::Display();
+   
+   if (Count() > 0) {
+      int ni = 0;
+      for (cOsdItem *item = First(); item; item = Next(item)) {
+         cStatus::MsgOsdEventItem(((cMenuScheduleItem*)item)->event, item->Text(), ni++, Count());
+      }
+   }
+}
+
 void cMenuSchedule::PrepareScheduleAllThis(const cEvent *Event, const cChannel *Channel)
 {
   Clear();
@@ -1956,6 +1988,7 @@
   cMenuCam(cCamSlot *CamSlot);
   virtual ~cMenuCam();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuCam"; }
   };

 cMenuCam::cMenuCam(cCamSlot *CamSlot)
@@ -2143,6 +2176,7 @@
   cMenuRecording(const cRecording *Recording, bool WithButtons = false);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuRecording"; }
 };

 cMenuRecording::cMenuRecording(const cRecording *Recording, bool WithButtons)
@@ -2159,6 +2193,7 @@
 {
   cOsdMenu::Display();
   DisplayMenu()->SetRecording(recording);
+  cStatus::MsgOsdSetRecording(recording);
   if (recording->Info()->Description())
      cStatus::MsgOsdTextItem(recording->Info()->Description());
 }
@@ -2742,6 +2777,7 @@
   cMenuSetupOSD(void);
   virtual ~cMenuSetupOSD();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetupOsd"; }
   };

 cMenuSetupOSD::cMenuSetupOSD(void)
@@ -2893,6 +2929,7 @@
 public:
   cMenuSetupEPG(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetupEpg"; }
   };

 cMenuSetupEPG::cMenuSetupEPG(void)
@@ -2990,6 +3027,7 @@
 public:
   cMenuSetupDVB(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetupDvb"; }
   };

 cMenuSetupDVB::cMenuSetupDVB(void)
@@ -3135,6 +3173,7 @@
 public:
   cMenuSetupLNB(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetupLnb"; }
   };

 cMenuSetupLNB::cMenuSetupLNB(void)
@@ -3240,6 +3279,7 @@
 public:
   cMenuSetupCAM(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetupCam"; }
   };

 cMenuSetupCAM::cMenuSetupCAM(void)
@@ -3427,6 +3467,7 @@
 public:
   cMenuSetupPlugins(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetupPlugins"; }
   };

 cMenuSetupPlugins::cMenuSetupPlugins(void)
@@ -3482,6 +3523,7 @@
 public:
   cMenuSetup(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuSetup"; }
   };

 cMenuSetup::cMenuSetup(void)
diff -Nru vdr-1.7.37-vanilla/menu.h vdr-1.7.37/menu.h
--- vdr-1.7.37-vanilla/menu.h	2013-02-09 18:10:29.612000000 +0200
+++ vdr-1.7.37/menu.h	2013-02-09 23:55:23.264000000 +0200
@@ -30,6 +30,7 @@
   void SetText(const char *Text);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuText"; }
   };

 class cMenuFolder : public cOsdMenu {
@@ -86,6 +87,7 @@
   cMenuEditTimer(cTimer *Timer, bool New = false);
   virtual ~cMenuEditTimer();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuTimerEdit"; }
   };

 class cMenuEvent : public cOsdMenu {
@@ -95,6 +97,7 @@
   cMenuEvent(const cEvent *Event, bool CanSwitch = false, bool Buttons = false);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuEvent"; }
   };

 class cMenuMain : public cOsdMenu {
@@ -114,6 +117,7 @@
   cMenuMain(eOSState State = osUnknown);
   virtual eOSState ProcessKey(eKeys Key);
   static cOsdObject *PluginOsdObject(void);
+  virtual const char* MenuKind() { return "MenuMain"; }
   };

 class cDisplayChannel : public cOsdObject {
@@ -217,6 +221,7 @@
   cMenuRecordings(const char *Base = NULL, int Level = 0, bool OpenSubMenus = false);
   ~cMenuRecordings();
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuRecordings"; }
   };

 class cRecordControl {
diff -Nru vdr-1.7.37-vanilla/menuitems.h vdr-1.7.37/menuitems.h
--- vdr-1.7.37-vanilla/menuitems.h	2013-02-09 18:10:29.612000000 +0200
+++ vdr-1.7.37/menuitems.h	2013-02-09 23:55:23.264000000 +0200
@@ -209,6 +209,7 @@
   cMenuSetupPage(void);
   virtual eOSState ProcessKey(eKeys Key);
   void SetPlugin(cPlugin *Plugin);
+  const char* MenuKind() { return "MenuSetupPage"; }
   };

 #endif //__MENUITEMS_H
diff -Naur vdr-1.7.37.orig/osdbase.c vdr-1.7.37/osdbase.c
--- vdr-1.7.37.orig/osdbase.c	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.37/osdbase.c	2013-01-26 16:42:49.000000000 +0100
@@ -118,6 +118,7 @@
   free(status);
   displayMenu->Clear();
   cStatus::MsgOsdClear();
+  cStatus::MsgOsdMenuDestroy();
   if (!--displayMenuCount)
      DELETENULL(displayMenu);
 }
@@ -235,6 +236,7 @@
   displayMenu->SetMessage(mtStatus, NULL);
   displayMenu->Clear();
   cStatus::MsgOsdClear();
+  cStatus::MsgOsdMenuDisplay(MenuKind());
   if (menuCategory != displayMenu->MenuCategory())
      displayMenu->SetMenuCategory(menuCategory);
   displayMenuItems = displayMenu->MaxItems();
diff -Naur vdr-1.7.37.orig/osdbase.h vdr-1.7.37/osdbase.h
--- vdr-1.7.37.orig/osdbase.h	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.37/osdbase.h	2013-01-26 16:42:49.000000000 +0100
@@ -144,6 +144,7 @@
   void Ins(cOsdItem *Item, bool Current = false, cOsdItem *Before = NULL);
   virtual void Display(void);
   virtual eOSState ProcessKey(eKeys Key);
+  virtual const char* MenuKind() { return "MenuUnknown"; }
   };

 #endif //__OSDBASE_H
diff -Nru vdr-1.7.37-vanilla/recording.h vdr-1.7.37/recording.h
--- vdr-1.7.37-vanilla/recording.h	2013-02-09 18:10:29.612000000 +0200
+++ vdr-1.7.37/recording.h	2013-02-09 23:55:23.268000000 +0200
@@ -68,6 +68,7 @@
   const cEvent *GetEvent(void) const { return event; }
   const char *Title(void) const { return event->Title(); }
   const char *ShortText(void) const { return event->ShortText(); }
+  tEventID EventID(void) const { return event->EventID(); }
   const char *Description(void) const { return event->Description(); }
   const cComponents *Components(void) const { return event->Components(); }
   const char *Aux(void) const { return aux; }
diff -ur vdr-1.7.37/status.c vdr-1.7.37/status.c
--- vdr-1.7.37/status.c      2012-03-07 15:17:24.000000000 +0100
+++ vdr-1.7.37/status.c    2012-12-10 10:14:03.114016736 +0100
@@ -176,3 +176,32 @@
   for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
       sm->OsdProgramme(PresentTime, PresentTitle, PresentSubtitle, FollowingTime, FollowingTitle, FollowingSubtitle);
 }
+
+void cStatus::MsgOsdSetEvent(const cEvent* event)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdSetEvent(event);
+}
+
+void cStatus::MsgOsdSetRecording(const cRecording* recording)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdSetRecording(recording);
+}
+
+void cStatus::MsgOsdMenuDisplay(const char* kind)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdMenuDisplay(kind);
+}
+
+void cStatus::MsgOsdMenuDestroy()
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+      sm->OsdMenuDestroy();
+}
+void cStatus::MsgOsdEventItem(const cEvent* Event, const char *Text, int Index, int Count)
+{
+  for (cStatus *sm = statusMonitors.First(); sm; sm = statusMonitors.Next(sm))
+     sm->OsdEventItem(Event, Text, Index, Count);
+}
diff -ur vdr-1.7.37/status.h vdr-1.7.37/status.h
--- vdr-1.7.37/status.h      2012-03-07 15:17:24.000000000 +0100
+++ vdr-1.7.37/status.h    2012-12-10 10:14:03.114016736 +0100
@@ -82,6 +82,16 @@
                // The OSD displays the single line Text with the current channel information.
   virtual void OsdProgramme(time_t PresentTime, const char *PresentTitle, const char *PresentSubtitle, time_t FollowingTime, const char *FollowingTitle, const char *FollowingSubtitle) {}
                // The OSD displays the given programme information.
+  virtual void OsdSetRecording(const cRecording* recording) {}
+               // The OSD displays the recording information.
+  virtual void OsdSetEvent(const cEvent* event) {}
+               // The OSD displays the event information.
+  virtual void OsdMenuDisplay(const char* kind) {}
+               // report menu creation
+  virtual void OsdMenuDestroy() {}
+               // report menu destruvtion
+  virtual void OsdEventItem(const cEvent* Event, const char *Text, int Index, int Count) {}
+               // The OSD displays the given single line Event as menu item at Index.
   virtual bool ChannelProtected(const cDevice *Device, const cChannel* Channel)  { return false; }         // PIN PATCH
                // Checks if a channel is protected.
   virtual bool ReplayProtected(const cRecording* Recording, const char* Name,
@@ -121,6 +131,11 @@
   static void MsgOsdTextItem(const char *Text,  bool Scroll = false);
   static void MsgOsdChannel(const char *Text);
   static void MsgOsdProgramme(time_t PresentTime, const char *PresentTitle, const char *PresentSubtitle, time_t FollowingTime, const char *FollowingTitle, const char *FollowingSubtitle);
+  static void MsgOsdSetEvent(const cEvent* event);
+  static void MsgOsdSetRecording(const cRecording* recording);
+  static void MsgOsdMenuDisplay(const char* kind);
+  static void MsgOsdMenuDestroy();
+  static void MsgOsdEventItem(const cEvent* Event, const char *Text, int Index, int Count);
   static bool MsgChannelProtected(const cDevice* Device, const cChannel* Channel);                 // PIN PATCH
   static bool MsgReplayProtected(const cRecording* Recording, const char* Name,
                                  const char* Base, bool isDirectory, int menuView = false);        // PIN PATCH

