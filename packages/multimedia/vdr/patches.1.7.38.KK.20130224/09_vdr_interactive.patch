diff -ur vdr-1.7.37-orig/shutdown.c vdr-1.7.37-inactive/shutdown.c
--- vdr-1.7.37-orig/shutdown.c	2008-02-24 11:29:00.000000000 +0100
+++ vdr-1.7.37-inactive/shutdown.c	2013-02-09 19:04:40.000000000 +0100
@@ -117,7 +117,7 @@
   else {
      // Set inactive from now on
      dsyslog("scheduled wakeup time in %ld minutes, assuming automatic start of VDR", Delta / 60);
-     SetUserInactive();
+     SetUserInactiveTimeout(-3, true);
      }
 }
 
@@ -147,9 +147,14 @@
      activeTimeout = 0;
      return;
      }
-  if (Seconds < 0)
-     Seconds = Setup.MinUserInactivity * 60;
-  activeTimeout = time(NULL) + Seconds;
+  if (Seconds >= 0)
+     activeTimeout = time(NULL) + Seconds;
+  else if (Seconds == -1) 
+     activeTimeout = time(NULL) + Setup.MinUserInactivity * 60;
+  else if (Seconds == -2)
+     activeTimeout = 0;
+  else if (Seconds == -3)
+     activeTimeout = 1;
 }
 
 bool cShutdownHandler::ConfirmShutdown(bool Interactive)
diff -ur vdr-1.7.37-orig/shutdown.h vdr-1.7.37-inactive/shutdown.h
--- vdr-1.7.37-orig/shutdown.h	2007-02-24 18:23:59.000000000 +0100
+++ vdr-1.7.37-inactive/shutdown.h	2013-02-09 19:09:41.000000000 +0100
@@ -38,7 +38,7 @@
 class cShutdownHandler {
 private:
   time_t activeTimeout;
-       ///< Time when VDR will become non-interactive. 0 means never.
+       ///< Time when VDR will become non-interactive. 0 means never, 1 means unknown time ago
   time_t retry;
        ///< Time for retrying the shutdown.
   char *shutdownCommand;
@@ -73,15 +73,18 @@
        ///< Check whether VDR is in interactive mode or non-interactive mode (waiting for shutdown).
        ///< AtTime checks whether VDR will probably be inactive at that time.
   time_t GetUserInactiveTime(void) { return activeTimeout; }
-       ///< Time when user will become non-inactive, or 0 if never.
+       ///< Time when user will become non-inactive, or 0 if never, 1 if a long time ago
   void SetUserInactiveTimeout(int Seconds = -1, bool Force = false);
-       ///< Set the time when VDR will switch into non-interactive mode or power down.
-       ///< -1 means Setup.MinUserInactivity in the future.
-       ///< Otherwise, seconds in the future.
-       ///< If MinUserInactivity = 0 and Force = false, Seconds is ignored and VDR will
-       ///< stay interactive forever.
+       ///< Set the time in the future when VDR will switch into non-interactive mode or power down.
+       ///< Seconds >= 0 means as many seconds in the future.
+       ///< Seconds = -1 means Setup.MinUserInactivity in the future.
+       ///< Seconds = -2 means never.
+       ///< Seconds = -3 means a long, unknown time ago.
+       ///< Setup.MinUserInactivity = 0 will overrule this, unless Force = true is given.
+       ///< If Setup.MinUserInactivity = 0 and Force = false, Seconds is ignored and VDR will
+       ///< stay interactive forever (like Seconds = -2).
   void SetUserInactive(void) { SetUserInactiveTimeout(0, true); }
-       ///< Set VDR manually into non-interactive mode.
+       ///< Set VDR manually into non-interactive mode from now on.
   bool Retry(time_t AtTime = 0) { return retry <= (AtTime ? AtTime : time(NULL)); }
        ///< Check whether its time to re-try the shutdown.
        ///< AtTime checks whether VDR will probably be inactive at that time.
