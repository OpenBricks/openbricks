diff -urN vdr-1.7.38/config.c vdr-1.7.38-ddepg/config.c
--- vdr-1.7.38/config.c	2013-02-22 12:49:02.343664590 +0100
+++ vdr-1.7.38-ddepg/config.c	2013-02-22 12:41:19.327656642 +0100
@@ -408,6 +408,12 @@
   SubtitleFgTransparency = 0;
   SubtitleBgTransparency = 0;
   EPGLanguages[0] = -1;
+#ifdef USE_DDEPGENTRY
+  DoubleEpgTimeDelta = 15;
+  DoubleEpgAction = 0;
+  MixEpgAction = 0;
+  DisableVPS = 0;
+#endif /* DDEPGENTRY */
   EPGScanTimeout = 5;
   EPGBugfixLevel = 3;
   EPGLinger = 0;
@@ -652,6 +658,12 @@
   else if (!strcasecmp(Name, "SubtitleFgTransparency")) SubtitleFgTransparency = atoi(Value);
   else if (!strcasecmp(Name, "SubtitleBgTransparency")) SubtitleBgTransparency = atoi(Value);
   else if (!strcasecmp(Name, "EPGLanguages"))        return ParseLanguages(Value, EPGLanguages);
+#ifdef USE_DDEPGENTRY
+  else if (!strcasecmp(Name, "DoubleEpgTimeDelta"))  DoubleEpgTimeDelta = atoi(Value);
+  else if (!strcasecmp(Name, "DoubleEpgAction"))     DoubleEpgAction    = atoi(Value);
+  else if (!strcasecmp(Name, "MixEpgAction"))        MixEpgAction       = atoi(Value);
+  else if (!strcasecmp(Name, "DisableVPS"))          DisableVPS         = atoi(Value);
+#endif /* DDEPGENTRY */
   else if (!strcasecmp(Name, "EPGScanTimeout"))      EPGScanTimeout     = atoi(Value);
   else if (!strcasecmp(Name, "EPGBugfixLevel"))      EPGBugfixLevel     = atoi(Value);
   else if (!strcasecmp(Name, "EPGLinger"))           EPGLinger          = atoi(Value);
@@ -778,6 +790,12 @@
   Store("SubtitleFgTransparency", SubtitleFgTransparency);
   Store("SubtitleBgTransparency", SubtitleBgTransparency);
   StoreLanguages("EPGLanguages", EPGLanguages);
+#ifdef USE_DDEPGENTRY
+  Store("DoubleEpgTimeDelta", DoubleEpgTimeDelta);
+  Store("DoubleEpgAction",    DoubleEpgAction);
+  Store("MixEpgAction",       MixEpgAction);
+  Store("DisableVPS",         DisableVPS);
+#endif /* DDEPGENTRY */
   Store("EPGScanTimeout",     EPGScanTimeout);
   Store("EPGBugfixLevel",     EPGBugfixLevel);
   Store("EPGLinger",          EPGLinger);
diff -urN vdr-1.7.38/config.h vdr-1.7.38-ddepg/config.h
--- vdr-1.7.38/config.h	2013-02-22 12:49:02.363664591 +0100
+++ vdr-1.7.38-ddepg/config.h	2013-02-22 12:42:03.839657406 +0100
@@ -294,6 +294,12 @@
   int SubtitleOffset;
   int SubtitleFgTransparency, SubtitleBgTransparency;
   int EPGLanguages[I18N_MAX_LANGUAGES + 1];
+#ifdef USE_DDEPGENTRY
+  int DoubleEpgTimeDelta;
+  int DoubleEpgAction;
+  int MixEpgAction;
+  int DisableVPS;
+#endif /* DDEPPGENTRY */
   int EPGScanTimeout;
   int EPGBugfixLevel;
   int EPGLinger;
diff -urN vdr-1.7.38/eit.c vdr-1.7.38-ddepg/eit.c
--- vdr-1.7.38/eit.c	2013-02-22 12:49:02.343664590 +0100
+++ vdr-1.7.38-ddepg/eit.c	2013-02-22 12:46:00.431661468 +0100
@@ -100,7 +100,87 @@
          // each of them :-( So if one DVB card is tuned to the Premiere transponder, while an other one is tuned
          // to the Sat.1/Pro7 transponder, events will keep toggling because of the bogus version numbers.
          else if (Tid == TableID && pEvent->Version() == getVersionNumber())
+#ifdef USE_DDEPGENTRY
+            {
+               if(Setup.MixEpgAction == 0)
             continue;
+
+               //printf("in");
+               //printf("%s", pEvent->GetTimeString());
+               // to use the info of the original epg, update the extern one,
+               // if it has less info
+               SI::Descriptor *d;
+               SI::ExtendedEventDescriptors *ExtendedEventDescriptors = NULL;
+               //SI::ExtendedEventDescriptor *eed = NULL;
+               SI::ShortEventDescriptor *ShortEventDescriptor = NULL;
+               //SI::ShortEventDescriptor *sed = NULL;
+               //SI::TimeShiftedEventDescriptor *tsed = NULL;
+               //cLinkChannels *LinkChannels = NULL;
+               for (SI::Loop::Iterator it2; (d = SiEitEvent.eventDescriptors.getNext(it2));)
+               {
+                  if(d->getDescriptorTag() == SI::ShortEventDescriptorTag)
+                  {
+                     int LanguagePreferenceShort = -1;
+                     SI::ShortEventDescriptor *sed = (SI::ShortEventDescriptor *)d;
+                     if (I18nIsPreferredLanguage(Setup.EPGLanguages, sed->languageCode, LanguagePreferenceShort) || !ShortEventDescriptor)
+                     {
+                        delete ShortEventDescriptor;
+                        ShortEventDescriptor = sed;
+                        d = NULL; // so that it is not deleted
+                     }
+                  }
+                  else if(d->getDescriptorTag() == SI::ExtendedEventDescriptorTag)
+                  {
+                     int LanguagePreferenceExt = -1;
+                     bool UseExtendedEventDescriptor = false;
+                     SI::ExtendedEventDescriptor *eed = (SI::ExtendedEventDescriptor *)d;
+                     if (I18nIsPreferredLanguage(Setup.EPGLanguages, eed->languageCode, LanguagePreferenceExt) || !ExtendedEventDescriptors)
+                     {
+                        delete ExtendedEventDescriptors;
+                        ExtendedEventDescriptors = new SI::ExtendedEventDescriptors;
+                        UseExtendedEventDescriptor = true;
+                     }
+                     if (UseExtendedEventDescriptor)
+                     {
+                        ExtendedEventDescriptors->Add(eed);
+                        d = NULL; // so that it is not deleted
+                     }
+                     if (eed->getDescriptorNumber() == eed->getLastDescriptorNumber())
+                        UseExtendedEventDescriptor = false;
+                  }
+                  delete d;
+               }
+               if(pEvent)
+               {
+
+                  if(ShortEventDescriptor)
+                  {
+                     char buffer[256];
+                     if(ShortEventDescriptor->text.getText(buffer, sizeof(buffer)) && pEvent->ShortText() && (strlen(ShortEventDescriptor->text.getText(buffer, sizeof(buffer))) > strlen(pEvent->ShortText())))
+                     {
+                        pEvent->SetShortText(ShortEventDescriptor->text.getText(buffer, sizeof(buffer)));
+                        pEvent->FixEpgBugs();
+                     }
+                  }
+                  if(ExtendedEventDescriptors)
+                  {
+                     char buffer[ExtendedEventDescriptors->getMaximumTextLength(": ") + 1];
+                     //pEvent->SetDescription(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": "));
+
+                     if(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": ") && pEvent->Description() && (strlen(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": ")) > strlen(pEvent->Description())))
+                     {
+                        pEvent->SetDescription(ExtendedEventDescriptors->getText(buffer, sizeof(buffer), ": "));
+                        pEvent->FixEpgBugs();
+                     }
+                  }
+               }
+               delete ExtendedEventDescriptors;
+               delete ShortEventDescriptor;
+               continue;
+            }
+#else
+            continue;
+#endif /* DDEPGENTRY */
          EpgHandlers.SetEventID(pEvent, SiEitEvent.getEventId()); // unfortunately some stations use different event ids for the same event in different tables :-(
          EpgHandlers.SetStartTime(pEvent, StartTime);
          EpgHandlers.SetDuration(pEvent, Duration);
@@ -108,7 +188,11 @@
       if (pEvent->TableID() > 0x4E) // for backwards compatibility, table ids less than 0x4E are never overwritten
          pEvent->SetTableID(Tid);
       if (Tid == 0x4E) { // we trust only the present/following info on the actual TS
-         if (SiEitEvent.getRunningStatus() >= SI::RunningStatusNotRunning)
+#ifdef USE_DDEPGENTRY
+         if (Setup.DisableVPS == 0 && SiEitEvent.getRunningStatus() >= SI::RunningStatusNotRunning)
+#else
+          if (SiEitEvent.getRunningStatus() >= SI::RunningStatusNotRunning)
+#endif /* DDEPGENTRY */
             pSchedule->SetRunningStatus(pEvent, SiEitEvent.getRunningStatus(), channel);
          }
       if (OnlyRunningStatus) {
@@ -297,6 +381,82 @@
       EpgHandlers.HandleEvent(pEvent);
       if (handledExternally)
          delete pEvent;
+
+#ifdef USE_DDEPGENTRY
+      //to avoid double epg-entrys from ext and int epg sources :EW
+      if (pEvent && pEvent->TableID() != 0x00)
+         {
+         cEvent *pPreviousEvent = (cEvent *)pSchedule->GetPreviousEvent(pEvent);
+
+         if (pPreviousEvent)
+            {
+            if(Setup.DoubleEpgAction == 0)
+               {
+               pPreviousEvent->SetStartTime(pEvent->StartTime());
+               pPreviousEvent->SetDuration(pEvent->Duration());
+
+               if(Setup.DisableVPS == 0)
+                  {
+                  if(channel)
+                     pPreviousEvent->SetRunningStatus(pEvent->RunningStatus(), channel);
+                  else
+                     pPreviousEvent->SetRunningStatus(pEvent->RunningStatus());
+                  }
+
+               // to use the info of the original epg, update the extern one,
+               // if it has less info
+               char buffer_short_intern[256];
+               char buffer_short_extern[256];
+               int len_short_intern = 0;
+               int len_short_extern = 0;
+
+               if (pEvent->ShortText())
+                  len_short_intern = snprintf (buffer_short_intern, sizeof(buffer_short_intern), "%s", pEvent->ShortText());
+
+               if (pPreviousEvent->ShortText())
+                  len_short_extern = snprintf (buffer_short_extern, sizeof(buffer_short_extern), "%s",pPreviousEvent->ShortText());
+
+               if(len_short_intern > 0)
+                  {
+                  if(len_short_extern < 1)
+                     pPreviousEvent->SetShortText(buffer_short_intern);
+                  else if (len_short_intern > len_short_extern)
+                     pPreviousEvent->SetShortText(buffer_short_intern);
+                  }
+
+               if(pEvent->Description())
+                  {
+                  char buffer_title_intern[4096];
+                  char buffer_title_extern[4096];
+                  int len_title_intern = 0;
+                  int len_title_extern = 0;
+
+                  if (pEvent->Description())
+                     len_title_intern = snprintf (buffer_title_intern, sizeof(buffer_title_intern), "%s", pEvent->Description());
+
+                  if (pPreviousEvent->Description())
+                     len_title_extern = snprintf (buffer_title_extern, sizeof(buffer_title_extern), "%s", pPreviousEvent->Description());
+
+                  if(len_title_intern > 0)
+                     {
+                     if(len_title_extern < 1)
+                        pPreviousEvent->SetDescription(buffer_title_intern);
+                     else if (len_title_intern > len_title_extern)
+                        pPreviousEvent->SetDescription(buffer_title_intern);
+                     }
+                  }
+
+               if(pPreviousEvent->Vps() == 0 && pEvent->Vps() != 0)
+                  pPreviousEvent->SetVps(pEvent->Vps());
+
+               pSchedule->DelEvent(pEvent);
+               pPreviousEvent->FixEpgBugs();
+               }
+            else
+               pSchedule->DelEvent(pPreviousEvent);
+            }
+         }
+#endif /* DDEPGENTRY */
       }
   if (Tid == 0x4E) {
      if (Empty && getSectionNumber() == 0)
diff -urN vdr-1.7.38/epg.c vdr-1.7.38-ddepg/epg.c
--- vdr-1.7.38/epg.c	2013-02-22 12:49:02.367664590 +0100
+++ vdr-1.7.38-ddepg/epg.c	2013-02-22 12:46:35.979662077 +0100
@@ -972,6 +972,32 @@
   return pe;
 }
 
+#ifdef USE_DDEPGENTRY
+const cEvent *cSchedule::GetPreviousEvent(cEvent *Event) const
+{
+
+   if(!Event || Event->Duration() == 0 || Event->StartTime() == 0)
+      return NULL;
+   // Returns either the event info to the previous/following event to the given EventID or, if that one can't be found NULL :EW
+   cEvent *pt = NULL;
+   int epgTimeDelta = Setup.DoubleEpgTimeDelta * 60 + 1;
+   for (pt = events.First(); pt; pt = events.Next(pt))
+      if(pt && pt->TableID() == 0x00)
+         if ((Event->StartTime() - pt->StartTime()) > -  epgTimeDelta && (Event->StartTime() - pt->StartTime()) < epgTimeDelta)
+         {
+            if((pt->Duration() + (pt->Duration()/ 5) + 1) > Event->Duration() && (pt->Duration() - (pt->Duration()/ 5) - 1) < Event->Duration())
+               return pt;
+            else if (pt->Title() && Event->Title() && (strcmp(pt->Title(), ".") != 0 && strcmp(Event->Title(), ".") != 0))
+            {
+               if (strstr(pt->Title(), Event->Title()) != NULL || strstr(Event->Title(), pt->Title()) != NULL)
+                  return pt;
+            }
+         }
+   return NULL;
+}
+#endif /* DDEPGENTRY */
+
+
 void cSchedule::SetRunningStatus(cEvent *Event, int RunningStatus, cChannel *Channel)
 {
   hasRunning = false;
diff -urN vdr-1.7.38/epg.h vdr-1.7.38-ddepg/epg.h
--- vdr-1.7.38/epg.h	2013-02-22 12:49:02.379664591 +0100
+++ vdr-1.7.38-ddepg/epg.h	2013-02-22 12:47:04.859662574 +0100
@@ -164,6 +164,9 @@
   void DropOutdated(time_t SegmentStart, time_t SegmentEnd, uchar TableID, uchar Version);
   void Cleanup(time_t Time);
   void Cleanup(void);
+#ifdef USE_DDEPGENTRY
+  const cEvent *GetPreviousEvent(cEvent *Event) const; //:EW
+#endif /* DDEPGENTRY */
   cEvent *AddEvent(cEvent *Event);
   void DelEvent(cEvent *Event);
   void HashEvent(cEvent *Event);
diff -urN vdr-1.7.38/menu.c vdr-1.7.38-ddepg/menu.c
--- vdr-1.7.38/menu.c	2013-02-22 12:49:02.343664590 +0100
+++ vdr-1.7.38-ddepg/menu.c	2013-02-22 12:48:45.931664309 +0100
@@ -2952,6 +2952,12 @@
   for (int i = 0; i < numLanguages; i++)
       // TRANSLATORS: note the singular!
       Add(new cMenuEditStraItem(tr("Setup.EPG$Preferred language"),    &data.EPGLanguages[i], I18nLanguages()->Size(), &I18nLanguages()->At(0)));
+#ifdef USE_DDEPGENTRY
+  Add(new cMenuEditIntItem(tr("Setup.EPG$Period for double EPG search(min)"), &data.DoubleEpgTimeDelta));
+  Add(new cMenuEditBoolItem(tr("Setup.EPG$extern double Epg entry"),   &data.DoubleEpgAction, "adjust", "delete"));
+  Add(new cMenuEditBoolItem(tr("Setup.EPG$Mix intern and extern EPG"), &data.MixEpgAction));
+  Add(new cMenuEditBoolItem(tr("Setup.EPG$Disable running VPS event"), &data.DisableVPS));
+#endif /* DDEPGENTRY */
 
   SetCurrent(Get(current));
   Display();
