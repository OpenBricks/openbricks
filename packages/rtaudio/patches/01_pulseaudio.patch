diff -Naur rtaudio-4.0.10/audioprobe.cpp rtaudio-4.0.10_patched/audioprobe.cpp
--- rtaudio-4.0.10/audioprobe.cpp	1970-01-01 01:00:00.000000000 +0100
+++ rtaudio-4.0.10_patched/audioprobe.cpp	2012-02-25 15:10:23.556836895 +0100
@@ -0,0 +1,87 @@
+/******************************************/
+/*
+  audioprobe.cpp
+  by Gary P. Scavone, 2001
+
+  Probe audio system and prints device info.
+*/
+/******************************************/
+
+#include "RtAudio.h"
+#include <iostream>
+#include <map>
+
+int main()
+{
+  // Create an api map.
+  std::map<int, std::string> apiMap;
+  apiMap[RtAudio::MACOSX_CORE] = "OS-X Core Audio";
+  apiMap[RtAudio::WINDOWS_ASIO] = "Windows ASIO";
+  apiMap[RtAudio::WINDOWS_DS] = "Windows Direct Sound";
+  apiMap[RtAudio::UNIX_JACK] = "Jack Client";
+  apiMap[RtAudio::LINUX_ALSA] = "Linux ALSA";
+  apiMap[RtAudio::LINUX_OSS] = "Linux OSS";
+  apiMap[RtAudio::LINUX_PULSE] = "Linux PulseAudio";
+  apiMap[RtAudio::RTAUDIO_DUMMY] = "RtAudio Dummy";
+
+  std::vector< RtAudio::Api > apis;
+  RtAudio :: getCompiledApi( apis );
+
+  std::cout << "\nCompiled APIs:\n";
+  for ( unsigned int i=0; i<apis.size(); i++ )
+    std::cout << "  " << apiMap[ apis[i] ] << std::endl;
+
+  RtAudio audio;
+  RtAudio::DeviceInfo info;
+
+  std::cout << "\nCurrent API: " << apiMap[ audio.getCurrentApi() ] << std::endl;
+
+  unsigned int devices = audio.getDeviceCount();
+  std::cout << "\nFound " << devices << " device(s) ...\n";
+
+  for (unsigned int i=0; i<devices; i++) {
+    info = audio.getDeviceInfo(i);
+
+    std::cout << "\nDevice Name = " << info.name << '\n';
+    if ( info.probed == false )
+      std::cout << "Probe Status = UNsuccessful\n";
+    else {
+      std::cout << "Probe Status = Successful\n";
+      std::cout << "Output Channels = " << info.outputChannels << '\n';
+      std::cout << "Input Channels = " << info.inputChannels << '\n';
+      std::cout << "Duplex Channels = " << info.duplexChannels << '\n';
+      if ( info.isDefaultOutput ) std::cout << "This is the default output device.\n";
+      else std::cout << "This is NOT the default output device.\n";
+      if ( info.isDefaultInput ) std::cout << "This is the default input device.\n";
+      else std::cout << "This is NOT the default input device.\n";
+      if ( info.nativeFormats == 0 )
+        std::cout << "No natively supported data formats(?)!";
+      else {
+        std::cout << "Natively supported data formats:\n";
+        if ( info.nativeFormats & RTAUDIO_SINT8 )
+          std::cout << "  8-bit int\n";
+        if ( info.nativeFormats & RTAUDIO_SINT16 )
+          std::cout << "  16-bit int\n";
+        if ( info.nativeFormats & RTAUDIO_SINT24 )
+          std::cout << "  24-bit int\n";
+        if ( info.nativeFormats & RTAUDIO_SINT32 )
+          std::cout << "  32-bit int\n";
+        if ( info.nativeFormats & RTAUDIO_FLOAT32 )
+          std::cout << "  32-bit float\n";
+        if ( info.nativeFormats & RTAUDIO_FLOAT64 )
+          std::cout << "  64-bit float\n";
+      }
+      if ( info.sampleRates.size() < 1 )
+        std::cout << "No supported sample rates found!";
+      else {
+        std::cout << "Supported sample rates = ";
+        for (unsigned int j=0; j<info.sampleRates.size(); j++)
+          std::cout << info.sampleRates[j] << " ";
+      }
+      std::cout << std::endl;
+    }
+  }
+  std::cout << std::endl;
+
+  return 0;
+}
diff -Naur rtaudio-4.0.10/configure.ac rtaudio-4.0.10_patched/configure.ac
--- rtaudio-4.0.10/configure.ac	2011-08-30 20:47:27.000000000 +0200
+++ rtaudio-4.0.10_patched/configure.ac	2012-02-25 15:10:02.946836893 +0100
@@ -80,6 +80,12 @@
     AC_MSG_RESULT(using ALSA)
     AC_CHECK_LIB(asound, snd_pcm_open, , AC_MSG_ERROR(ALSA support requires the asound library!))], )
 
+  # Look for PULSE flag
+  AC_ARG_WITH(pulse, [  --with-pulse = choose PulseAudio API support (linux only)], [
+    api="$api -D__LINUX_PULSE__"
+    AC_MSG_RESULT(using PulseAudio)
+    AC_CHECK_LIB(pulse-simple, pa_simple_new, , AC_MSG_ERROR(PulseAudio support requires the pulse-simple library!))], )
+
   # Look for OSS flag
   AC_ARG_WITH(oss, [  --with-oss = choose OSS API support (linux only)], [
     api="$api -D__LINUX_OSS__"
diff -Naur rtaudio-4.0.10/Makefile.in rtaudio-4.0.10_patched/Makefile.in
--- rtaudio-4.0.10/Makefile.in	2011-08-30 20:47:27.000000000 +0200
+++ rtaudio-4.0.10_patched/Makefile.in	2012-02-25 15:10:16.376836895 +0100
@@ -8,7 +8,7 @@
 
 STATIC = librtaudio.a
 SHARED = @sharedlib@
-RELEASE = 4.0.9
+RELEASE = 4.0.10
 MAJOR = 4
 LIBRARIES = $(STATIC) $(SHARED)
 
diff -Naur rtaudio-4.0.10/RtAudio.cpp rtaudio-4.0.10_patched/RtAudio.cpp
--- rtaudio-4.0.10/RtAudio.cpp	2011-08-30 20:52:18.000000000 +0200
+++ rtaudio-4.0.10_patched/RtAudio.cpp	2012-02-25 15:10:31.826836895 +0100
@@ -11,6 +11,8 @@
 
     RtAudio: realtime audio i/o C++ classes
     Copyright (c) 2001-2011 Gary P. Scavone
+    Copyright (c) 2011 Peter Meerwald, pmeerw@pmeerw.net
+    Copyright (c) 2011 bct-electronic GmbH
 
     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation files
@@ -58,7 +60,7 @@
   #define MUTEX_DESTROY(A)    DeleteCriticalSection(A)
   #define MUTEX_LOCK(A)       EnterCriticalSection(A)
   #define MUTEX_UNLOCK(A)     LeaveCriticalSection(A)
-#elif defined(__LINUX_ALSA__) || defined(__UNIX_JACK__) || defined(__LINUX_OSS__) || defined(__MACOSX_CORE__)
+#elif defined(__LINUX_ALSA__) || defined(__LINUX_PULSE__) || defined(__UNIX_JACK__) || defined(__LINUX_OSS__) || defined(__MACOSX_CORE__)
   // pthread API
   #define MUTEX_INITIALIZE(A) pthread_mutex_init(A, NULL)
   #define MUTEX_DESTROY(A)    pthread_mutex_destroy(A)
@@ -87,6 +89,9 @@
 #if defined(__LINUX_ALSA__)
   apis.push_back( LINUX_ALSA );
 #endif
+#if defined(__LINUX_PULSE__)
+  apis.push_back( LINUX_PULSE );
+#endif
 #if defined(__LINUX_OSS__)
   apis.push_back( LINUX_OSS );
 #endif
@@ -114,6 +119,10 @@
   if ( api == LINUX_ALSA )
     rtapi_ = new RtApiAlsa();
 #endif
+#if defined(__LINUX_PULSE__)
+  if ( api == LINUX_PULSE )
+    rtapi_ = new RtApiPulse();
+#endif
 #if defined(__LINUX_OSS__)
   if ( api == LINUX_OSS )
     rtapi_ = new RtApiOss();
@@ -263,16 +272,15 @@
   bool result;
 
   if ( oChannels > 0 ) {
-
     result = probeDeviceOpen( oParams->deviceId, OUTPUT, oChannels, oParams->firstChannel,
                               sampleRate, format, bufferFrames, options );
     if ( result == false ) error( RtError::SYSTEM_ERROR );
   }
 
   if ( iChannels > 0 ) {
-
     result = probeDeviceOpen( iParams->deviceId, INPUT, iChannels, iParams->firstChannel,
                               sampleRate, format, bufferFrames, options );
+
     if ( result == false ) {
       if ( oChannels > 0 ) closeStream();
       error( RtError::SYSTEM_ERROR );
@@ -6377,6 +6385,432 @@
 //******************** End of __LINUX_ALSA__ *********************//
 #endif
 
+#if defined(__LINUX_PULSE__)
+#include <pulse/error.h>
+#include <pulse/simple.h>
+#include <cstdio>
+
+namespace {
+const unsigned int SUPPORTED_SAMPLERATES[] = {8000, 16000, 22050, 32000,
+                                              44100, 48000, 96000, 0};
+}
+
+struct rtaudio_pa_format_mapping_t {
+    RtAudioFormat rtaudio_format;
+    pa_sample_format_t pa_format;
+};
+
+static const rtaudio_pa_format_mapping_t supported_sampleformats[] = {
+    {RTAUDIO_SINT16, PA_SAMPLE_S16LE},
+    {RTAUDIO_SINT32, PA_SAMPLE_S32LE},
+    {RTAUDIO_FLOAT32, PA_SAMPLE_FLOAT32LE},
+    {0, PA_SAMPLE_INVALID}};
+
+struct PulseAudioHandle {
+    pa_simple *s_play;
+    pa_simple *s_rec;
+    pthread_t thread;
+    pthread_cond_t runnable_cv;
+    bool runnable;
+    PulseAudioHandle() : s_play(0), s_rec(0), runnable(false) { }
+};
+
+RtApiPulse::~RtApiPulse()
+{
+    if ( stream_.state != STREAM_CLOSED )
+        closeStream();
+}
+
+unsigned int RtApiPulse::getDeviceCount( void )
+{
+    return 1;
+}
+
+RtAudio::DeviceInfo RtApiPulse::getDeviceInfo( unsigned int device )
+{
+    RtAudio::DeviceInfo info;
+    info.probed = true;
+    info.name = "PulseAudio";
+    info.outputChannels = 2;
+    info.inputChannels = 2;
+    info.duplexChannels = 2;
+    info.isDefaultOutput = true;
+    info.isDefaultInput = true;
+
+    for ( const unsigned int *sr = SUPPORTED_SAMPLERATES; *sr; ++sr )
+        info.sampleRates.push_back( *sr );
+
+    info.nativeFormats = RTAUDIO_SINT16 | RTAUDIO_SINT32 | RTAUDIO_FLOAT32;
+
+    return info;
+}
+
+extern "C" void *pulseaudio_callback( void * user )
+{
+    CallbackInfo *cbi = static_cast<CallbackInfo *>( user );
+    RtApiPulse *context = static_cast<RtApiPulse *>( cbi->object );
+    volatile bool *isRunning = &cbi->isRunning;
+
+    while ( *isRunning ) {
+        pthread_testcancel();
+        context->callbackEvent();
+    }
+
+    pthread_exit( NULL );
+}
+
+void RtApiPulse::closeStream( void )
+{
+    PulseAudioHandle *pah = static_cast<PulseAudioHandle *>( stream_.apiHandle );
+
+    stream_.callbackInfo.isRunning = false;
+    if ( pah ) {
+        MUTEX_LOCK( &stream_.mutex );
+        if ( stream_.state == STREAM_STOPPED ) {
+            pah->runnable = true;
+            pthread_cond_signal( &pah->runnable_cv );
+        }
+        MUTEX_UNLOCK( &stream_.mutex );
+
+        pthread_join( pah->thread, 0 );
+        if ( pah->s_play ) {
+            pa_simple_flush( pah->s_play, NULL );
+            pa_simple_free( pah->s_play );
+        }
+        if ( pah->s_rec )
+            pa_simple_free( pah->s_rec );
+
+        pthread_cond_destroy( &pah->runnable_cv );
+        delete pah;
+        stream_.apiHandle = 0;
+    }
+
+    if ( stream_.userBuffer[0] ) {
+        free( stream_.userBuffer[0] );
+        stream_.userBuffer[0] = 0;
+    }
+    if ( stream_.userBuffer[1] ) {
+        free( stream_.userBuffer[1] );
+        stream_.userBuffer[1] = 0;
+    }
+
+    stream_.state = STREAM_CLOSED;
+    stream_.mode = UNINITIALIZED;
+}
+
+void RtApiPulse::callbackEvent( void )
+{
+    PulseAudioHandle *pah = static_cast<PulseAudioHandle *>( stream_.apiHandle );
+
+    if ( stream_.state == STREAM_STOPPED ) {
+        MUTEX_LOCK( &stream_.mutex );
+        while ( !pah->runnable )
+            pthread_cond_wait( &pah->runnable_cv, &stream_.mutex );
+
+        if ( stream_.state != STREAM_RUNNING ) {
+            MUTEX_UNLOCK( &stream_.mutex );
+            return;
+        }
+        MUTEX_UNLOCK( &stream_.mutex );
+    }
+
+    if ( stream_.state == STREAM_CLOSED ) {
+        errorText_ = "RtApiPulse::callbackEvent(): the stream is closed ... "
+                                                   "this shouldn't happen!";
+        error( RtError::WARNING );
+        return;
+    }
+
+    RtAudioCallback callback = (RtAudioCallback) stream_.callbackInfo.callback;
+    double streamTime = getStreamTime();
+    RtAudioStreamStatus status = 0;
+    int doStopStream = callback( stream_.userBuffer[0], stream_.userBuffer[1],
+            stream_.bufferSize, streamTime, status,
+            stream_.callbackInfo.userData );
+
+    if ( doStopStream == 2 ) {
+        abortStream();
+        return;
+    }
+
+    MUTEX_LOCK( &stream_.mutex );
+
+    if ( stream_.state != STREAM_RUNNING )
+        goto unlock;
+
+    int pa_error;
+    size_t bytes;
+    switch ( stream_.mode ) {
+        case INPUT:
+            bytes = stream_.nUserChannels[1] * stream_.bufferSize * formatBytes( stream_.userFormat );
+            if ( pa_simple_read( pah->s_rec, stream_.userBuffer[1], bytes, &pa_error ) < 0 ) {
+                errorStream_ << "RtApiPulse::callbackEvent: audio read error, " <<
+                    pa_strerror( pa_error ) << ".";
+                errorText_ = errorStream_.str();
+                error( RtError::WARNING );
+            }
+            break;
+        case OUTPUT:
+            bytes = stream_.nUserChannels[0] * stream_.bufferSize * formatBytes( stream_.userFormat );
+            if ( pa_simple_write( pah->s_play, stream_.userBuffer[0], bytes, &pa_error ) < 0 ) {
+                errorStream_ << "RtApiPulse::callbackEvent: audio write error, " <<
+                    pa_strerror( pa_error ) << ".";
+                errorText_ = errorStream_.str();
+                error( RtError::WARNING );
+            }
+            break;
+        case DUPLEX:
+            bytes = stream_.nUserChannels[1] * stream_.bufferSize * formatBytes( stream_.userFormat );
+            if ( pa_simple_read( pah->s_rec, stream_.userBuffer[1], bytes, &pa_error ) < 0 ) {
+                errorStream_ << "RtApiPulse::callbackEvent: audio read error, " <<
+                    pa_strerror( pa_error ) << ".";
+                errorText_ = errorStream_.str();
+                error( RtError::WARNING );
+            }
+            bytes = stream_.nUserChannels[0] * stream_.bufferSize * formatBytes( stream_.userFormat );
+            if ( pa_simple_write( pah->s_play, stream_.userBuffer[0], bytes, &pa_error ) < 0) {
+                errorStream_ << "RtApiPulse::callbackEvent: audio write error, " <<
+                    pa_strerror( pa_error ) << ".";
+                errorText_ = errorStream_.str();
+                error( RtError::WARNING );
+            }
+            break;
+        default:
+            // ERROR
+            break;
+    }
+
+unlock:
+    MUTEX_UNLOCK( &stream_.mutex );
+    RtApi::tickStreamTime();
+
+    if ( doStopStream == 1 )
+        stopStream();
+}
+
+void RtApiPulse::startStream( void )
+{
+    PulseAudioHandle *pah = static_cast<PulseAudioHandle *>( stream_.apiHandle );
+
+    if ( stream_.state == STREAM_CLOSED ) {
+        errorText_ = "RtApiPulse::startStream(): the stream is not open!";
+        error( RtError::INVALID_USE );
+        return;
+    }
+    if ( stream_.state == STREAM_RUNNING ) {
+        errorText_ = "RtApiPulse::startStream(): the stream is already running!";
+        error( RtError::WARNING );
+        return;
+    }
+
+    MUTEX_LOCK( &stream_.mutex );
+
+    stream_.state = STREAM_RUNNING;
+
+    pah->runnable = true;
+    pthread_cond_signal( &pah->runnable_cv );
+    MUTEX_UNLOCK( &stream_.mutex );
+}
+
+void RtApiPulse::stopStream( void )
+{
+    PulseAudioHandle *pah = static_cast<PulseAudioHandle *>( stream_.apiHandle );
+
+    if ( stream_.state == STREAM_CLOSED ) {
+        errorText_ = "RtApiPulse::stopStream(): the stream is not open!";
+        error( RtError::INVALID_USE );
+        return;
+    }
+    if ( stream_.state == STREAM_STOPPED ) {
+        errorText_ = "RtApiPulse::stopStream(): the stream is already stopped!";
+        error( RtError::WARNING );
+        return;
+    }
+
+    stream_.state = STREAM_STOPPED;
+    MUTEX_LOCK( &stream_.mutex );
+
+    if ( pah && pah->s_play ) {
+        int pa_error;
+        if ( pa_simple_drain( pah->s_play, &pa_error ) < 0 ) {
+            errorStream_ << "RtApiPulse::stopStream: error draining output device, " <<
+                pa_strerror( pa_error ) << ".";
+            errorText_ = errorStream_.str();
+            MUTEX_UNLOCK( &stream_.mutex );
+            error( RtError::SYSTEM_ERROR );
+        }
+    }
+
+    stream_.state = STREAM_STOPPED;
+    MUTEX_UNLOCK( &stream_.mutex );
+}
+
+void RtApiPulse::abortStream( void )
+{
+    PulseAudioHandle *pah = static_cast<PulseAudioHandle*>( stream_.apiHandle );
+
+    if ( stream_.state == STREAM_CLOSED ) {
+        errorText_ = "RtApiPulse::abortStream(): the stream is not open!";
+        error( RtError::INVALID_USE );
+        return;
+    }
+    if ( stream_.state == STREAM_STOPPED ) {
+        errorText_ = "RtApiPulse::abortStream(): the stream is already stopped!";
+        error( RtError::WARNING );
+        return;
+    }
+
+    stream_.state = STREAM_STOPPED;
+    MUTEX_LOCK( &stream_.mutex );
+
+    if ( pah && pah->s_play ) {
+        int pa_error;
+        if ( pa_simple_flush( pah->s_play, &pa_error ) < 0 ) {
+            errorStream_ << "RtApiPulse::abortStream: error flushing output device, " <<
+                pa_strerror( pa_error ) << ".";
+            errorText_ = errorStream_.str();
+            MUTEX_UNLOCK( &stream_.mutex );
+            error( RtError::SYSTEM_ERROR );
+        }
+    }
+
+    stream_.state = STREAM_STOPPED;
+    MUTEX_UNLOCK( &stream_.mutex );
+}
+
+bool RtApiPulse::probeDeviceOpen( unsigned int device, StreamMode mode,
+        unsigned int channels, unsigned int firstChannel,
+        unsigned int sampleRate, RtAudioFormat format,
+        unsigned int *bufferSize, RtAudio::StreamOptions *options )
+{
+    PulseAudioHandle *pah = 0;
+    unsigned long bufferBytes = 0;
+    pa_sample_spec ss;
+
+    if ( device != 0 ) return false;
+    if ( mode != INPUT && mode != OUTPUT ) return false;
+    if ( channels != 1 && channels != 2 ) {
+        errorText_ = "RtApiPulse::probeDeviceOpen: unsupported number of channels.";
+        return false;
+    }
+    ss.channels = channels;
+
+    if ( firstChannel != 0 ) return false;
+
+    bool sr_found = false;
+    for ( const unsigned int *sr = SUPPORTED_SAMPLERATES; *sr; ++sr ) {
+        if ( sampleRate == *sr ) {
+            sr_found = true;
+            stream_.sampleRate = sampleRate;
+            ss.rate = sampleRate;
+            break;
+        }
+    }
+    if ( !sr_found ) {
+        errorText_ = "RtApiPulse::probeDeviceOpen: unsupported sample rate.";
+        return false;
+    }
+
+    bool sf_found = 0;
+    for ( const rtaudio_pa_format_mapping_t *sf = supported_sampleformats;
+            sf->rtaudio_format && sf->pa_format != PA_SAMPLE_INVALID; ++sf ) {
+        if ( format == sf->rtaudio_format ) {
+            sf_found = true;
+            stream_.userFormat = sf->rtaudio_format;
+            ss.format = sf->pa_format;
+            break;
+        }
+    }
+    if ( !sf_found ) {
+        errorText_ = "RtApiPulse::probeDeviceOpen: unsupported sample format.";
+        return false;
+    }
+
+    if ( options && ( options->flags & RTAUDIO_NONINTERLEAVED ) ) {
+        errorText_ = "RtApiPulse::probeDeviceOpen: only interleaved audio data supported.";
+        return false;
+    }
+
+    stream_.userInterleaved = true;
+    stream_.nBuffers = 1;
+
+    stream_.deviceInterleaved[mode] = true;
+    stream_.doByteSwap[mode] = false;
+    stream_.doConvertBuffer[mode] = false;
+    stream_.deviceFormat[mode] = stream_.userFormat;
+    stream_.nUserChannels[mode] = channels;
+    stream_.nDeviceChannels[mode] = channels;
+    stream_.channelOffset[mode] = 0;
+
+    // Allocate necessary internal buffers.
+    bufferBytes = stream_.nUserChannels[mode] * *bufferSize * formatBytes( stream_.userFormat );
+    stream_.userBuffer[mode] = (char *) calloc( bufferBytes, 1 );
+    if ( stream_.userBuffer[mode] == NULL ) {
+        errorText_ = "RtApiPulse::probeDeviceOpen: error allocating user buffer memory.";
+        goto error;
+    }
+    stream_.bufferSize = *bufferSize;
+
+    if ( !stream_.apiHandle ) {
+        PulseAudioHandle *pah = new PulseAudioHandle;
+        if ( !pah ) {
+            errorText_ = "RtApiPulse::probeDeviceOpen: error allocating memory for handle.";
+            goto error;
+        }
+
+        stream_.apiHandle = pah;
+        if ( pthread_cond_init( &pah->runnable_cv, NULL ) != 0 ) {
+            errorText_ = "RtApiPulse::probeDeviceOpen: error creating condition variable.";
+            goto error;
+        }
+    }
+    pah = static_cast<PulseAudioHandle *>( stream_.apiHandle );
+
+    int error;
+    switch ( mode ) {
+        case INPUT:
+            pah->s_rec = pa_simple_new( NULL, "RtAudio", PA_STREAM_RECORD, NULL, "Record", &ss, NULL, NULL, &error );
+            if ( !pah->s_rec ) {
+                errorText_ = "RtApiPulse::probeDeviceOpen: error connecting input to PulseAudio server.";
+                goto error;
+            }
+            break;
+        case OUTPUT:
+            pah->s_play = pa_simple_new( NULL, "RtAudio", PA_STREAM_PLAYBACK, NULL, "Playback", &ss, NULL, NULL, &error );
+            if ( !pah->s_play ) {
+                errorText_ = "RtApiPulse::probeDeviceOpen: error connecting output to PulseAudio server.";
+                goto error;
+            }
+            break;
+        default:
+            goto error;
+    }
+
+    if ( stream_.mode == UNINITIALIZED )
+        stream_.mode = mode;
+    else if ( stream_.mode == mode )
+        goto error;
+    else
+        stream_.mode = DUPLEX;
+
+    stream_.state = STREAM_STOPPED;
+
+    if ( !stream_.callbackInfo.isRunning ) {
+        stream_.callbackInfo.object = this;
+        stream_.callbackInfo.isRunning = true;
+        if ( pthread_create( &pah->thread, NULL, pulseaudio_callback, (void *)&stream_.callbackInfo) != 0 ) {
+            errorText_ = "RtApiPulse::probeDeviceOpen: error creating thread.";
+            goto error;
+        }
+    }
+    return true;
+
+error:
+    closeStream();
+    return false;
+}
+//******************** End of __LINUX_PULSE__ *********************//
+#endif
 
 #if defined(__LINUX_OSS__)
 
diff -Naur rtaudio-4.0.10/RtAudio.h rtaudio-4.0.10_patched/RtAudio.h
--- rtaudio-4.0.10/RtAudio.h	2011-08-30 20:52:18.000000000 +0200
+++ rtaudio-4.0.10_patched/RtAudio.h	2012-02-25 15:10:10.756836895 +0100
@@ -215,6 +215,7 @@
     MACOSX_CORE,    /*!< Macintosh OS-X Core Audio API. */
     WINDOWS_ASIO,   /*!< The Steinberg Audio Stream I/O API. */
     WINDOWS_DS,     /*!< The Microsoft Direct Sound API. */
+    LINUX_PULSE,    /*!< The Linux PulseAudio API. */
     RTAUDIO_DUMMY   /*!< A compilable but non-functional API. */
   };
 
@@ -511,7 +512,7 @@
   typedef unsigned long ThreadHandle;
   typedef CRITICAL_SECTION StreamMutex;
 
-#elif defined(__LINUX_ALSA__) || defined(__UNIX_JACK__) || defined(__LINUX_OSS__) || defined(__MACOSX_CORE__)
+#elif defined(__LINUX_ALSA__) || defined(__LINUX_PULSE__) || defined(__UNIX_JACK__) || defined(__LINUX_OSS__) || defined(__MACOSX_CORE__)
   // Using pthread library for various flavors of unix.
   #include <pthread.h>
 
@@ -911,6 +912,39 @@
 
 #endif
 
+#if defined(__LINUX_PULSE__)
+
+class RtApiPulse: public RtApi
+{
+public:
+  ~RtApiPulse();
+  RtAudio::Api getCurrentApi() { return RtAudio::LINUX_PULSE; };
+  unsigned int getDeviceCount( void );
+  RtAudio::DeviceInfo getDeviceInfo( unsigned int device );
+  void closeStream( void );
+  void startStream( void );
+  void stopStream( void );
+  void abortStream( void );
+
+  // This function is intended for internal use only.  It must be
+  // public because it is called by the internal callback handler,
+  // which is not a member of RtAudio.  External use of this function
+  // will most likely produce highly undesireable results!
+  void callbackEvent( void );
+
+  private:
+
+  std::vector<RtAudio::DeviceInfo> devices_;
+  void saveDeviceInfo( void );
+  bool probeDeviceOpen( unsigned int device, StreamMode mode, unsigned int channels,
+                        unsigned int firstChannel, unsigned int sampleRate,
+                        RtAudioFormat format, unsigned int *bufferSize,
+                        RtAudio::StreamOptions *options );
+};
+
+#endif
+
+
 #if defined(__LINUX_OSS__)
 
 class RtApiOss: public RtApi
