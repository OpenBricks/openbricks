From: Andreas Auras <yak54@gmx.net>
Date: Thu, 16 Dec 2010 10:26:00 +0000 (+0100)
Subject: Stream start patch v100614 applied
X-Git-Url: http://projects.vdr-developer.org/git/?p=xine-lib.git;a=commitdiff_plain;h=5dea50a8e6d64c081c5aacd69d3757a1df4c5f7f;hp=5595868e3d9d7c0860fba28b77eb7da4833fd2dc

Stream start patch v100614 applied
---

diff --git a/src/video_dec/libvdpau/h264_parser.c b/src/video_dec/libvdpau/h264_parser.c
index 81621f0..087c411 100644
--- a/src/video_dec/libvdpau/h264_parser.c
+++ b/src/video_dec/libvdpau/h264_parser.c
@@ -355,6 +355,9 @@ void calculate_pic_order(struct h264_parser *parser, struct coded_picture *pic,
     else
       pic_order_cnt_msb = parser->prev_pic_order_cnt_msb;
 
+	//FIXME: is this OK? (< 0, overflow etc)
+	if((int32_t)pic_order_cnt_msb < 0){ pic_order_cnt_msb = 0; }
+
     if(!slc->field_pic_flag || !slc->bottom_field_flag) {
       pic->top_field_order_cnt = pic_order_cnt_msb + slc->pic_order_cnt_lsb;
       parser->prev_top_field_order_cnt = pic->top_field_order_cnt;
diff --git a/src/video_dec/libvdpau/vdpau_h264.c b/src/video_dec/libvdpau/vdpau_h264.c
index c79cd90..a97ce00 100644
--- a/src/video_dec/libvdpau/vdpau_h264.c
+++ b/src/video_dec/libvdpau/vdpau_h264.c
@@ -549,6 +549,16 @@ static int vdpau_decoder_render(video_decoder_t *this_gen, VdpBitstreamBuffer *v
   printf("\nE: ---------------------------------------------------------------\n");
 #endif
 
+	static int64_t firstpts = 0;
+	static int firstpic = 1;
+	if(!this->decoder_started)
+	{
+		//printf("not started...\n");
+		firstpic = 1;
+		firstpts = 0;
+	}
+
+
   if(!this->decoder_started && !pic.is_reference)
     return 0;
 
@@ -587,6 +597,27 @@ static int vdpau_decoder_render(video_decoder_t *this_gen, VdpBitstreamBuffer *v
 
   VdpVideoSurface surface = this->vdpau_accel->surface;
 
+  if(firstpts == 0)
+     firstpts = this->completed_pic->pts;
+  else if(firstpts != -1)
+  {
+     if((this->completed_pic->pts + 60000) < firstpts)
+     {
+       firstpic = 1;
+       free_parser(this->nal_parser);
+       this->nal_parser = init_parser(this->xine);
+     }
+     else if(this->completed_pic->pts < firstpts)
+     {
+       if(((uint8_t*)vdp_buffer->bitstream) != NULL)
+         free((uint8_t*)vdp_buffer->bitstream);
+
+       return 0;
+     }
+     else if(!slc->field_pic_flag /*|| !this->wait_for_bottom_field*/)
+       firstpts = -1;
+  }
+
   /*xprintf(this->xine, XINE_VERBOSITY_DEBUG,
       "Decode: NUM: %d, REF: %d, BYTES: %d, PTS: %lld\n", pic.frame_num, pic.is_reference, vdp_buffer->bitstream_bytes, this->completed_pic->pts);*/
   VdpStatus status;
@@ -677,7 +708,8 @@ static int vdpau_decoder_render(video_decoder_t *this_gen, VdpBitstreamBuffer *v
 
     /* draw the next frame in display order */
     if (draw_frame) {
-      draw_frames(this_gen, 0);
+      draw_frames(this_gen, firstpic);
+      firstpic = 0;
     }
   }
 
@@ -811,6 +843,15 @@ static void vdpau_h264_decode_data (video_decoder_t *this_gen,
  */
 static void vdpau_h264_flush (video_decoder_t *this_gen) {
   vdpau_h264_decoder_t *this = (vdpau_h264_decoder_t*) this_gen;
+
+	//printf("-------> vdpau_h264_flush %d %d", xine_list_size(this->nal_parser->dpb->output_list),this->nal_parser->dpb->max_reorder_frames);
+	if(xine_list_size(this->nal_parser->dpb->output_list) < this->nal_parser->dpb->max_reorder_frames)
+	{
+		//printf(" not executing\n");
+		return;
+	}
+	//printf(" executing\n");
+
   struct decoded_picture *decoded_pic = NULL;
 
   if(this->dangling_img){
@@ -881,6 +922,15 @@ static void vdpau_h264_reset (video_decoder_t *this_gen) {
 static void vdpau_h264_discontinuity (video_decoder_t *this_gen) {
   vdpau_h264_decoder_t *this = (vdpau_h264_decoder_t *) this_gen;
 
+	//printf("-------> vdpau_h264_discontinuity");
+ 
+	if(xine_list_size(this->nal_parser->dpb->output_list) < this->nal_parser->dpb->max_reorder_frames)
+	{
+	    //printf(" not executed\n");
+		return;
+	}
+    //printf(" executed\n");
+
   dpb_clear_all_pts(this->nal_parser->dpb);
   this->reset = VO_NEW_SEQUENCE_FLAG;
 }
