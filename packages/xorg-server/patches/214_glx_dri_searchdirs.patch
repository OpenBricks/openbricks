Index: xorg-server/glx/glxdri.c
===================================================================
--- xorg-server.orig/glx/glxdri.c	2011-04-09 10:38:10.000000000 +0300
+++ xorg-server/glx/glxdri.c	2011-04-09 10:39:42.000000000 +0300
@@ -858,8 +858,6 @@
 
 
 
-static const char dri_driver_path[] = DRI_DRIVER_PATH;
-
 static Bool
 glxDRIEnterVT (int index, int flags)
 {
@@ -971,13 +969,11 @@
     drm_handle_t  hFB;
     int        junk;
     __GLXDRIscreen *screen;
-    char filename[128];
     Bool isCapable;
     size_t buffer_size;
     ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
     const __DRIconfig **driConfigs;
-    const __DRIextension **extensions;
-    int i;
+    void *cookie = NULL;
     int from = X_ERROR;
 
     if (!xf86LoaderCheckSymbol("DRIQueryDirectRenderingCapable") ||
@@ -1053,43 +1049,15 @@
 	goto handle_error;
     }
 
-    snprintf(filename, sizeof filename, "%s/%s_dri.so",
-             dri_driver_path, driverName);
-
-    screen->driver = dlopen(filename, RTLD_LAZY | RTLD_LOCAL);
-    if (screen->driver == NULL) {
-	if (!strcmp(driverName, "nouveau"))
-	    from = X_INFO;
-	LogMessage(from, "AIGLX error: dlopen of %s failed (%s)\n",
-		   filename, dlerror());
-        goto handle_error;
-    }
-
-    extensions = dlsym(screen->driver, __DRI_DRIVER_EXTENSIONS);
-    if (extensions == NULL) {
-	LogMessage(X_ERROR, "AIGLX error: %s exports no extensions (%s)\n",
-		   driverName, dlerror());
-	goto handle_error;
-    }
-    
-    for (i = 0; extensions[i]; i++) {
-	if (strcmp(extensions[i]->name, __DRI_CORE) == 0 &&
-	    extensions[i]->version >= __DRI_CORE_VERSION) {
-		screen->core = (__DRIcoreExtension *) extensions[i];
-	}
-
-	if (strcmp(extensions[i]->name, __DRI_LEGACY) == 0 &&
-	    extensions[i]->version >= __DRI_LEGACY_VERSION) {
-		screen->legacy = (__DRIlegacyExtension *) extensions[i];
-	}
-    }
-
-    if (screen->core == NULL || screen->legacy == NULL) {
-	LogMessage(X_ERROR,
-		   "AIGLX error: %s does not export required DRI extension\n",
-		   driverName);
-	goto handle_error;
-    }
+    from = strncmp(driverName, "nouveau", sizeof "nouveau") ? X_ERROR : X_INFO;
+    screen->driver = glxProbeDriver(driverName, &cookie,
+				    (void **)&screen->core,
+				    __DRI_CORE, __DRI_CORE_VERSION,
+				    (void **)&screen->legacy,
+				    __DRI_LEGACY, __DRI_LEGACY_VERSION);
+     if (screen->driver == NULL) {
+         goto handle_error;
+     }
 
     /*
      * Get device-specific info.  pDevPriv will point to a struct
@@ -1100,7 +1068,7 @@
     if (!DRIGetDeviceInfo(pScreen, &hFB, &junk,
 			  &framebuffer.size, &framebuffer.stride,
 			  &framebuffer.dev_priv_size, &framebuffer.dev_priv)) {
-	LogMessage(X_ERROR, "AIGLX error: XF86DRIGetDeviceInfo failed\n");
+	LogMessage(from, "AIGLX error: XF86DRIGetDeviceInfo failed\n");
 	goto handle_error;
     }
 
@@ -1111,7 +1079,7 @@
     status = drmMap(fd, hFB, framebuffer.size, 
 		    (drmAddressPtr)&framebuffer.base);
     if (status != 0) {
-	LogMessage(X_ERROR, "AIGLX error: drmMap of framebuffer failed (%s)\n",
+	LogMessage(from, "AIGLX error: drmMap of framebuffer failed (%s)\n",
 		   strerror(-status));
 	goto handle_error;
     }
@@ -1121,7 +1089,7 @@
      */
     status = drmMap(fd, hSAREA, SAREA_MAX, &pSAREA);
     if (status != 0) {
-	LogMessage(X_ERROR, "AIGLX error: drmMap of SAREA failed (%s)\n",
+	LogMessage(from, "AIGLX error: drmMap of SAREA failed (%s)\n",
 		   strerror(-status));
 	goto handle_error;
     }
@@ -1139,7 +1107,7 @@
 					   screen);
 
     if (screen->driScreen == NULL) {
-	LogMessage(X_ERROR,
+	LogMessage(from,
 		   "AIGLX error: Calling driver entry point failed\n");
 	goto handle_error;
     }
@@ -1175,7 +1143,7 @@
     pScrn->LeaveVT = glxDRILeaveVT;
 
     LogMessage(X_INFO,
-	       "AIGLX: Loaded and initialized %s\n", filename);
+	       "AIGLX: Loaded and initialized %s\n", driverName);
 
     return &screen->base;
 
Index: xorg-server/glx/glxdri2.c
===================================================================
--- xorg-server.orig/glx/glxdri2.c	2011-04-09 10:38:10.000000000 +0300
+++ xorg-server/glx/glxdri2.c	2011-04-09 10:39:42.000000000 +0300
@@ -599,8 +599,6 @@
     NULL
 };
 
-static const char dri_driver_path[] = DRI_DRIVER_PATH;
-
 static Bool
 glxDRIEnterVT (int index, int flags)
 {
@@ -701,14 +699,11 @@
 __glXDRIscreenProbe(ScreenPtr pScreen)
 {
     const char *driverName, *deviceName;
+    void *cookie = NULL;
     __GLXDRIscreen *screen;
-    char filename[128];
     size_t buffer_size;
     ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
-    const __DRIextension **extensions;
     const __DRIconfig **driConfigs;
-    int i;
-    int from = X_ERROR;
 
     screen = calloc(1, sizeof *screen);
     if (screen == NULL)
@@ -730,54 +725,24 @@
 
     __glXInitExtensionEnableBits(screen->glx_enable_bits);
 
-    snprintf(filename, sizeof filename,
-	     "%s/%s_dri.so", dri_driver_path, driverName);
-
-    screen->driver = dlopen(filename, RTLD_LAZY | RTLD_LOCAL);
-    if (screen->driver == NULL) {
-	if (!strcmp(driverName, "nouveau"))
-	    from = X_INFO;
-	LogMessage(from, "AIGLX error: dlopen of %s failed (%s)\n",
-		   filename, dlerror());
-        goto handle_error;
-    }
-
-    extensions = dlsym(screen->driver, __DRI_DRIVER_EXTENSIONS);
-    if (extensions == NULL) {
-	LogMessage(X_ERROR, "AIGLX error: %s exports no extensions (%s)\n",
-		   driverName, dlerror());
-	goto handle_error;
-    }
+    do {
+	screen->driver = glxProbeDriver(driverName, &cookie,
+					(void **)&screen->core, __DRI_CORE, 1,
+					(void **)&screen->dri2, __DRI_DRI2, 1);
+	if (screen->driver == NULL)
+	    goto handle_error;
     
-    for (i = 0; extensions[i]; i++) {
-        if (strcmp(extensions[i]->name, __DRI_CORE) == 0 &&
-	    extensions[i]->version >= 1) {
-		screen->core = (const __DRIcoreExtension *) extensions[i];
-	}
-        if (strcmp(extensions[i]->name, __DRI_DRI2) == 0 &&
-	    extensions[i]->version >= 1) {
-		screen->dri2 = (const __DRIdri2Extension *) extensions[i];
+	screen->driScreen =
+	    (*screen->dri2->createNewScreen)(pScreen->myNum,
+					     screen->fd,
+					     loader_extensions,
+					     &driConfigs,
+					     screen);
+	if (screen->driScreen == NULL) {
+	    LogMessage(X_INFO,
+		       "AIGLX: Calling driver entry point failed\n");
 	}
-    }
-
-    if (screen->core == NULL || screen->dri2 == NULL) {
-	LogMessage(X_ERROR, "AIGLX error: %s exports no DRI extension\n",
-		   driverName);
-	goto handle_error;
-    }
-
-    screen->driScreen =
-	(*screen->dri2->createNewScreen)(pScreen->myNum,
-					 screen->fd,
-					 loader_extensions,
-					 &driConfigs,
-					 screen);
-
-    if (screen->driScreen == NULL) {
-	LogMessage(X_ERROR,
-		   "AIGLX error: Calling driver entry point failed\n");
-	goto handle_error;
-    }
+    } while (screen->driScreen == NULL);
 
     initializeExtensions(screen);
 
@@ -819,7 +784,7 @@
     pScrn->LeaveVT = glxDRILeaveVT;
 
     LogMessage(X_INFO,
-	       "AIGLX: Loaded and initialized %s\n", filename);
+	       "AIGLX: Loaded and initialized %s\n", driverName);
 
     return &screen->base;
 
@@ -829,7 +794,8 @@
 
     free(screen);
 
-    LogMessage(from, "AIGLX: reverting to software rendering\n");
+    LogMessage(strncmp(driverName, "nouveau", sizeof "nouveau") ? X_ERROR : X_INFO,
+	       "AIGLX: reverting to software rendering\n");
 
     return NULL;
 }
Index: xorg-server/glx/glxdricommon.c
===================================================================
--- xorg-server.orig/glx/glxdricommon.c	2011-04-06 18:25:24.000000000 +0300
+++ xorg-server/glx/glxdricommon.c	2011-04-09 10:39:42.000000000 +0300
@@ -29,6 +29,7 @@
 
 #include <stdint.h>
 #include <errno.h>
+#include <dlfcn.h>
 #include <sys/time.h>
 #include <GL/gl.h>
 #include <GL/glxtokens.h>
@@ -39,6 +40,17 @@
 #include "glxscreens.h"
 #include "glxdricommon.h"
 
+#ifndef PATH_MAX
+#include <sys/param.h>
+#ifndef PATH_MAX
+#ifdef MAXPATHLEN
+#define PATH_MAX MAXPATHLEN
+#else
+#define PATH_MAX 1024
+#endif
+#endif
+#endif 
+
 static int
 getUST(int64_t *ust)
 {
@@ -204,3 +216,70 @@
 
     return head.next;
 }
+
+static const char dri_driver_path[] = DRI_DRIVER_PATH;
+
+void *
+glxProbeDriver(const char *driverName, void **cookie,
+	       void **coreExt, const char *coreName, int coreVersion,
+	       void **renderExt, const char *renderName, int renderVersion)
+{
+    int i;
+    void *driver;
+    char filename[PATH_MAX];
+    const __DRIextension **extensions;
+    char *driDriverPath;
+    const char *pathStart = *cookie ? (const char*)*cookie : dri_driver_path;
+    const char *pathEnd = strchr(pathStart, ':');
+
+    for (; *pathStart; pathEnd = strchr(pathStart, ':')) {
+	driDriverPath = strndup(pathStart,
+				pathEnd ? pathEnd - pathStart : sizeof filename);
+	snprintf(filename, sizeof filename, "%s/%s_dri.so",
+		 driDriverPath, driverName);
+	free(driDriverPath);
+	pathStart = pathEnd ? pathEnd + 1 : pathStart + strlen(pathStart);
+	*cookie = (void *)pathStart;
+
+	LogMessage(X_INFO, "AIGLX: Trying DRI driver %s\n", filename);
+
+	driver = dlopen(filename, RTLD_LAZY | RTLD_LOCAL);
+	if (driver == NULL) {
+	    LogMessage(X_INFO, "AIGLX: dlopen of %s failed (%s)\n",
+		       filename, dlerror());
+	    continue;
+	}
+
+	extensions = dlsym(driver, __DRI_DRIVER_EXTENSIONS);
+	if (extensions == NULL) {
+	    LogMessage(X_INFO, "AIGLX: %s exports no extensions (%s)\n",
+		       driverName, dlerror());
+	    dlclose(driver);
+	    continue;
+	}
+    
+	for (i = 0; extensions[i]; i++) {
+	    if (strcmp(extensions[i]->name, coreName) == 0 &&
+		extensions[i]->version >= coreVersion) {
+		    *coreExt = (void *)extensions[i];
+	    }
+
+	    if (strcmp(extensions[i]->name, renderName) == 0 &&
+		extensions[i]->version >= renderVersion) {
+		    *renderExt = (void *)extensions[i];
+	    }
+	}
+
+	if (*coreExt == NULL || *renderExt == NULL) {
+	    LogMessage(X_INFO,
+		       "AIGLX: %s does not export required DRI extension\n",
+		       driverName);
+	    *coreExt = *renderExt = NULL;
+	    dlclose(driver);
+	    continue;
+	}
+	return driver;
+    }
+    *coreExt = *renderExt = NULL;
+    return NULL;
+}
Index: xorg-server/glx/glxdricommon.h
===================================================================
--- xorg-server.orig/glx/glxdricommon.h	2011-04-06 18:25:24.000000000 +0300
+++ xorg-server/glx/glxdricommon.h	2011-04-09 10:39:42.000000000 +0300
@@ -38,4 +38,9 @@
 
 extern const __DRIsystemTimeExtension systemTimeExtension;
 
+void *
+glxProbeDriver(const char *name, void **cookie,
+	       void **coreExt, const char *coreName, int coreVersion,
+	       void **renderExt, const char *renderName, int renderVersion);
+
 #endif
Index: xorg-server/glx/glxdriswrast.c
===================================================================
--- xorg-server.orig/glx/glxdriswrast.c	2011-04-06 18:25:24.000000000 +0300
+++ xorg-server/glx/glxdriswrast.c	2011-04-09 10:39:42.000000000 +0300
@@ -427,17 +427,13 @@
     }
 }
 
-static const char dri_driver_path[] = DRI_DRIVER_PATH;
-
 static __GLXscreen *
 __glXDRIscreenProbe(ScreenPtr pScreen)
 {
     const char *driverName = "swrast";
+    void *cookie = NULL;
     __GLXDRIscreen *screen;
-    char filename[128];
-    const __DRIextension **extensions;
     const __DRIconfig **driConfigs;
-    int i;
 
     screen = calloc(1, sizeof *screen);
     if (screen == NULL)
@@ -449,40 +445,15 @@
     screen->base.swapInterval   = NULL;
     screen->base.pScreen       = pScreen;
 
-    snprintf(filename, sizeof filename,
-	     "%s/%s_dri.so", dri_driver_path, driverName);
-
-    screen->driver = dlopen(filename, RTLD_LAZY | RTLD_LOCAL);
+    screen->driver = glxProbeDriver(driverName, &cookie,
+				    (void **)&screen->core,
+				    __DRI_CORE, __DRI_CORE_VERSION,
+				    (void **)&screen->swrast,
+				    __DRI_SWRAST, __DRI_SWRAST_VERSION);
     if (screen->driver == NULL) {
-	LogMessage(X_ERROR, "AIGLX error: dlopen of %s failed (%s)\n",
-		   filename, dlerror());
         goto handle_error;
     }
 
-    extensions = dlsym(screen->driver, __DRI_DRIVER_EXTENSIONS);
-    if (extensions == NULL) {
-	LogMessage(X_ERROR, "AIGLX error: %s exports no extensions (%s)\n",
-		   driverName, dlerror());
-	goto handle_error;
-    }
-
-    for (i = 0; extensions[i]; i++) {
-        if (strcmp(extensions[i]->name, __DRI_CORE) == 0 &&
-	    extensions[i]->version >= __DRI_CORE_VERSION) {
-		screen->core = (const __DRIcoreExtension *) extensions[i];
-	}
-        if (strcmp(extensions[i]->name, __DRI_SWRAST) == 0 &&
-	    extensions[i]->version >= __DRI_SWRAST_VERSION) {
-		screen->swrast = (const __DRIswrastExtension *) extensions[i];
-	}
-    }
-
-    if (screen->core == NULL || screen->swrast == NULL) {
-	LogMessage(X_ERROR, "AIGLX error: %s exports no DRI extension\n",
-		   driverName);
-	goto handle_error;
-    }
-
     screen->driScreen =
 	(*screen->swrast->createNewScreen)(pScreen->myNum,
 					   loader_extensions,
@@ -508,7 +479,7 @@
     screen->base.GLXminor = 4;
 
     LogMessage(X_INFO,
-	       "AIGLX: Loaded and initialized %s\n", filename);
+	       "AIGLX: Loaded and initialized %s\n", driverName);
 
     return &screen->base;
 
Index: xorg-server/configure.ac
===================================================================
--- xorg-server.orig/configure.ac	2011-04-09 10:38:10.000000000 +0300
+++ xorg-server/configure.ac	2011-04-09 10:42:51.000000000 +0300
@@ -1260,7 +1260,12 @@
 AC_DEFINE_DIR(SERVER_MISC_CONFIG_PATH, SERVERCONFIG, [Server miscellaneous config path])
 AC_DEFINE_DIR(BASE_FONT_PATH, FONTROOTDIR, [Default base font path])
 dridriverdir=`$PKG_CONFIG --variable=dridriverdir dri`
-AC_DEFINE_DIR(DRI_DRIVER_PATH, dridriverdir, [Default DRI driver path])
+drisearchdirs=`$PKG_CONFIG --variable=drisearchdirs dri`
+if test -n "$drisearchdirs" ; then
+   	AC_DEFINE_DIR(DRI_DRIVER_PATH, drisearchdirs, [Default DRI search dirs])
+else
+	AC_DEFINE_DIR(DRI_DRIVER_PATH, dridriverdir, [Default DRI driver path])
+fi
 AC_DEFINE_UNQUOTED(XVENDORNAME, ["$VENDOR_NAME"], [Vendor name])
 AC_DEFINE_UNQUOTED(XVENDORNAMESHORT, ["$VENDOR_NAME_SHORT"], [Short vendor name])
 AC_DEFINE_UNQUOTED(XORG_DATE, ["$RELEASE_DATE"], [Vendor release])
