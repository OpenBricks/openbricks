Andrew Stubbs 2010-07-29 13:07:58
Revision ID: ams@codesourcery.com-20100729130758-9rhvfqq2ieoy4iaq
Fix ICE when building libtheora.

The failure involves a shift of a 64-bit variable inside a loop. The RTL loop
optimizers hoist this out of the loop, turning it into a shift-by-constant.
ARM has no 64-bit shift instruction, so the code for a variable shift looks
something like
low = (count > 32)
      ? (high >> (count - 32))
      : (high << (count -32) | low >> count)

When a constant is substituted for count, some of these shifts become
negative. These will eventually be culled by DCE, but last long enough to
cause problems in the Thumb-2 patterns.

The fix is to tighten up the predicates on the Thumb-2 combined arith+shift
patterns so that only valid shift counts are accepted. The ICE does not effect
pure shifts or ARM mode as those patterns allow the shift count to be
reloaded into a register.

In theory we could allow and substitute alternate values for out-of-range
shifts but, given this is dead code, it's not worth the effort. 

diff -Naur gcc-4.5.1/gcc/config/arm/predicates.md gcc-4.5.1a/gcc/config/arm/predicates.md
--- gcc-4.5.1/gcc/config/arm/predicates.md	2010-07-05 14:43:01.000000000 +0200
+++ gcc-4.5.1a/gcc/config/arm/predicates.md	2010-10-02 17:01:18.243780499 +0200
@@ -303,10 +303,9 @@
        (and (match_code "reg,subreg,mem")
 	    (match_operand 0 "nonimmediate_soft_df_operand"))))
 
-(define_predicate "const_shift_operand"
+(define_predicate "const_shift_count"
   (and (match_code "const_int")
-       (ior (match_operand 0 "power_of_two_operand")
-	    (match_test "((unsigned HOST_WIDE_INT) INTVAL (op)) < 32"))))
+       (match_test "((unsigned HOST_WIDE_INT) INTVAL (op)) < 32")))
 
 
 (define_special_predicate "load_multiple_operation"
diff -Naur gcc-4.5.1/gcc/config/arm/thumb2.md gcc-4.5.1a/gcc/config/arm/thumb2.md
--- gcc-4.5.1/gcc/config/arm/thumb2.md	2010-04-02 10:32:00.000000000 +0200
+++ gcc-4.5.1a/gcc/config/arm/thumb2.md	2010-10-02 17:06:31.143818423 +0200
@@ -55,7 +55,7 @@
   [(set (match_operand:SI 0 "s_register_operand" "=r")
 	(and:SI (not:SI (match_operator:SI 4 "shift_operator"
 			 [(match_operand:SI 2 "s_register_operand" "r")
-			  (match_operand:SI 3 "const_int_operand" "M")]))
+			  (match_operand:SI 3 "const_shift_count" "M")]))
 		(match_operand:SI 1 "s_register_operand" "r")))]
   "TARGET_THUMB2"
   "bic%?\\t%0, %1, %2%S4"
@@ -124,7 +124,7 @@
   [(set (match_operand:SI 0 "s_register_operand" "=r")
 	(not:SI (match_operator:SI 3 "shift_operator"
 		 [(match_operand:SI 1 "s_register_operand" "r")
-		  (match_operand:SI 2 "const_int_operand"  "M")])))]
+		  (match_operand:SI 2 "const_shift_count"  "M")])))]
   "TARGET_THUMB2"
   "mvn%?\\t%0, %1%S3"
   [(set_attr "predicable" "yes")
@@ -136,7 +136,7 @@
   [(set (reg:CC_NOOV CC_REGNUM)
 	(compare:CC_NOOV (not:SI (match_operator:SI 3 "shift_operator"
 			  [(match_operand:SI 1 "s_register_operand" "r")
-			   (match_operand:SI 2 "const_int_operand"  "M")]))
+			   (match_operand:SI 2 "const_shift_count"  "M")]))
 			 (const_int 0)))
    (set (match_operand:SI 0 "s_register_operand" "=r")
 	(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]
@@ -151,7 +151,7 @@
   [(set (reg:CC_NOOV CC_REGNUM)
 	(compare:CC_NOOV (not:SI (match_operator:SI 3 "shift_operator"
 			  [(match_operand:SI 1 "s_register_operand" "r")
-			   (match_operand:SI 2 "const_int_operand"  "M")]))
+			   (match_operand:SI 2 "const_shift_count"  "M")]))
 			 (const_int 0)))
    (clobber (match_scratch:SI 0 "=r"))]
   "TARGET_THUMB2"
@@ -321,7 +321,7 @@
 	(compare:CC (match_operand:SI   0 "s_register_operand" "r")
 		    (match_operator:SI  3 "shift_operator"
 		     [(match_operand:SI 1 "s_register_operand" "r")
-		      (match_operand:SI 2 "const_int_operand"  "M")])))]
+		      (match_operand:SI 2 "const_shift_count"  "M")])))]
   "TARGET_THUMB2"
   "cmp%?\\t%0, %1%S3"
   [(set_attr "conds" "set")
@@ -333,7 +333,7 @@
   [(set (reg:CC_SWP CC_REGNUM)
 	(compare:CC_SWP (match_operator:SI 3 "shift_operator"
 			 [(match_operand:SI 1 "s_register_operand" "r")
-			  (match_operand:SI 2 "const_int_operand" "M")])
+			  (match_operand:SI 2 "const_shift_count" "M")])
 			(match_operand:SI 0 "s_register_operand" "r")))]
   "TARGET_THUMB2"
   "cmp%?\\t%0, %1%S3"
@@ -347,7 +347,7 @@
 	(compare:CC (match_operand:SI 0 "s_register_operand" "r")
 		    (neg:SI (match_operator:SI 3 "shift_operator"
 			     [(match_operand:SI 1 "s_register_operand" "r")
-			      (match_operand:SI 2 "const_int_operand" "M")]))))]
+			      (match_operand:SI 2 "const_shift_count" "M")]))))]
   "TARGET_THUMB2"
   "cmn%?\\t%0, %1%S3"
   [(set_attr "conds" "set")
@@ -459,7 +459,7 @@
         (match_operator:SI 1 "shiftable_operator"
           [(match_operator:SI 3 "shift_operator"
              [(match_operand:SI 4 "s_register_operand" "r")
-              (match_operand:SI 5 "const_int_operand" "M")])
+              (match_operand:SI 5 "const_shift_count" "M")])
            (match_operand:SI 2 "s_register_operand" "r")]))]
   "TARGET_THUMB2"
   "%i1%?\\t%0, %2, %4%S3"
@@ -492,7 +492,7 @@
         (compare:CC_NOOV (match_operator:SI 1 "shiftable_operator"
 		          [(match_operator:SI 3 "shift_operator"
 		            [(match_operand:SI 4 "s_register_operand" "r")
-		             (match_operand:SI 5 "const_int_operand" "M")])
+		             (match_operand:SI 5 "const_shift_count" "M")])
 		           (match_operand:SI 2 "s_register_operand" "r")])
 			 (const_int 0)))
    (set (match_operand:SI 0 "s_register_operand" "=r")
@@ -510,7 +510,7 @@
         (compare:CC_NOOV (match_operator:SI 1 "shiftable_operator"
 		          [(match_operator:SI 3 "shift_operator"
 		            [(match_operand:SI 4 "s_register_operand" "r")
-		             (match_operand:SI 5 "const_int_operand" "M")])
+		             (match_operand:SI 5 "const_shift_count" "M")])
 		           (match_operand:SI 2 "s_register_operand" "r")])
 			 (const_int 0)))
    (clobber (match_scratch:SI 0 "=r"))]
@@ -526,7 +526,7 @@
 	(minus:SI (match_operand:SI 1 "s_register_operand" "r")
 		  (match_operator:SI 2 "shift_operator"
 		   [(match_operand:SI 3 "s_register_operand" "r")
-		    (match_operand:SI 4 "const_int_operand" "M")])))]
+		    (match_operand:SI 4 "const_shift_count" "M")])))]
   "TARGET_THUMB2"
   "sub%?\\t%0, %1, %3%S2"
   [(set_attr "predicable" "yes")
@@ -540,7 +540,7 @@
 	 (minus:SI (match_operand:SI 1 "s_register_operand" "r")
 		   (match_operator:SI 2 "shift_operator"
 		    [(match_operand:SI 3 "s_register_operand" "r")
-		     (match_operand:SI 4 "const_int_operand" "M")]))
+		     (match_operand:SI 4 "const_shift_count" "M")]))
 	 (const_int 0)))
    (set (match_operand:SI 0 "s_register_operand" "=r")
 	(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)
@@ -558,7 +558,7 @@
 	 (minus:SI (match_operand:SI 1 "s_register_operand" "r")
 		   (match_operator:SI 2 "shift_operator"
 		    [(match_operand:SI 3 "s_register_operand" "r")
-		     (match_operand:SI 4 "const_int_operand" "M")]))
+		     (match_operand:SI 4 "const_shift_count" "M")]))
 	 (const_int 0)))
    (clobber (match_scratch:SI 0 "=r"))]
   "TARGET_THUMB2"
