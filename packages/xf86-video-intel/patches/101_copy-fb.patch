Index: xserver-xorg-video-intel/src/intel.h
===================================================================
--- xserver-xorg-video-intel.orig/src/intel.h	2011-01-31 17:55:53.348189809 +1100
+++ xserver-xorg-video-intel/src/intel.h	2011-01-31 17:56:01.018201058 +1100
@@ -472,6 +472,7 @@
 	OptionInfoPtr Options;
 
 	/* Driver phase/state information */
+	Bool starting;
 	Bool suspended;
 
 	enum last_3d last_3d;
@@ -501,6 +502,7 @@
 extern int intel_get_pipe_from_crtc_id(drm_intel_bufmgr *bufmgr, xf86CrtcPtr crtc);
 extern int intel_crtc_id(xf86CrtcPtr crtc);
 extern int intel_output_dpms_status(xf86OutputPtr output);
+extern void intel_copy_fb(ScrnInfoPtr scrn);
 
 extern Bool intel_do_pageflip(intel_screen_private *intel,
 			      dri_bo *new_front,
Index: xserver-xorg-video-intel/src/intel_display.c
===================================================================
--- xserver-xorg-video-intel.orig/src/intel_display.c	2011-01-31 17:55:53.328189776 +1100
+++ xserver-xorg-video-intel/src/intel_display.c	2011-01-31 17:56:01.018201058 +1100
@@ -36,6 +36,8 @@
 #include <errno.h>
 #include <poll.h>
 
+#include <sys/ioctl.h>
+
 #include "xorgVersion.h"
 
 #include "intel.h"
@@ -928,6 +930,13 @@
 	drmModeConnectorPtr koutput = intel_output->mode_output;
 	struct intel_mode *mode = intel_output->mode;
 	int i;
+	intel_screen_private *intel = intel_get_screen_private(output->scrn);
+
+	/* xf86Crtc.c calls dpms off in set desired modes, so ignore
+	 * the request if we're starting up. */
+
+	if (intel->starting)
+		return;
 
 	for (i = 0; i < koutput->count_props; i++) {
 		drmModePropertyPtr props;
@@ -1614,6 +1623,11 @@
 	}
 
 	intel->modes = mode;
+
+#if GET_ABI_MAJOR(ABI_VIDEODRV_VERSION) < 9
+	scrn->canDoBGNoneRoot = TRUE;
+#endif
+
 	return TRUE;
 }
 
@@ -1684,3 +1698,101 @@
 {
 	return crtc_id(crtc->driver_private);
 }
+
+static PixmapPtr
+intel_create_pixmap_for_fbcon(ScrnInfoPtr scrn)
+{
+	xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
+	struct intel_crtc *intel_crtc = xf86_config->crtc[0]->driver_private;
+	ScreenPtr pScreen = screenInfo.screens[scrn->scrnIndex];
+	struct intel_mode *mode = intel_crtc->mode;
+	intel_screen_private *intel = intel_get_screen_private(scrn);
+	drmModeFBPtr fbcon = NULL;
+	struct drm_gem_flink flink;
+	drm_intel_bo *bo;
+	PixmapPtr pixmap = NULL;
+	int i;
+
+	for (i = 0; i < mode->mode_res->count_crtcs; i++) {
+		intel_crtc = xf86_config->crtc[i]->driver_private;
+		if (intel_crtc->mode_crtc->buffer_id == 0)
+			continue;
+		fbcon = drmModeGetFB(mode->fd,
+				     intel_crtc->mode_crtc->buffer_id);
+		if (fbcon != NULL)
+			break;
+	}
+	if (i == mode->mode_res->count_crtcs)
+		return NULL;
+
+	flink.handle = fbcon->handle;
+	if (ioctl(mode->fd, DRM_IOCTL_GEM_FLINK, &flink) < 0) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't flink fbcon handle\n");
+		return NULL;
+	}
+
+	bo = drm_intel_bo_gem_create_from_name(intel->bufmgr,
+					       "fbcon", flink.name);
+	if (bo == NULL) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't allocate bo for fbcon handle\n");
+		return NULL;
+	}
+	if (!CreateScratchPixmapsForScreen(pScreen->myNum))
+		return NULL;
+
+	pixmap = GetScratchPixmapHeader(pScreen,
+					fbcon->width, fbcon->height,
+					fbcon->depth, fbcon->bpp,
+					fbcon->pitch, NULL);
+	if (pixmap == NULL) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't allocate pixmap fbcon contents\n");
+		return NULL;
+	}
+
+	intel_set_pixmap_bo(pixmap, bo);
+	drm_intel_bo_unreference(bo);
+	drmModeFreeFB(fbcon);
+
+	return pixmap;
+}
+
+void intel_copy_fb(ScrnInfoPtr scrn)
+{
+	ScreenPtr pScreen = screenInfo.screens[scrn->scrnIndex];
+	intel_screen_private *intel = intel_get_screen_private(scrn);
+	PixmapPtr src, dst;
+	unsigned int pitch = scrn->displayWidth * intel->cpp;
+
+	src = intel_create_pixmap_for_fbcon(scrn);
+	if (src == NULL) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't create pixmap for fbcon\n");
+		return;
+	}
+
+	/* We dont have a screen Pixmap yet */
+	dst = GetScratchPixmapHeader(pScreen,
+				     scrn->virtualX, scrn->virtualY,
+				     scrn->depth, scrn->bitsPerPixel,
+				     pitch,
+				     NULL);
+	intel_set_pixmap_bo(dst, intel->front_buffer);
+
+	intel->uxa_driver->prepare_copy(src, dst, -1, -1, GXcopy, FB_ALLONES);
+
+	intel->uxa_driver->copy(dst, 0, 0, 0, 0,
+				scrn->virtualX, scrn->virtualY);
+
+	intel->uxa_driver->done_copy(dst);
+
+	intel_batch_emit_flush(scrn);
+	intel_batch_submit(scrn, TRUE);
+
+	(*pScreen->DestroyPixmap)(src);
+	(*pScreen->DestroyPixmap)(dst);
+	FreeScratchPixmapsForScreen(pScreen->myNum);
+}
+
Index: xserver-xorg-video-intel/src/intel_driver.c
===================================================================
--- xserver-xorg-video-intel.orig/src/intel_driver.c	2011-01-31 17:55:53.358189820 +1100
+++ xserver-xorg-video-intel/src/intel_driver.c	2011-01-31 18:01:33.088688114 +1100
@@ -1008,6 +1008,10 @@
 		intel->directRenderingType = DRI_DRI2;
 #endif
 
+#if GET_ABI_MAJOR(ABI_VIDEODRV_VERSION) >= 9
+	screen->canDoBGNoneRoot = TRUE;
+#endif
+
 	if (!intel_init_initial_framebuffer(scrn))
 		return FALSE;
 
@@ -1018,6 +1022,8 @@
 	if (INTEL_INFO(intel)->gen >= 40)
 		gen4_render_state_init(scrn);
 
+	intel->starting = FALSE;
+
 	miClearVisualTypes();
 	if (!miSetVisualTypes(scrn->depth,
 			      miGetDefaultVisualMask(scrn->depth),
@@ -1153,6 +1159,7 @@
 
 	intel_mode_init(intel);
 
+	intel->starting = FALSE;
 	intel->suspended = FALSE;
 
 #if HAVE_UDEV
@@ -1222,6 +1229,8 @@
 
 	intel_set_gem_max_sizes(scrn);
 
+	intel_copy_fb(scrn);
+
 	if (!xf86SetDesiredModes(scrn))
 		return FALSE;
 
