Index: xserver-xorg-video-intel/src/drmmode_display.c
===================================================================
--- xserver-xorg-video-intel.orig/src/drmmode_display.c	2010-09-23 16:26:34.275006000 +1000
+++ xserver-xorg-video-intel/src/drmmode_display.c	2010-09-23 16:29:20.555006001 +1000
@@ -36,6 +36,8 @@
 #include <errno.h>
 #include <poll.h>
 
+#include <sys/ioctl.h>
+
 #include "xorgVersion.h"
 
 #include "i830.h"
@@ -853,6 +855,13 @@
 	drmmode_ptr drmmode = drmmode_output->drmmode;
 	int i;
 	drmModePropertyPtr props;
+	intel_screen_private *intel = intel_get_screen_private(output->scrn);
+
+	/* xf86Crtc.c calls dpms off in set desired modes, so ignore
+	 * the request if we're starting up. */
+
+	if (intel->starting)
+		return;
 
 	for (i = 0; i < koutput->count_props; i++) {
 		props = drmModeGetProperty(drmmode->fd, koutput->props[i]);
@@ -1466,6 +1475,8 @@
 					       drm_wakeup_handler, drmmode);
 	}
 
+	scrn->canDoBGNoneRoot = TRUE;
+
 	return TRUE;
 }
 
@@ -1500,3 +1511,101 @@
 	drmModeRmFB(drmmode->fd, drmmode->fb_id);
 	drmmode->fb_id = 0;
 }
+
+static PixmapPtr
+drmmode_create_pixmap_for_fbcon(ScrnInfoPtr scrn)
+{
+	xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
+	drmmode_crtc_private_ptr drmmode_crtc = xf86_config->crtc[0]->driver_private;
+	ScreenPtr pScreen = screenInfo.screens[scrn->scrnIndex];
+	drmmode_ptr drmmode = drmmode_crtc->drmmode;
+	intel_screen_private *intel = intel_get_screen_private(scrn);
+	drmModeFBPtr fbcon = NULL;
+	struct drm_gem_flink flink;
+	drm_intel_bo *bo;
+	PixmapPtr pixmap = NULL;
+	int i;
+
+	for (i = 0; i < drmmode->mode_res->count_crtcs; i++) {
+		drmmode_crtc = xf86_config->crtc[i]->driver_private;
+		if (drmmode_crtc->mode_crtc->buffer_id == 0)
+			continue;
+		fbcon = drmModeGetFB(drmmode->fd,
+				     drmmode_crtc->mode_crtc->buffer_id);
+		if (fbcon != NULL)
+			break;
+	}
+	if (i == drmmode->mode_res->count_crtcs)
+		return NULL;
+
+	flink.handle = fbcon->handle;
+	if (ioctl(drmmode->fd, DRM_IOCTL_GEM_FLINK, &flink) < 0) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't flink fbcon handle\n");
+		return NULL;
+	}
+
+	bo = drm_intel_bo_gem_create_from_name(intel->bufmgr,
+					       "fbcon", flink.name);
+	if (bo == NULL) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't allocate bo for fbcon handle\n");
+		return NULL;
+	}
+
+
+	if (!CreateScratchPixmapsForScreen(scrn->scrnIndex))
+		return FALSE;
+
+	pixmap = GetScratchPixmapHeader(pScreen,
+					fbcon->width, fbcon->height,
+					fbcon->depth, fbcon->bpp,
+					fbcon->pitch, NULL);
+	if (pixmap == NULL) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't allocate pixmap fbcon contents\n");
+		return NULL;
+	}
+
+	i830_set_pixmap_bo(pixmap, bo);
+	drm_intel_bo_unreference(bo);
+	drmModeFreeFB(fbcon);
+
+	return pixmap;
+}
+
+void drmmode_copy_fb(ScrnInfoPtr scrn)
+{
+	ScreenPtr pScreen = screenInfo.screens[scrn->scrnIndex];
+	intel_screen_private *intel = intel_get_screen_private(scrn);
+	PixmapPtr src, dst;
+	unsigned int pitch = scrn->displayWidth * intel->cpp;
+
+	src = drmmode_create_pixmap_for_fbcon(scrn);
+	if (src == NULL) {
+		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+			   "Couldn't create pixmap for fbcon\n");
+		return;
+	}
+
+	/* We dont have a screen Pixmap yet */
+	dst = GetScratchPixmapHeader(pScreen,
+				     scrn->virtualX, scrn->virtualY,
+				     scrn->depth, scrn->bitsPerPixel,
+				     pitch,
+				     NULL);
+	i830_set_pixmap_bo(dst, intel->front_buffer);
+
+	intel->uxa_driver->prepare_copy(src, dst, -1, -1, GXcopy, FB_ALLONES);
+
+	intel->uxa_driver->copy(dst, 0, 0, 0, 0,
+				scrn->virtualX, scrn->virtualY);
+
+	intel->uxa_driver->done_copy(dst);
+
+	intel_batch_submit (scrn, TRUE);
+
+	(*pScreen->DestroyPixmap)(src);
+	(*pScreen->DestroyPixmap)(dst);
+	FreeScratchPixmapsForScreen(pScreen->myNum);
+}
Index: xserver-xorg-video-intel/src/i830.h
===================================================================
--- xserver-xorg-video-intel.orig/src/i830.h	2010-09-23 16:26:34.385006000 +1000
+++ xserver-xorg-video-intel/src/i830.h	2010-09-23 16:29:20.555006001 +1000
@@ -423,6 +423,7 @@
 	OptionInfoPtr Options;
 
 	/* Driver phase/state information */
+	Bool starting;
 	Bool suspended;
 
 	enum last_3d last_3d;
@@ -486,6 +487,7 @@
 					 xf86CrtcPtr crtc);
 extern int drmmode_output_dpms_status(xf86OutputPtr output);
 extern int drmmode_crtc_id(xf86CrtcPtr crtc);
+extern void drmmode_copy_fb(ScrnInfoPtr scrn);
 
 extern Bool i830_crtc_on(xf86CrtcPtr crtc);
 extern int i830_crtc_to_pipe(xf86CrtcPtr crtc);
Index: xserver-xorg-video-intel/src/i830_driver.c
===================================================================
--- xserver-xorg-video-intel.orig/src/i830_driver.c	2010-09-23 16:26:34.165006000 +1000
+++ xserver-xorg-video-intel/src/i830_driver.c	2010-09-23 16:29:20.565006001 +1000
@@ -1093,6 +1093,8 @@
 	if (IS_I965G(intel))
 		gen4_render_state_init(scrn);
 
+	intel->starting = TRUE;
+
 	miClearVisualTypes();
 	if (!miSetVisualTypes(scrn->depth,
 			      miGetDefaultVisualMask(scrn->depth),
@@ -1231,6 +1233,7 @@
 	if (serverGeneration == 1)
 		xf86ShowUnusedOptions(scrn->scrnIndex, scrn->options);
 
+	intel->starting = FALSE;
 	intel->suspended = FALSE;
 
 	return uxa_resources_init(screen);
@@ -1289,6 +1292,9 @@
 
 	i830_set_gem_max_sizes(scrn);
 
+	if (!IS_GEN6(intel))
+		drmmode_copy_fb(scrn);
+
 	if (!xf86SetDesiredModes(scrn))
 		return FALSE;
 
