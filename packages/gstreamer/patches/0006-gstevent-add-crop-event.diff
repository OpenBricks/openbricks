From 85528bde89819a47559bb5b81413b2a2683b1d56 Mon Sep 17 00:00:00 2001
From: Rob Clark <rob@ti.com>
Date: Tue, 31 Aug 2010 19:08:53 -0500
Subject: [PATCH 6/6] gstevent: add crop event

This replaces vstab event, and includes width/height as well.

Note vstab event remains as wrapper for crop event for now for
compatibility.  But once other trees are updated, vstab event
should be removed and the patch squashed with this.
---
 gst/gstevent.c |   56 +++++++++++++++++++++++++++++++++++++++++++++++++-------
 gst/gstevent.h |    9 ++++++++-
 gst/gstquark.c |    2 +-
 gst/gstquark.h |    2 +-
 4 files changed, 59 insertions(+), 10 deletions(-)

diff --git a/gst/gstevent.c b/gst/gstevent.c
index 69b57ec..6d461dd 100644
--- a/gst/gstevent.c
+++ b/gst/gstevent.c
@@ -1248,16 +1248,49 @@ gst_event_parse_sink_message (GstEvent * event, GstMessage ** msg)
 GstEvent *
 gst_event_new_vstab (gint top, gint left)
 {
+  return gst_event_new_crop (top, left, -1, -1);
+}
+
+/**
+ * gst_event_parse_vstab:
+ * @event: The event to query
+ * @top: A pointer to store top offset in
+ * @left: A pointer to store left offset in
+ *
+ * Parse the vstab event.
+ */
+void
+gst_event_parse_vstab (GstEvent * event, gint * top, gint * left)
+{
+  gst_event_parse_crop (event, top, left, NULL, NULL);
+}
+
+/* TODO remove vstab event functions.. use crop instead.. */
+
+/**
+ * gst_event_new_crop:
+ * @top:  the new offset to top of sub-image
+ * @left:  the new offset to left of sub-image
+ * @width:  the new width
+ * @height:  the new height
+ *
+ * Create a new vstab event.
+ */
+GstEvent *
+gst_event_new_crop (gint top, gint left, gint width, gint height)
+{
   GstEvent *event;
   GstStructure *structure;
 
-  GST_CAT_INFO (GST_CAT_EVENT, "creating vstab event: top=%d, left=%d",
-      top, left);
+  GST_CAT_INFO (GST_CAT_EVENT, "creating crop event: %d,%d %dx%d",
+      top, left, width, height);
 
-  structure = gst_structure_id_new (GST_QUARK (EVENT_VSTAB),
+  structure = gst_structure_id_new (GST_QUARK (EVENT_CROP),
       GST_QUARK (TOP), G_TYPE_INT, top,
-      GST_QUARK (LEFT), G_TYPE_INT, left, NULL);
-  event = gst_event_new_custom (GST_EVENT_VSTAB, structure);
+      GST_QUARK (LEFT), G_TYPE_INT, left,
+      GST_QUARK (WIDTH), G_TYPE_INT, width,
+      GST_QUARK (HEIGHT), G_TYPE_INT, height, NULL);
+  event = gst_event_new_custom (GST_EVENT_CROP, structure);
 
   return event;
 }
@@ -1267,16 +1300,19 @@ gst_event_new_vstab (gint top, gint left)
  * @event: The event to query
  * @top: A pointer to store top offset in
  * @left: A pointer to store left offset in
+ * @width: A pointer to store width in
+ * @height: A pointer to store height in
  *
  * Parse the vstab event.
  */
 void
-gst_event_parse_vstab (GstEvent * event, gint * top, gint * left)
+gst_event_parse_crop (GstEvent * event, gint * top, gint * left,
+    gint * width, gint * height)
 {
   const GstStructure *structure;
 
   g_return_if_fail (GST_IS_EVENT (event));
-  g_return_if_fail (GST_EVENT_TYPE (event) == GST_EVENT_VSTAB);
+  g_return_if_fail (GST_EVENT_TYPE (event) == GST_EVENT_CROP);
 
   structure = gst_event_get_structure (event);
   if (top)
@@ -1285,4 +1321,10 @@ gst_event_parse_vstab (GstEvent * event, gint * top, gint * left)
   if (left)
     *left = g_value_get_int (gst_structure_id_get_value (structure,
             GST_QUARK (LEFT)));
+  if (width)
+    *width = g_value_get_int (gst_structure_id_get_value (structure,
+            GST_QUARK (WIDTH)));
+  if (height)
+    *height = g_value_get_int (gst_structure_id_get_value (structure,
+            GST_QUARK (HEIGHT)));
 }
diff --git a/gst/gstevent.h b/gst/gstevent.h
index 3402ccb..66c61fd 100644
--- a/gst/gstevent.h
+++ b/gst/gstevent.h
@@ -136,7 +136,8 @@ typedef enum {
   GST_EVENT_TAG                   = GST_EVENT_MAKE_TYPE (7, FLAG(DOWNSTREAM) | FLAG(SERIALIZED)),
   GST_EVENT_BUFFERSIZE            = GST_EVENT_MAKE_TYPE (8, FLAG(DOWNSTREAM) | FLAG(SERIALIZED)),
   GST_EVENT_SINK_MESSAGE          = GST_EVENT_MAKE_TYPE (9, FLAG(DOWNSTREAM) | FLAG(SERIALIZED)),
-  GST_EVENT_VSTAB                 = GST_EVENT_MAKE_TYPE (10, FLAG(DOWNSTREAM) | FLAG(SERIALIZED)),
+  GST_EVENT_CROP                  = GST_EVENT_MAKE_TYPE (10, FLAG(DOWNSTREAM) | FLAG(SERIALIZED)),
+  GST_EVENT_VSTAB                 = GST_EVENT_CROP,
   /* upstream events */
   GST_EVENT_QOS                   = GST_EVENT_MAKE_TYPE (15, FLAG(UPSTREAM)),
   GST_EVENT_SEEK                  = GST_EVENT_MAKE_TYPE (16, FLAG(UPSTREAM)),
@@ -491,6 +492,12 @@ void            gst_event_parse_step            (GstEvent *event, GstFormat *for
 GstEvent *      gst_event_new_vstab             (gint top, gint left);
 void            gst_event_parse_vstab           (GstEvent * event, gint * top, gint * left);
 
+/* crop event */
+GstEvent *      gst_event_new_crop              (gint top, gint left, gint width, gint height);
+void            gst_event_parse_crop            (GstEvent * event, gint * top, gint * left,
+                                                 gint * width, gint * height);
+
+
 G_END_DECLS
 
 #endif /* __GST_EVENT_H__ */
diff --git a/gst/gstquark.c b/gst/gstquark.c
index 491b1d9..f8716cc 100644
--- a/gst/gstquark.c
+++ b/gst/gstquark.c
@@ -50,7 +50,7 @@ static const gchar *_quark_strings[] = {
   "intermediate", "GstMessageStepStart", "active", "eos", "sink-message",
   "message", "GstMessageQOS", "running-time", "stream-time", "jitter",
   "quality", "processed", "dropped", "buffering-ranges", "GstQueryBuffers",
-  "caps", "count", "width", "height", "GstEventVstab", "top", "left"
+  "caps", "count", "width", "height", "GstEventCrop", "top", "left"
 };
 
 GQuark _priv_gst_quark_table[GST_QUARK_MAX];
diff --git a/gst/gstquark.h b/gst/gstquark.h
index 506cf95..6eeb77f 100644
--- a/gst/gstquark.h
+++ b/gst/gstquark.h
@@ -132,7 +132,7 @@ typedef enum _GstQuarkId
   GST_QUARK_COUNT = 103,
   GST_QUARK_WIDTH = 104,
   GST_QUARK_HEIGHT = 105,
-  GST_QUARK_EVENT_VSTAB = 106,
+  GST_QUARK_EVENT_CROP = 106,
   GST_QUARK_TOP = 107,
   GST_QUARK_LEFT = 108,
 
-- 
1.7.1

