#!/bin/sh

. config/options
get_meta $1

$SCRIPTS/installdev make
$SCRIPTS/installdev sed

do_unselect_opt () {
  sed -i "s%^CONFIG_$1=.*%# CONFIG_$1 is not set%" $PKG_BUILD_DIR/.config
}

do_unselect () {
  pkg_uses $1 $2 || \
    sed -i "s%^CONFIG_$3=.*%# CONFIG_$3 is not set%" $PKG_BUILD_DIR/.config
}

case $TARGET_ARCH in
  i386|x86_64)
    TARGET_LINUX_ARCH=$TARGET_ARCH
    ;;
  powerpc|powerpc64)
    TARGET_LINUX_ARCH=powerpc
    ;;
  arm)
    TARGET_LINUX_ARCH=arm
    ;;
  *)
    TARGET_LINUX_ARCH=$TARGET_ARCH
    ;;
esac

# try to guess the appropriate kernel configuration file
if [ -f $CONFIG_PLATFORM/$1.conf ]; then
  KERNEL_CFG_FILE="$CONFIG_PLATFORM/$1.conf"
elif [ -f $CONFIG_PLATFORM_GENERIC/$1.conf ]; then
  echo "found $CONFIG_PLATFORM_GENERIC/$1.conf, using it"
  KERNEL_CFG_FILE="$CONFIG_PLATFORM_GENERIC/$1.conf"
fi

if [ -f $CONFIG_MACHINE/$1.conf ] ; then
  echo "found $CONFIG_MACHINE/$1.conf, using it"
  KERNEL_CFG_FILE="$KERNEL_CFG_FILE $CONFIG_MACHINE/$1.conf"
fi
  
if [ -f $CONFIG_FLAVOUR/$1.conf ] ; then
  echo "found $CONFIG_FLAVOUR/$1.conf, usinng it"
  KERNEL_CFG_FILE="$KERNEL_CFG_FILE $CONFIG_FLAVOUR/$1.conf"
fi

if [ -z "$KERNEL_CFG_FILE" ]; then
  echo "Unable to find a matching kernel configuration file !!"
  exit 1
fi

echo "Using kernel config from: $KERNEL_CFG_FILE"


# Patch Makefile (sufficient for kernels < 5)
sed -i -e "s|^HOSTCC[[:space:]]*=.*$|HOSTCC = $HOST_CC|" \
       -e "s|^HOSTCXX[[:space:]]*=.*$|HOSTCXX = $HOST_CXX|" \
       -e "s|^ARCH[[:space:]]*?=.*$|ARCH = $TARGET_LINUX_ARCH|" \
       -e "s|^CROSS_COMPILE[[:space:]]*?=.*$|CROSS_COMPILE = $TARGET_PREFIX|" \
       $PKG_BUILD_DIR/Makefile

# Allow initial header build with kernel versions >= 5
[ -e ${TARGET_PREFIX}gcc ] && export CROSS_COMPILE=$TARGET_PREFIX

$ROOT/$PACKAGES/$PKG_SECTION/$1/scripts/merge_config.sh -m -O $PKG_BUILD_DIR $KERNEL_CFG_FILE

# conditionally unselect some components
do_unselect $1 alsa       SND
do_unselect $1 bluetooth  BT
do_unselect $1 dab        DAB
do_unselect $1 dvb        DVB_CORE
do_unselect $1 ethernet   NET_ETHERNET
do_unselect $1 hwmon      HWMON
do_unselect $1 gameport   GAMEPORT
do_unselect $1 intel      DRM_I810
do_unselect $1 intel      DRM_I830
do_unselect $1 intel      DRM_I915
do_unselect $1 ipv6       IPV6
do_unselect $1 lirc       RC_CORE
do_unselect $1 lvm        MD
do_unselect $1 mga        DRM_MGA
do_unselect $1 mmc        MMC
do_unselect $1 ms         MEMSTICK
do_unselect $1 nouveau    DRM_NOUVEAU
do_unselect $1 pata       ATA
do_unselect $1 pccard     PCCARD
do_unselect $1 poulsbo    STUB_POULSBO
do_unselect $1 r128       DRM_R128
do_unselect $1 radeon     DRM_RADEON
do_unselect $1 radio      RADIO_ADAPTERS
do_unselect $1 rtc        RTC
do_unselect $1 sata       ATA
do_unselect $1 savage     DRM_SAVAGE
do_unselect $1 sis        DRM_SIS
do_unselect $1 tdfx       DRM_TDFX
do_unselect $1 tidsp      TIDSPBRIDGE
do_unselect $1 unichrome  DRM_VIA
do_unselect $1 usb        USB_SUPPORT
do_unselect $1 usbnet     USB_USBNET
do_unselect $1 v4l        VIDEO_DEV
do_unselect $1 wifi       WIRELESS
do_unselect $1 wifi       WIRELESS_EXT
do_unselect $1 vmwgfx     DRM_VMWGFX

if [ "$COMPRESSION_METHOD" = xz ]; then
  do_unselect_opt KERNEL_GZIP
  do_unselect_opt RD_GZIP
elif [ "$COMPRESSION_METHOD" = gzip ]; then
  do_unselect_opt KERNEL_XZ
  do_unselect_opt RD_XZ
  do_unselect_opt SQUASHFS_XZ
  do_unselect_opt XZ_DEC
fi

# Fixup old kernels to compile with gcc versions >= 5
v=$(grep "^VERSION " $PKG_BUILD_DIR/Makefile)
if [ "${v##* }" -lt 4 ]; then
  echo "Replacing 'include/linux/compiler-gccX.h' with a recent version"
  mkdir -p $PKG_BUILD_DIR/include/linux/_gccX.orig
  mv $PKG_BUILD_DIR/include/linux/compiler-gcc* $PKG_BUILD_DIR/include/linux/_gccX.orig
  cp $ROOT/$PACKAGES/$PKG_SECTION/$1/patches/compiler-gcc.h $PKG_BUILD_DIR/include/linux

  echo "Fixing 'scripts/sortextable.h'"
  [ -e $PKG_BUILD_DIR/scripts/sortextable.h ] && \
    sed -e "s/int relocs_size;$/int relocs_size = 0;/" -i $PKG_BUILD_DIR/scripts/sortextable.h
fi

yes "" | make -C $PKG_BUILD_DIR oldconfig

[ "${v##* }" -lt 5 ] && make -C $PKG_BUILD_DIR prepare1 || true
