diff -Naur a/Kconfig b/Kconfig
--- a/drivers/rtc/Kconfig	2013-07-13 14:22:27.963639909 +0200
+++ b/drivers/rtc/Kconfig	2013-07-13 09:18:14.000000000 +0200
@@ -389,6 +389,15 @@
 	  This driver can also be built as a module. If so, the module
 	  will be called rtc-rv3029c2.
 
+config RTC_DRV_ABIORTC
+	tristate "ABIORTC (NXP PCF2129 in I2C mode)"
+	help
+	  If you say yes here you get support for the ABIORTC
+	  module for RaspberryPi (http://www.axiris.eu).
+
+	  This driver can also be built as a module. If so, the module
+	  will be called rtc-abiortc.
+
 endif # I2C
 
 comment "SPI RTC drivers"
diff -Naur a/Makefile b/Makefile
--- a/drivers/rtc/Makefile	2013-07-13 14:22:44.887640171 +0200
+++ b/drivers/rtc/Makefile	2013-07-13 09:14:17.000000000 +0200
@@ -77,6 +77,7 @@
 obj-$(CONFIG_RTC_DRV_PCF8563)	+= rtc-pcf8563.o
 obj-$(CONFIG_RTC_DRV_PCF8583)	+= rtc-pcf8583.o
 obj-$(CONFIG_RTC_DRV_PCF2123)	+= rtc-pcf2123.o
+obj-$(CONFIG_RTC_DRV_ABIORTC)	+= rtc-abiortc.o
 obj-$(CONFIG_RTC_DRV_PCF50633)	+= rtc-pcf50633.o
 obj-$(CONFIG_RTC_DRV_PL030)	+= rtc-pl030.o
 obj-$(CONFIG_RTC_DRV_PL031)	+= rtc-pl031.o
diff -Naur a/rtc-abiortc.c b/rtc-abiortc.c
--- a/drivers/rtc/rtc-abiortc.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/rtc/rtc-abiortc.c	2013-07-13 14:25:26.267642682 +0200
@@ -0,0 +1,267 @@
+/*
+ *  drivers/rtc/rtc-abiortc.c
+ *
+ *  Copyright (C) 2013 Rüdiger Ihle
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ *  Driver for ABIORTC module for RaspberryPi (http://www.axiris.eu)
+ *
+ */
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <linux/rtc.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/bcd.h>
+
+
+struct abiortc {
+	struct rtc_device *rtc;
+};
+
+
+#define REG_CTRL_1		0
+#define REG_CTRL_2		1
+#define REG_CTRL_3		2
+
+#define REG_SEC			3
+#define REG_MIN			4
+#define REG_HOUR		5
+#define REG_DAY			6
+#define REG_WDAY		7
+#define REG_MONTH		8
+#define REG_YEAR		9
+
+#define REG_AL_SEC		10
+#define REG_AL_MIN		11
+#define REG_AL_HOUR		12
+#define REG_AL_DAY		13
+#define REG_AL_WDAY		14
+
+#define REG_CLKOUT		15
+#define REG_WD_CTRL		16
+#define REG_WD_VAL		17
+#define REG_TS_CTRL		18
+#define REG_TS_SEC		19
+#define REG_TS_MIN		20
+#define REG_TS_HOUR		21
+#define REG_TS_DAY		22
+#define REG_TS_MONTH		23
+#define REG_TS_YEAR		24
+
+#define REG_AGING_OFFS		25
+#define REG_INTERNAL_1		26
+#define REG_INTERNAL_2		27
+
+
+#define CTRL_1_EXT_TEST		0x80
+#define CTRL_1_STOP		0x20
+#define CTRL_1_TSF1		0x10
+#define CTRL_1_POR_OVRD		0x08
+#define CTRL_1_12_24		0x04
+#define CTRL_1_MI		0x02
+#define CTRL_1_SI		0x01
+
+#define CTRL_2_MSF		0x80
+#define CTRL_2_WDTF		0x40
+#define CTRL_2_TSF2		0x20
+#define CTRL_2_AF		0x10
+#define CTRL_2_TSIE		0x04
+#define CTRL_2_AIE		0x02
+
+#define CTRL_3_PWRMGMT		0xe0
+#define CTRL_3_BTFE		0x10
+#define CTRL_3_BF		0x08
+#define CTRL_3_BLF		0x04
+#define CTRL_3_BIE		0x02
+#define CTRL_3_BLIE		0x01
+
+
+static struct i2c_driver abiortc_driver;
+
+
+static int abiortc_read_regs(struct i2c_client *client, 
+			      unsigned char firstReg, 
+			      unsigned char numRegs, void *buffer)
+{
+	struct i2c_msg msgs[2] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 1,
+			.buf = &firstReg,
+		}, {
+			.addr = client->addr,
+			.flags = I2C_M_RD,
+			.len = numRegs,
+			.buf = buffer,
+		}
+	};
+
+	memset(buffer, 0, numRegs);
+	return ( i2c_transfer(client->adapter, msgs, 2) == 2 ) ? 0 : -EIO;
+}
+
+static int abiortc_write_regs(struct i2c_client *client, 
+			       unsigned char firstReg, 
+			       unsigned char numRegs, void *buffer)
+{
+      unsigned char buf[256];
+      
+      buf[0] = firstReg;
+      memcpy(&buf[1], buffer, numRegs++);
+
+      return ( i2c_master_send(client, (char *)buf, numRegs) == numRegs ) ? 0 : -EIO;
+}
+
+static int abiortc_rtc_read_time(struct device *dev, struct rtc_time *tm)
+{
+	int ret;
+	unsigned char buf[10];
+
+	ret = abiortc_read_regs(to_i2c_client(dev), REG_CTRL_1, sizeof(buf), buf);
+
+	if (ret == 0) {
+		tm->tm_sec  = bcd2bin(buf[REG_SEC] & 0x7f);
+		tm->tm_min  = bcd2bin(buf[REG_MIN] & 0x7f);
+		tm->tm_hour = bcd2bin(buf[REG_HOUR] & 0x3f);
+		tm->tm_mday = bcd2bin(buf[REG_DAY] & 0x3f);
+		tm->tm_mon  = bcd2bin(buf[REG_MONTH] & 0x1f) - 1;
+		tm->tm_wday = buf[REG_WDAY] & 0x07;
+		tm->tm_year = bcd2bin(buf[REG_YEAR]);
+		if (tm->tm_year < 70)
+			tm->tm_year += 100;
+
+		dev_dbg(dev, "%s: tm is secs=%d, mins=%d, hours=%d, "
+			"mday=%d, mon=%d, year=%d, wday=%d\n",
+			__func__,
+			tm->tm_sec, tm->tm_min, tm->tm_hour,
+			tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
+
+		if (rtc_valid_tm(tm) < 0)
+		      dev_err(dev, "retrieved date/time is not valid.\n");
+	}
+
+	return ret;
+}
+
+static int abiortc_rtc_set_time(struct device *dev, struct rtc_time *tm)
+{
+	unsigned char buf[10];
+
+	buf[REG_SEC]	= bin2bcd(tm->tm_sec);
+	buf[REG_MIN]	= bin2bcd(tm->tm_min);
+	buf[REG_HOUR]	= bin2bcd(tm->tm_hour);
+	buf[REG_DAY]	= bin2bcd(tm->tm_mday);
+	buf[REG_MONTH]	= bin2bcd(tm->tm_mon + 1);
+	buf[REG_WDAY]	= tm->tm_wday;
+	buf[REG_YEAR]	= bin2bcd(tm->tm_year < 100 ? tm->tm_year : tm->tm_year - 100);
+
+	dev_dbg(dev, "%s: tm is secs=%d, mins=%d, hours=%d, "
+		"mday=%d, mon=%d, year=%d, wday=%d\n",
+		__func__,
+		tm->tm_sec, tm->tm_min, tm->tm_hour,
+		tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
+
+	return abiortc_write_regs(to_i2c_client(dev), REG_SEC, 7, &buf[REG_SEC]);
+}
+
+static const struct rtc_class_ops abiortc_rtc_ops = {
+	.read_time	= abiortc_rtc_read_time,
+	.set_time	= abiortc_rtc_set_time,
+};
+
+static int abiortc_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	struct abiortc *abiortc;
+	int err;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+
+	abiortc = kzalloc(sizeof(struct abiortc), GFP_KERNEL);
+	if (!abiortc)
+		return -ENOMEM;
+
+	i2c_set_clientdata(client, abiortc);
+
+	abiortc->rtc = rtc_device_register(abiortc_driver.driver.name,
+			&client->dev, &abiortc_rtc_ops, THIS_MODULE);
+
+	if (IS_ERR(abiortc->rtc)) {
+		err = PTR_ERR(abiortc->rtc);
+		goto exit_kfree;
+	}
+
+	return 0;
+
+exit_kfree:
+	kfree(abiortc);
+	return err;
+}
+
+static int abiortc_remove(struct i2c_client *client)
+{
+	struct abiortc *abiortc = i2c_get_clientdata(client);
+
+	if (abiortc->rtc)
+		rtc_device_unregister(abiortc->rtc);
+	kfree(abiortc);
+	return 0;
+}
+
+static int abiortc_detect(struct i2c_client *new_client,
+			   struct i2c_board_info *info)
+{
+	unsigned char buf[10];
+
+	if (!i2c_check_functionality(new_client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+	
+	if (abiortc_read_regs(new_client, REG_CTRL_1, sizeof(buf), buf) != 0)
+		return -ENODEV;
+
+	printk(KERN_DEBUG "%s: %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n", 
+	      __func__, buf[0], buf[1], buf[2], buf[3], 
+	      buf[4], buf[5], buf[6], buf[7], buf[8], buf[9]);
+
+	if (buf[REG_CTRL_1] & (CTRL_1_STOP | CTRL_1_12_24)) {
+		buf[REG_CTRL_1] = buf[REG_CTRL_2] = buf[REG_CTRL_3] = 0;
+		if (abiortc_write_regs(new_client, REG_CTRL_1, 3, &buf[REG_CTRL_1]) != 0) {
+			printk(KERN_ERR "%s: failed to write RTC control registers\n", __func__);
+		}
+	}
+
+	strlcpy(info->type, "abiortc", I2C_NAME_SIZE);
+	return 0;
+}
+
+static const struct i2c_device_id abiortc_id[] = {
+	{ "abiortc", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, abiortc_id);
+
+static struct i2c_driver abiortc_driver = {
+	.driver = {
+		.name	= "abiortc",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= abiortc_probe,
+	.remove		= abiortc_remove,
+	.id_table	= abiortc_id,
+	.class		= I2C_CLASS_HWMON | I2C_CLASS_DDC, /* HWMON->BSC0, DDC->BSC1 */
+	.detect		= abiortc_detect,
+	.address_list	= I2C_ADDRS(0x51),
+};
+
+module_i2c_driver(abiortc_driver);
+
+MODULE_AUTHOR("Rüdiger Ihle");
+MODULE_DESCRIPTION("ABIORTC I2C RTC driver");
+MODULE_LICENSE("GPL");
