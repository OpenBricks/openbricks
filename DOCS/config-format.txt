OpenBricks Configuration System
===============================

Introduction
------------

OpenBricks uses a Kconfig-based interface to allow the user to customize the
system to suit his requirements. The configuration menu is built from several
sources:

* the main Kconfig definition file (config/Kconfig.main)
* the architecture Kconfig file (config/Kconfig.arch)
* the generated Kconfig files (build/config/Kconfig.*)

The following table details the various generated Kconfig files:

.Generated Kconfig files
[options="header"]
|==================================================================================================================
|Kconfig file     |Creator script           |Source material              |Kconfig menu
|Kconfig.generated|scripts/kconfiginit      |VERSION                      |Version header
|Kconfig.flavours |scripts/flavours2kconfig |config/flavours/*/meta       |Flavour, Distribution name
|Kconfig.platform |scripts/platforms2kconfig|config/platforms/\*/*/Kconfig|General setup -> Target platform
|Kconfig.remote   |scripts/remotes2kconfig  |packages/lirc*/config/lircd* |Settings -> Remote, Settings -> Receiver
|Kconfig.use      |scripts/use2kconfig      |config/use                   |Features
|Kconfig.packages |scripts/meta2kconfig     |packages/*/meta              |Packages
|==================================================================================================================

After the user has completed the configuration selections, a .config file is
created. The .config file is used by scripts/kconfig2options to create
config/options, which is the file actually used by the rest of the OpenBricks
build system.

Kconfig syntax
--------------

For general informations about the Kconfig syntax refer to
DOCS/kconfig-language.txt. In addition to the syntax specifications, OpenBricks
uses some conventions in its Kconfig files:

* hand-written Kconfig entries (e.g. TARGET_LIBC) are in uppercase, but
  subentries can be in lowercase (e.g. TARGET_LIBC_eglibc);
* all entries starting with the 'OPT_' prefix are exported to config/options;
  for example, OPT_TOOLCHAIN_CXX=y in .config will become TOOLCHAIN_CXX=yes in
  config/options;
* all features have a USE_feature entry (e.g. USE_bluetooth)
* all packages have a PKG_package entry (e.g. PKG_MPlayer)

Configuration menu elements
---------------------------

Flavours
~~~~~~~~

Flavours are defined in config/flavours, where every flavour has a
subdirectory. Most settings are defined in the meta file:

* FLAVOUR_NAME
 ** the name of the flavour
 ** must coincide with the flavour directory name
* FLAVOUR_DISTRONAME
 ** the user-visible flavour name
* FLAVOUR_DEPENDS
 ** the packages the flavour requires to be installed
 ** can be 'all' to require all packages
 ** defaults to "" (no package)
* FLAVOUR_USE
 ** the features (i.e. use flags) the flavours requires to be enabled by
    default
 ** can be 'all' to require all features
 ** defaults to "" (no feature)
* FLAVOUR_SHORTDESC
 ** used as the short description for the flavour
 ** should be one-line summary
* FLAVOUR_LONGDESC
 ** used as the long description for the flavour

In addition, a flavour can define arch-specific depends using
FLAVOUR_DEPENDS_$arch (e.g. FLAVOUR_DEPENDS_arm). A flavour can
override the default BusyBox configuration with a busybox.conf file in its 
directory.

Platforms
~~~~~~~~~

Platforms are defined in config/platforms; every architecture has a
subdirectory, and every platform is under one of the arch subdirectories.

Remotes
~~~~~~~

Remotes are defined by LIRC configuration files in packages/lirc/config.


Features
~~~~~~~~

Features are defined in config/use.

Packages
~~~~~~~~

Packages are defined by meta files under the packages/ directory.
