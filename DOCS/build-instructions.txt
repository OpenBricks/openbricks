OpenBricks Build Instructions
=============================

OpenBricks is meant for you to be able to create a fully customized system. It can build nearly anything you want and assemble the system of your dreams but it needs to be configured for that first.

After having fetch the OpenBricks sources, the very first thing to do is to start the configuration. You may proceed by doing the following:

'make menuconfig'

From there, you may want to select the kind of distribution flavour you want to build. The flavour is only a pre-defined configuration, but you can obviously completely customize it.

By _General setup_ menu, you may want to configure the target architecture and platform you want to build your distribution for (e.g. _x86 ION_ system or _ARM OMAP4_ board). Depending on your build system, you may want to increase the concurrency make level as to use a maximum number of CPU cores to fasten the build process. If you work in a company and have multiple developers working on the same LAN, you may also want to specify a previously setup mirror server for packages tarball sources to be downloaded from instead of going on the Internet each time.

Next thing is to configure the various settings and the target images. You may want to build either a traditional rootfs, a bootable ISO for LiveCD or a network capable PXE-aware filesystem. Also possible is to configure the localization support.

Feel free after that to proceed with fine-tuning by selecting the features and packages you want to be included. Dependancies are automatically handled so that you shouldn't have to vary about the whole system's consistency.

Once satisfied, exit the configuration menu and make sure to save all of your changes. The resulting 'config/options' file should now have been generated.

That's it, you're ready to build. Just 'make' at shell prompt and wait for a couple hours, depending on the packages and configuration you have chosen.

For a exhaustive list of supported commands, you may have a look at the top-level _Makefile_ but the main options are:

* *make* : proceed with a complete build of your distribution.
* *make clean*: clean up all build files.
* *make clean-doc*: clean up the documentation.
* *make dist*: create a tarball of all your sources, ready for distribution.
* *make distclean*: clean up all build files, documentation and external tarballs.
* *make doc*: cleanup the generated documentation files.
* *make get*: retrieve all tarballs and package sources.
* *make iso*: build a LiveCD ISO image, ready to be burned and used (mostly usefull for x86 targets only).
* *make menuconfig*: start the curses-based distribution configuration and customization menu.
* *make qemu*: runs your built-up distribution image in QEMU emulator.
* *make vmx*: build a VMware-compatible virtual machine image (only makes sense with x86 target build).
* *make vmx-play*: starts up the previously built virtual machine in VMware's vmplayer.

// vim: set syntax=asciidoc:
