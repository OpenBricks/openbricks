From 5353119b53848177d9b48af454b796e1343cd911 Mon Sep 17 00:00:00 2001
From: Rob Clark <rob@ti.com>
Date: Sat, 12 Jun 2010 17:51:03 -0500
Subject: [PATCH 3/8] ugly hack to avoid a memcpy

Ideally, we'd rather libvpx could decode directly into a gst buffer, but for
now this is how to avoid an extra memcpy

Also enable multi-thread support, and for now disable encoder.
---
 configure.ac                             |    1 +
 ext/vp8/Makefile.am                      |    1 +
 ext/vp8/armv7.s                          |  182 +++++++++++++++++++
 ext/vp8/gst/video/gstbasevideoutils.c    |  278 ++++++++++++++++++++++++++++++
 ext/vp8/gstvp8dec.c                      |  109 +++++++++++-
 ext/vp8/plugin.c                         |    4 +-
 gst-libs/gst/video/gstbasevideodecoder.c |    9 +-
 gst-libs/gst/video/gstbasevideoutils.h   |    2 +-
 8 files changed, 572 insertions(+), 14 deletions(-)
 create mode 100644 ext/vp8/armv7.s
 create mode 100644 ext/vp8/gst/video/gstbasevideoutils.c

diff --git a/configure.ac b/configure.ac
index 499b51e..10fb2c8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -48,6 +48,7 @@ dnl AS_LIBTOOL_TAGS([CXX])
 
 AC_LIBTOOL_WIN32_DLL
 AM_PROG_LIBTOOL
+AM_PROG_AS
 
 dnl *** required versions of GStreamer stuff ***
 GST_REQ=0.10.30
diff --git a/ext/vp8/Makefile.am b/ext/vp8/Makefile.am
index 43989d6..f1a4438 100644
--- a/ext/vp8/Makefile.am
+++ b/ext/vp8/Makefile.am
@@ -2,6 +2,7 @@ plugin_LTLIBRARIES = \
 	libgstvp8.la
 
 libgstvp8_la_SOURCES = \
+	armv7.s \
 	gstvp8dec.c \
 	gstvp8enc.c \
 	gstvp8utils.c \
diff --git a/ext/vp8/armv7.s b/ext/vp8/armv7.s
new file mode 100644
index 0000000..2697a14
--- /dev/null
+++ b/ext/vp8/armv7.s
@@ -0,0 +1,182 @@
+@ GStreamer
+@
+@ Copyright (C) 2009 Texas Instruments, Inc - http://www.ti.com/
+@
+@ Description: NEON/VFP accelerated functions for armv7 architecture
+@  Created on: Nov 27, 2009
+@      Author: Rob Clark <rob@ti.com>
+@
+@ This library is free software; you can redistribute it and/or
+@ modify it under the terms of the GNU Library General Public
+@ License as published by the Free Software Foundation; either
+@ version 2 of the License, or (at your option) any later version.
+@
+@ This library is distributed in the hope that it will be useful,
+@ but WITHOUT ANY WARRANTY; without even the implied warranty of
+@ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+@ Library General Public License for more details.
+@
+@ You should have received a copy of the GNU Library General Public
+@ License along with this library; if not, write to the
+@ Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+@ Boston, MA 02111-1307, USA.
+
+       .fpu neon
+       .text
+
+       .align
+       .global stride_copy_zip2
+       .type   stride_copy_zip2, %function
+@void
+@stride_copy_zip2 (guchar *new_buf, guchar *orig_buf1, guchar *orig_buf2, gint sz)
+@{
+@@@@ note: r0-r3, q0-3, and q8-q15 do not need to be preserved
+stride_copy_zip2:
+@ interleave remaining >= 16 bytes:
+       pld [r1, #64]
+       pld [r2, #64]
+       cmp r3, #16
+       blt stride_copy_zip2_2
+stride_copy_zip2_1:
+       vld1.8 {q8}, [r1]!
+       vld1.8 {q9}, [r2]!
+
+       vzip.8 q8, q9
+
+       pld [r1, #64]
+       vst1.8 {q8,q9}, [r0]!
+       pld [r2, #64]
+       sub r3, r3, #16
+
+       cmp r3, #16
+       bge stride_copy_zip2_1
+@ interleave remaining >= 8 bytes:
+stride_copy_zip2_2:
+       cmp r3, #8
+       blt stride_copy_zip2_3
+
+       vld1.8 {d16}, [r1]!
+       vld1.8 {d17}, [r2]!
+
+       vzip.8 d16, d17
+
+       vst1.8 {d16,d17}, [r0]!
+       sub r3, r3, #8
+
+@ interleave remaining < 8 bytes:
+stride_copy_zip2_3:
+@XXX
+       bx lr
+@}
+
+
+       .align
+       .global stride_copy_zip3a
+       .type   stride_copy_zip3a, %function
+@void
+@stride_copy_zip3a (guchar *new_buf,
+@    guchar *orig_buf1, guchar *orig_buf2, guchar *orig_buf3, gint sz)
+@{
+@@@@ note: r0-r3, q0-3, and q8-q15 do not need to be preserved
+stride_copy_zip3a:
+       pld [r1, #64]
+       pld [r2, #64]
+       pld [r3, #64]
+       ldr ip, [sp]     @ the sz arg
+@ interleave remaining >= 32 bytes:
+       cmp ip, #32
+       blt stride_copy_zip3a_2
+stride_copy_zip3a_1:
+       vld1.8 {q8},      [r1]!  @ Y
+       vld1.8 {q10},     [r1]!  @ Y
+       vld1.8 {q9},      [r2]!  @ U
+       vld1.8 {q11},     [r3]!  @ V
+
+       pld [r1, #64]
+       pld [r2, #64]
+       pld [r3, #64]
+
+       vzip.8 q9, q11           @ interleave U&V
+       vzip.8 q8, q9            @ interleave Y1UV1
+       vzip.8 q10, q11          @ interleave Y2UV2
+
+       vst1.8 {q8,q9},   [r0]!
+       vst1.8 {q10,q11}, [r0]!
+
+       sub ip, ip, #32
+
+       cmp ip, #32
+       bge stride_copy_zip3a_1
+@ interleave remaining >= 16 bytes:
+stride_copy_zip3a_2:
+       cmp ip, #16
+       blt stride_copy_zip3a_3
+
+       vld1.8 {d16},     [r1]!  @ Y
+       vld1.8 {d18},     [r1]!  @ Y
+       vld1.8 {d17},     [r2]!  @ U
+       vld1.8 {d19},     [r3]!  @ V
+
+       vzip.8 d17, d19          @ interleave U&V
+       vzip.8 d16, d17          @ interleave Y1UV1
+       vzip.8 d18, d19          @ interleave Y2UV2
+
+       vst1.8 {d16,d17}, [r0]!
+       vst1.8 {d18,d19}, [r0]!
+
+       sub ip, ip, #16
+@ copy remaining >= 8 bytes:
+stride_copy_zip3a_3:
+@XXX
+       bx lr
+@}
+
+
+       .align
+       .global stride_copy
+       .type   stride_copy, %function
+@void
+@stride_copy (guchar *new_buf, guchar *orig_buf, gint sz)
+@{
+@@@@ note: r0-r3, q0-3, and q8-q15 do not need to be preserved
+stride_copy:
+@ copy remaining >= 64 bytes:
+       pld [r1, #64]
+       cmp r2, #64
+       blt stride_copy_2
+stride_copy_1:
+       vld1.8 {q8-q9},  [r1]!
+       sub r2, r2, #64
+       vld1.8 {q10-q11},[r1]!
+       vst1.8 {q8-q9},  [r0]!
+       pld [r1, #64]
+       cmp r2, #64
+       vst1.8 {q10-q11},[r0]!
+       bge stride_copy_1
+@ copy remaining >= 32 bytes:
+stride_copy_2:
+       cmp r2, #32
+       blt stride_copy_3
+       vld1.8 {q8-q9}, [r1]!
+       sub r2, r2, #32
+       vst1.8 {q8-q9}, [r0]!
+@ copy remaining >= 16 bytes:
+stride_copy_3:
+       cmp r2, #16
+       blt stride_copy_4
+       vld1.8 {q8}, [r1]!
+       sub r2, r2, #16
+       vst1.8 {q8}, [r0]!
+@ copy remaining >= 8 bytes:
+stride_copy_4:
+       cmp r2, #8
+       blt stride_copy_5
+       vld1.8 {d16}, [r1]!
+       sub r2, r2, #8
+       vst1.8 {d16}, [r0]!
+@ copy remaining < 8 bytes:
+stride_copy_5:
+@XXX
+       bx lr
+@}
+
diff --git a/ext/vp8/gst/video/gstbasevideoutils.c b/ext/vp8/gst/video/gstbasevideoutils.c
new file mode 100644
index 0000000..f26e068
--- /dev/null
+++ b/ext/vp8/gst/video/gstbasevideoutils.c
@@ -0,0 +1,278 @@
+/* GStreamer
+ * Copyright (C) 2008 David Schleef <ds@schleef.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "gstbasevideoutils.h"
+
+#include <string.h>
+
+GST_DEBUG_CATEGORY_EXTERN (basevideo_debug);
+#define GST_CAT_DEFAULT basevideo_debug
+
+
+#if 0
+guint64
+gst_base_video_convert_bytes_to_frames (GstVideoState * state, guint64 bytes)
+{
+  return gst_util_uint64_scale_int (bytes, 1, state->bytes_per_picture);
+}
+
+guint64
+gst_base_video_convert_frames_to_bytes (GstVideoState * state, guint64 frames)
+{
+  return frames * state->bytes_per_picture;
+}
+#endif
+
+
+gboolean
+gst_base_video_rawvideo_convert (GstVideoState * state,
+    GstFormat src_format, gint64 src_value,
+    GstFormat * dest_format, gint64 * dest_value)
+{
+  gboolean res = FALSE;
+
+  if (src_format == *dest_format) {
+    *dest_value = src_value;
+    return TRUE;
+  }
+
+  if (src_format == GST_FORMAT_BYTES &&
+      *dest_format == GST_FORMAT_DEFAULT && state->bytes_per_picture != 0) {
+    /* convert bytes to frames */
+    *dest_value = gst_util_uint64_scale_int (src_value, 1,
+        state->bytes_per_picture);
+    res = TRUE;
+  } else if (src_format == GST_FORMAT_DEFAULT &&
+      *dest_format == GST_FORMAT_BYTES && state->bytes_per_picture != 0) {
+    /* convert bytes to frames */
+    *dest_value = src_value * state->bytes_per_picture;
+    res = TRUE;
+  } else if (src_format == GST_FORMAT_DEFAULT &&
+      *dest_format == GST_FORMAT_TIME && state->fps_n != 0) {
+    /* convert frames to time */
+    /* FIXME add segment time? */
+    *dest_value = gst_util_uint64_scale (src_value,
+        GST_SECOND * state->fps_d, state->fps_n);
+    res = TRUE;
+  } else if (src_format == GST_FORMAT_TIME &&
+      *dest_format == GST_FORMAT_DEFAULT && state->fps_d != 0) {
+    /* convert time to frames */
+    /* FIXME subtract segment time? */
+    *dest_value = gst_util_uint64_scale (src_value, state->fps_n,
+        GST_SECOND * state->fps_d);
+    res = TRUE;
+  }
+
+  /* FIXME add bytes <--> time */
+
+  return res;
+}
+
+gboolean
+gst_base_video_encoded_video_convert (GstVideoState * state,
+    GstFormat src_format, gint64 src_value,
+    GstFormat * dest_format, gint64 * dest_value)
+{
+  gboolean res = FALSE;
+
+  if (src_format == *dest_format) {
+    *dest_value = src_value;
+    return TRUE;
+  }
+
+  GST_DEBUG ("src convert");
+
+#if 0
+  if (src_format == GST_FORMAT_DEFAULT && *dest_format == GST_FORMAT_TIME) {
+    if (dec->fps_d != 0) {
+      *dest_value = gst_util_uint64_scale (granulepos_to_frame (src_value),
+          dec->fps_d * GST_SECOND, dec->fps_n);
+      res = TRUE;
+    } else {
+      res = FALSE;
+    }
+  } else {
+    GST_WARNING ("unhandled conversion from %d to %d", src_format,
+        *dest_format);
+    res = FALSE;
+  }
+#endif
+
+  return res;
+}
+
+gboolean
+gst_base_video_state_from_caps (GstVideoState * state, GstCaps * caps)
+{
+
+  gst_video_format_parse_caps_strided (caps, &state->format,
+      &state->width, &state->height, &state->rowstride);
+
+  gst_video_parse_caps_framerate (caps, &state->fps_n, &state->fps_d);
+
+  state->par_n = 1;
+  state->par_d = 1;
+  gst_video_parse_caps_pixel_aspect_ratio (caps, &state->par_n, &state->par_d);
+
+  {
+    GstStructure *structure = gst_caps_get_structure (caps, 0);
+    state->interlaced = FALSE;
+    gst_structure_get_boolean (structure, "interlaced", &state->interlaced);
+  }
+
+  state->clean_width = state->width;
+  state->clean_height = state->height;
+  state->clean_offset_left = 0;
+  state->clean_offset_top = 0;
+
+  /* FIXME need better error handling */
+  return TRUE;
+}
+
+GstClockTime
+gst_video_state_get_timestamp (const GstVideoState * state,
+    GstSegment * segment, int frame_number)
+{
+  if (frame_number < 0) {
+    return segment->start -
+        (gint64) gst_util_uint64_scale (-frame_number,
+        state->fps_d * GST_SECOND, state->fps_n);
+  } else {
+    return segment->start +
+        gst_util_uint64_scale (frame_number,
+        state->fps_d * GST_SECOND, state->fps_n);
+  }
+}
+
+/* gst adapter */
+
+static GSList *
+get_chunk (GstAdapter * adapter, int offset, int *skip)
+{
+  GSList *g;
+
+#if 1
+  if (skip)
+    *skip = 0;
+#endif
+
+  g_return_val_if_fail (offset >= 0, NULL);
+  g_return_val_if_fail (offset < adapter->size, NULL);
+
+  offset += adapter->skip;
+  g = adapter->buflist;
+  while (g) {
+    if (offset < GST_BUFFER_SIZE (GST_BUFFER_CAST (g->data))) {
+      if (skip)
+        *skip = offset;
+      return g;
+    }
+    offset -= GST_BUFFER_SIZE (GST_BUFFER_CAST (g->data));
+    g = g->next;
+  }
+
+  g_assert_not_reached ();
+}
+
+static int
+scan_fast (guint8 * data, guint32 pattern, guint32 mask, int n)
+{
+  int i;
+
+  pattern &= mask;
+  for (i = 0; i < n; i++) {
+    if ((GST_READ_UINT32_BE (data + i) & mask) == pattern) {
+      return i;
+    }
+  }
+  return n;
+}
+
+static gboolean
+scan_slow (GstAdapter * adapter, GSList * g, int skip, guint32 pattern,
+    guint32 mask)
+{
+  guint8 tmp[4];
+  int j;
+
+  pattern &= mask;
+  for (j = 0; j < 4; j++) {
+    tmp[j] = ((guint8 *) GST_BUFFER_DATA (GST_BUFFER_CAST (g->data)))[skip];
+    skip++;
+    if (skip >= GST_BUFFER_SIZE (GST_BUFFER_CAST (g->data))) {
+      g = g->next;
+      skip = 0;
+    }
+  }
+
+  return ((GST_READ_UINT32_BE (tmp) & mask) == pattern);
+}
+
+int
+gst_adapter_masked_scan_uint32_compat (GstAdapter * adapter, guint32 mask,
+    guint32 pattern, guint offset, guint n)
+{
+  GSList *g;
+  int j;
+  int k;
+  int skip;
+  int m;
+
+  g_return_val_if_fail (n >= 0, -1);
+  g_return_val_if_fail (offset >= 0, -1);
+  g_return_val_if_fail (offset + n + 4 <= adapter->size, -1);
+
+  g = get_chunk (adapter, offset, &skip);
+  j = 0;
+  while (j < n) {
+    m = MIN (GST_BUFFER_SIZE (GST_BUFFER_CAST (g->data)) - skip - 4, 0);
+    if (m > 0) {
+      k = scan_fast (GST_BUFFER_DATA (GST_BUFFER_CAST (g->data)) + skip,
+          pattern, mask, m);
+      if (k < m) {
+        return offset + j + k;
+      }
+      j += m;
+      skip += m;
+    } else {
+      if (scan_slow (adapter, g, skip, pattern, mask)) {
+        return offset + j;
+      }
+      j++;
+      skip++;
+    }
+    if (skip >= GST_BUFFER_SIZE (GST_BUFFER_CAST (g->data))) {
+      g = g->next;
+      skip = 0;
+    }
+  }
+
+  return -1;
+}
+
+GstBuffer *
+gst_adapter_get_buffer (GstAdapter * adapter)
+{
+  return gst_buffer_ref (GST_BUFFER_CAST (adapter->buflist->data));
+
+}
diff --git a/ext/vp8/gstvp8dec.c b/ext/vp8/gstvp8dec.c
index a655cbb..270a9b8 100644
--- a/ext/vp8/gstvp8dec.c
+++ b/ext/vp8/gstvp8dec.c
@@ -116,7 +116,7 @@ static GstStaticPadTemplate gst_vp8_dec_src_template =
 GST_STATIC_PAD_TEMPLATE ("src",
     GST_PAD_SRC,
     GST_PAD_ALWAYS,
-    GST_STATIC_CAPS (GST_VIDEO_CAPS_YUV ("I420"))
+    GST_STATIC_CAPS (GST_VIDEO_CAPS_YUV_STRIDED ("NV12", "[0, max]"))
     );
 
 GST_BOILERPLATE (GstVP8Dec, gst_vp8_dec, GstBaseVideoDecoder,
@@ -326,19 +326,107 @@ gst_vp8_dec_send_tags (GstVP8Dec * dec)
       GST_BASE_VIDEO_CODEC_SRC_PAD (dec), list);
 }
 
+#define WEAK __attribute__((weak))
+
+void stride_copy_zip2 (guchar * new_buf, guchar * orig_buf1,
+    guchar * orig_buf2, gint sz);
+WEAK void
+stride_copy_zip2 (guchar * new_buf, guchar * orig_buf1, guchar * orig_buf2,
+    gint sz)
+{
+  while (sz--) {
+    *new_buf++ = *orig_buf1++;
+    *new_buf++ = *orig_buf2++;
+  }
+}
+
+void stride_copy (guchar * new_buf, guchar * orig_buf, gint sz);
+WEAK void
+stride_copy (guchar * new_buf, guchar * orig_buf, gint sz)
+{
+  memcpy (new_buf, orig_buf, sz);
+}
+
+/**
+ * move to strided buffer, interleaving two planes of identical dimensions
+ */
+static void
+stridemove_zip2 (guchar * new_buf, guchar * orig_buf1, guchar * orig_buf2,
+    gint new_stride, gint orig_stride, gint width, gint height)
+{
+  int row;
+
+  /* if increasing the stride, work from bottom-up to avoid overwriting data
+   * that has not been moved yet.. otherwise, work in the opposite order,
+   * for the same reason.
+   */
+  if (new_stride > orig_stride) {
+    for (row = height - 1; row >= 0; row--) {
+      stride_copy_zip2 (new_buf + (new_stride * row),
+          orig_buf1 + (orig_stride * row),
+          orig_buf2 + (orig_stride * row), width);
+    }
+  } else {
+    for (row = 0; row < height; row++) {
+      stride_copy_zip2 (new_buf + (new_stride * row),
+          orig_buf1 + (orig_stride * row),
+          orig_buf2 + (orig_stride * row), width);
+    }
+  }
+}
+
+/**
+ * Convert from one stride to another... like memmove, but can convert stride in
+ * the process.  This function is not aware of pixels, only of bytes.  So widths
+ * are given in bytes, not pixels.  The new_buf and orig_buf can point to the
+ * same buffers to do an in-place conversion, but the buffer should be large
+ * enough.
+ */
+static void
+stridemove (guchar * new_buf, guchar * orig_buf,
+    gint new_stride, gint orig_stride, gint width, gint height)
+{
+  int row;
+
+  /* if increasing the stride, work from bottom-up to avoid overwriting data
+   * that has not been moved yet.. otherwise, work in the opposite order,
+   * for the same reason.
+   */
+  if (new_stride > orig_stride) {
+    for (row = height - 1; row >= 0; row--) {
+      stride_copy (new_buf + (new_stride * row), orig_buf + (orig_stride * row),
+          width);
+    }
+  } else {
+    for (row = 0; row < height; row++) {
+      stride_copy (new_buf + (new_stride * row), orig_buf + (orig_stride * row),
+          width);
+    }
+  }
+}
+
 static void
 gst_vp8_dec_image_to_buffer (GstVP8Dec * dec, const vpx_image_t * img,
     GstBuffer * buffer)
 {
   GstBaseVideoDecoder *decoder = (GstBaseVideoDecoder *) dec;
+#if 1
+  int stride, w, h;
+  guint8 *d;
+
+  stride = decoder->state.rowstride;
+  h = decoder->state.height;
+  w = decoder->state.width;
+
+  d = GST_BUFFER_DATA (buffer);
+  stridemove (d, img->planes[PLANE_Y], stride, img->stride[PLANE_Y], w, h);
+  stridemove_zip2 (d + (h * stride), img->planes[PLANE_U],
+      img->planes[PLANE_V], stride, img->stride[PLANE_U], w / 2, h / 2);
+#else
   int stride, w, h, i;
   guint8 *d;
 
-  d = GST_BUFFER_DATA (buffer) +
-      gst_video_format_get_component_offset (decoder->state.format, 0,
-      decoder->state.width, decoder->state.height);
-  stride =
-      gst_video_format_get_row_stride (decoder->state.format, 0,
+  stride = gst_video_format_get_row_stride (decoder->state.format, 0,
       decoder->state.width);
   h = gst_video_format_get_component_height (decoder->state.format, 0,
       decoder->state.height);
@@ -346,6 +434,9 @@ gst_vp8_dec_image_to_buffer (GstVP8Dec * dec, const vpx_image_t * img,
   w = gst_video_format_get_component_width (decoder->state.format, 0,
       decoder->state.width);
   w = MIN (w, img->w);
+  d = GST_BUFFER_DATA (buffer) +
+      gst_video_format_get_component_offset (decoder->state.format, 0,
+      decoder->state.width, decoder->state.height);
 
   for (i = 0; i < h; i++)
     memcpy (d + i * stride,
@@ -374,6 +465,7 @@ gst_vp8_dec_image_to_buffer (GstVP8Dec * dec, const vpx_image_t * img,
   for (i = 0; i < h; i++)
     memcpy (d + i * stride,
         img->planes[VPX_PLANE_V] + i * img->stride[VPX_PLANE_V], w);
+#endif
 }
 
 static GstFlowReturn
@@ -412,7 +504,8 @@ gst_vp8_dec_handle_frame (GstBaseVideoDecoder * decoder, GstVideoFrame * frame,
     /* should set size here */
     decoder->state.width = stream_info.w;
     decoder->state.height = stream_info.h;
-    decoder->state.format = GST_VIDEO_FORMAT_I420;
+    decoder->state.rowstride = 4096;
+    decoder->state.format = GST_VIDEO_FORMAT_NV12;
     gst_vp8_dec_send_tags (dec);
 
     caps = vpx_codec_get_caps (&vpx_codec_vp8_dx_algo);
@@ -435,6 +528,8 @@ gst_vp8_dec_handle_frame (GstBaseVideoDecoder * decoder, GstVideoFrame * frame,
       return GST_FLOW_ERROR;
     }
 
+    dec->decoder.config.dec->threads = 8;
+
     if ((caps & VPX_CODEC_CAP_POSTPROC) && dec->post_processing) {
       vp8_postproc_cfg_t pp_cfg = { 0, };
 
diff --git a/ext/vp8/plugin.c b/ext/vp8/plugin.c
index cdecdc3..d62bee5 100644
--- a/ext/vp8/plugin.c
+++ b/ext/vp8/plugin.c
@@ -37,8 +37,8 @@ plugin_init (GstPlugin * plugin)
 #endif
 
 #ifdef HAVE_VP8_ENCODER
-  gst_element_register (plugin, "vp8enc", GST_RANK_PRIMARY,
-      gst_vp8_enc_get_type ());
+//  gst_element_register (plugin, "vp8enc", GST_RANK_PRIMARY,
+//      gst_vp8_enc_get_type ());
 #endif
 
   return TRUE;
diff --git a/gst-libs/gst/video/gstbasevideodecoder.c b/gst-libs/gst/video/gstbasevideodecoder.c
index f05fd45..4e3b24b 100644
--- a/gst-libs/gst/video/gstbasevideodecoder.c
+++ b/gst-libs/gst/video/gstbasevideodecoder.c
@@ -1460,8 +1460,8 @@ gst_base_video_decoder_set_src_caps (GstBaseVideoDecoder * base_video_decoder)
   if (base_video_decoder->have_src_caps)
     return;
 
-  caps = gst_video_format_new_caps (state->format,
-      state->width, state->height,
+  caps = gst_video_format_new_caps_strided (state->format,
+      state->width, state->height, state->rowstride,
       state->fps_n, state->fps_d, state->par_n, state->par_d);
   gst_caps_set_simple (caps, "interlaced",
       G_TYPE_BOOLEAN, state->interlaced, NULL);
@@ -1480,12 +1480,13 @@ gst_base_video_decoder_alloc_src_frame (GstBaseVideoDecoder *
     base_video_decoder, GstVideoFrame * frame)
 {
   GstFlowReturn flow_ret;
+  GstVideoState *state = &base_video_decoder->state;
   int num_bytes;
 
   gst_base_video_decoder_set_src_caps (base_video_decoder);
 
-  num_bytes = gst_video_format_get_size (base_video_decoder->state.format,
-      base_video_decoder->state.width, base_video_decoder->state.height);
+  num_bytes = gst_video_format_get_size_strided (state->format,
+      state->width, state->height, state->rowstride);
   flow_ret =
       gst_pad_alloc_buffer_and_set_caps (GST_BASE_VIDEO_CODEC_SRC_PAD
       (base_video_decoder), GST_BUFFER_OFFSET_NONE, num_bytes,
diff --git a/gst-libs/gst/video/gstbasevideoutils.h b/gst-libs/gst/video/gstbasevideoutils.h
index f644218..28edce9 100644
--- a/gst-libs/gst/video/gstbasevideoutils.h
+++ b/gst-libs/gst/video/gstbasevideoutils.h
@@ -37,7 +37,7 @@ typedef struct _GstVideoFrame GstVideoFrame;
 struct _GstVideoState
 {
   GstVideoFormat format;
-  int width, height;
+  int width, height, rowstride;
   int fps_n, fps_d;
   int par_n, par_d;
 
-- 
1.7.1

