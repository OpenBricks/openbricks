Index: gst-plugins-good0.10/sys/shm/gstshmsink.c
===================================================================
--- gst-plugins-good0.10.orig/sys/shm/gstshmsink.c	2011-03-18 12:22:38.195521299 -0400
+++ gst-plugins-good0.10/sys/shm/gstshmsink.c	2011-03-18 12:22:46.725533811 -0400
@@ -298,6 +298,7 @@
     return FALSE;
   }
 
+  sp_set_data (self->pipe, self);
   g_free (self->socket_path);
   self->socket_path = g_strdup (sp_writer_get_path (self->pipe));
 
@@ -411,8 +412,17 @@
 static void
 gst_shm_sink_free_buffer (gpointer data)
 {
+  ShmPipe *pipe;
   ShmBlock *block = data;
+  GstShmSink *self;
+
+  pipe = sp_writer_block_get_pipe (block);
+  self = sp_get_data (pipe);
+
+  GST_OBJECT_LOCK (self);
   sp_writer_free_block (block);
+  GST_OBJECT_UNLOCK (self);
+  g_object_unref (self);
 }
 
 static GstFlowReturn
@@ -426,8 +436,10 @@
 
   GST_OBJECT_LOCK (self);
   block = sp_writer_alloc_block (self->pipe, size);
-  if (block)
+  if (block) {
     buf = sp_writer_block_get_buf (block);
+    g_object_ref (self);
+  }
   GST_OBJECT_UNLOCK (self);
 
   if (block) {
Index: gst-plugins-good0.10/sys/shm/gstshmsrc.c
===================================================================
--- gst-plugins-good0.10.orig/sys/shm/gstshmsrc.c	2011-03-18 12:22:38.195521299 -0400
+++ gst-plugins-good0.10/sys/shm/gstshmsrc.c	2011-03-18 12:22:46.725533811 -0400
@@ -64,12 +64,15 @@
     const GValue * value, GParamSpec * pspec);
 static void gst_shm_src_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
+static void gst_shm_src_finalize (GObject * object);
 static gboolean gst_shm_src_start (GstBaseSrc * bsrc);
 static gboolean gst_shm_src_stop (GstBaseSrc * bsrc);
 static GstFlowReturn gst_shm_src_create (GstPushSrc * psrc,
     GstBuffer ** outbuf);
 static gboolean gst_shm_src_unlock (GstBaseSrc * bsrc);
 static gboolean gst_shm_src_unlock_stop (GstBaseSrc * bsrc);
+static GstStateChangeReturn gst_shm_src_change_state (GstElement * element,
+    GstStateChange transition);
 
 static void gst_shm_pipe_inc (GstShmPipe * pipe);
 static void gst_shm_pipe_dec (GstShmPipe * pipe);
@@ -96,15 +99,20 @@
 gst_shm_src_class_init (GstShmSrcClass * klass)
 {
   GObjectClass *gobject_class;
+  GstElementClass *gstelement_class;
   GstBaseSrcClass *gstbasesrc_class;
   GstPushSrcClass *gstpush_src_class;
 
   gobject_class = (GObjectClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
   gstbasesrc_class = (GstBaseSrcClass *) klass;
   gstpush_src_class = (GstPushSrcClass *) klass;
 
   gobject_class->set_property = gst_shm_src_set_property;
   gobject_class->get_property = gst_shm_src_get_property;
+  gobject_class->finalize = gst_shm_src_finalize;
+
+  gstelement_class->change_state = gst_shm_src_change_state;
 
   gstbasesrc_class->start = GST_DEBUG_FUNCPTR (gst_shm_src_start);
   gstbasesrc_class->stop = GST_DEBUG_FUNCPTR (gst_shm_src_stop);
@@ -130,6 +138,18 @@
 static void
 gst_shm_src_init (GstShmSrc * self, GstShmSrcClass * g_class)
 {
+  self->poll = gst_poll_new (TRUE);
+  gst_poll_fd_init (&self->pollfd);
+}
+
+static void
+gst_shm_src_finalize (GObject * object)
+{
+  GstShmSrc *self = GST_SHM_SRC (object);
+
+  gst_poll_free (self->poll);
+
+  G_OBJECT_CLASS (parent_class)->finalize (object);
 }
 
 
@@ -183,28 +203,27 @@
 }
 
 static gboolean
-gst_shm_src_start (GstBaseSrc * bsrc)
+gst_shm_src_start_reading (GstShmSrc * self)
 {
-  GstShmSrc *self = GST_SHM_SRC (bsrc);
   GstShmPipe *gstpipe = g_slice_new0 (GstShmPipe);
 
   gstpipe->use_count = 1;
   gstpipe->src = gst_object_ref (self);
 
   if (!self->socket_path) {
-    GST_ELEMENT_ERROR (bsrc, RESOURCE, NOT_FOUND,
+    GST_ELEMENT_ERROR (self, RESOURCE, NOT_FOUND,
         ("No path specified for socket."), (NULL));
     return FALSE;
   }
 
-  GST_DEBUG ("Opening socket %s", self->socket_path);
+  GST_DEBUG_OBJECT (self, "Opening socket %s", self->socket_path);
 
   GST_OBJECT_LOCK (self);
   gstpipe->pipe = sp_client_open (self->socket_path);
   GST_OBJECT_UNLOCK (self);
 
   if (!gstpipe->pipe) {
-    GST_ELEMENT_ERROR (bsrc, RESOURCE, OPEN_READ_WRITE,
+    GST_ELEMENT_ERROR (self, RESOURCE, OPEN_READ_WRITE,
         ("Could not open socket %s: %d %s", self->socket_path, errno,
             strerror (errno)), (NULL));
     gst_shm_pipe_dec (gstpipe);
@@ -213,7 +232,8 @@
 
   self->pipe = gstpipe;
 
-  self->poll = gst_poll_new (TRUE);
+  gst_poll_set_flushing (self->poll, FALSE);
+
   gst_poll_fd_init (&self->pollfd);
   self->pollfd.fd = sp_get_fd (self->pipe->pipe);
   gst_poll_add_fd (self->poll, &self->pollfd);
@@ -222,11 +242,9 @@
   return TRUE;
 }
 
-static gboolean
-gst_shm_src_stop (GstBaseSrc * bsrc)
+static void
+gst_shm_src_stop_reading (GstShmSrc * self)
 {
-  GstShmSrc *self = GST_SHM_SRC (bsrc);
-
   GST_DEBUG_OBJECT (self, "Stopping %p", self);
 
   if (self->pipe) {
@@ -234,8 +252,26 @@
     self->pipe = NULL;
   }
 
-  gst_poll_free (self->poll);
-  self->poll = NULL;
+  gst_poll_remove_fd (self->poll, &self->pollfd);
+  gst_poll_fd_init (&self->pollfd);
+
+  gst_poll_set_flushing (self->poll, TRUE);
+}
+
+static gboolean
+gst_shm_src_start (GstBaseSrc * bsrc)
+{
+  if (gst_base_src_is_live (bsrc))
+    return TRUE;
+  else
+    return gst_shm_src_start_reading (GST_SHM_SRC (bsrc));
+}
+
+static gboolean
+gst_shm_src_stop (GstBaseSrc * bsrc)
+{
+  if (!gst_base_src_is_live (bsrc))
+    gst_shm_src_stop_reading (GST_SHM_SRC (bsrc));
 
   return TRUE;
 }
@@ -322,15 +358,43 @@
   return GST_FLOW_OK;
 }
 
+static GstStateChangeReturn
+gst_shm_src_change_state (GstElement * element, GstStateChange transition)
+{
+  GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
+  GstShmSrc *self = GST_SHM_SRC (element);
+
+  switch (transition) {
+    case GST_STATE_CHANGE_PAUSED_TO_PLAYING:
+      if (gst_base_src_is_live (GST_BASE_SRC (element)))
+        if (!gst_shm_src_start_reading (self))
+          return GST_STATE_CHANGE_FAILURE;
+    default:
+      break;
+  }
+
+  ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+  if (ret == GST_STATE_CHANGE_FAILURE)
+    return ret;
+
+  switch (transition) {
+    case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
+      if (gst_base_src_is_live (GST_BASE_SRC (element)))
+        gst_shm_src_stop_reading (self);
+    default:
+      break;
+  }
+
+  return ret;
+}
+
 static gboolean
 gst_shm_src_unlock (GstBaseSrc * bsrc)
 {
   GstShmSrc *self = GST_SHM_SRC (bsrc);
 
   self->unlocked = TRUE;
-
-  if (self->poll)
-    gst_poll_set_flushing (self->poll, TRUE);
+  gst_poll_set_flushing (self->poll, TRUE);
 
   return TRUE;
 }
@@ -341,9 +405,7 @@
   GstShmSrc *self = GST_SHM_SRC (bsrc);
 
   self->unlocked = FALSE;
-
-  if (self->poll)
-    gst_poll_set_flushing (self->poll, FALSE);
+  gst_poll_set_flushing (self->poll, FALSE);
 
   return TRUE;
 }
Index: gst-plugins-good0.10/sys/shm/shmpipe.c
===================================================================
--- gst-plugins-good0.10.orig/sys/shm/shmpipe.c	2011-03-18 12:22:38.195521299 -0400
+++ gst-plugins-good0.10/sys/shm/shmpipe.c	2011-03-18 12:22:46.725533811 -0400
@@ -119,6 +119,8 @@
 {
   int main_socket;
   char *socket_path;
+  int use_count;
+  void *data;
 
   ShmArea *shm_area;
 
@@ -196,6 +198,7 @@
   memset (self, 0, sizeof (ShmPipe));
 
   self->main_socket = socket (PF_UNIX, SOCK_STREAM, 0);
+  self->use_count = 1;
 
   if (self->main_socket < 0)
     RETURN_ERROR ("Could not create socket (%d): %s\n", errno,
@@ -372,6 +375,38 @@
   }
 }
 
+void *
+sp_get_data (ShmPipe * self)
+{
+  return self->data;
+}
+
+void
+sp_set_data (ShmPipe * self, void *data)
+{
+  self->data = data;
+}
+
+static void
+sp_inc (ShmPipe * self)
+{
+  self->use_count++;
+}
+
+static void
+sp_dec (ShmPipe * self)
+{
+  self->use_count--;
+
+  if (self->use_count > 0)
+    return;
+
+  while (self->shm_area)
+    sp_shm_area_dec (self, self->shm_area);
+
+  spalloc_free (ShmPipe, self);
+}
+
 void
 sp_close (ShmPipe * self)
 {
@@ -386,10 +421,7 @@
   while (self->clients)
     sp_writer_close_client (self, self->clients);
 
-  while (self->shm_area)
-    sp_shm_area_dec (self, self->shm_area);
-
-  spalloc_free (ShmPipe, self);
+  sp_dec (self);
 }
 
 int
@@ -481,6 +513,7 @@
   block->pipe = self;
   block->area = self->shm_area;
   block->ablock = ablock;
+  sp_inc (self);
   return block;
 }
 
@@ -491,11 +524,18 @@
       shm_alloc_space_alloc_block_get_offset (block->ablock);
 }
 
+ShmPipe *
+sp_writer_block_get_pipe (ShmBlock * block)
+{
+  return block->pipe;
+}
+
 void
 sp_writer_free_block (ShmBlock * block)
 {
   shm_alloc_space_block_dec (block->ablock);
   sp_shm_area_dec (block->pipe, block->area);
+  sp_dec (block->pipe);
   spalloc_free (ShmBlock, block);
 }
 
@@ -709,6 +749,8 @@
   memset (self, 0, sizeof (ShmPipe));
 
   self->main_socket = socket (PF_UNIX, SOCK_STREAM, 0);
+  self->use_count = 1;
+
   if (self->main_socket < 0)
     goto error;
 
Index: gst-plugins-good0.10/sys/shm/shmpipe.h
===================================================================
--- gst-plugins-good0.10.orig/sys/shm/shmpipe.h	2011-03-18 12:22:38.195521299 -0400
+++ gst-plugins-good0.10/sys/shm/shmpipe.h	2011-03-18 12:22:46.725533811 -0400
@@ -75,6 +75,8 @@
 ShmPipe *sp_writer_create (const char *path, size_t size, mode_t perms);
 const char *sp_writer_get_path (ShmPipe *pipe);
 void sp_close (ShmPipe * self);
+void *sp_get_data (ShmPipe * self);
+void sp_set_data (ShmPipe * self, void *data);
 
 int sp_writer_setperms_shm (ShmPipe * self, mode_t perms);
 int sp_writer_resize (ShmPipe * self, size_t size);
@@ -86,6 +88,7 @@
 void sp_writer_free_block (ShmBlock *block);
 int sp_writer_send_buf (ShmPipe * self, char *buf, size_t size);
 char *sp_writer_block_get_buf (ShmBlock *block);
+ShmPipe *sp_writer_block_get_pipe (ShmBlock *block);
 
 ShmClient * sp_writer_accept_client (ShmPipe * self);
 void sp_writer_close_client (ShmPipe *self, ShmClient * client);
