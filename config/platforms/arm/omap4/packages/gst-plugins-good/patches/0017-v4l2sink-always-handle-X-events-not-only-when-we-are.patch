From d40b86211cebe863ac0de6f82867a4fc14c584ee Mon Sep 17 00:00:00 2001
From: George Kiagiadakis <george.kiagiadakis@collabora.co.uk>
Date: Thu, 4 Aug 2011 14:36:55 +0300
Subject: [PATCH 17/19] v4l2sink: always handle X events, not only when we are using an internal window.

This most notably fixes overlay resizing in cheese, which, unlike totem,
does not call gst_x_overlay_set_window_handle on every window expose event.
---
 sys/v4l2/gstv4l2xoverlay.c |   38 ++++++++++++++++++++++++++++----------
 1 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/sys/v4l2/gstv4l2xoverlay.c b/sys/v4l2/gstv4l2xoverlay.c
index 80f114d..758ac90 100644
--- a/sys/v4l2/gstv4l2xoverlay.c
+++ b/sys/v4l2/gstv4l2xoverlay.c
@@ -46,6 +46,7 @@ struct _GstV4l2Xv
   Display *dpy;
   gint port, idle_id, event_id;
   GMutex *mutex;                /* to serialize calls to X11 */
+  gboolean internal_window;
 };
 
 GST_DEBUG_CATEGORY_STATIC (v4l2xv_debug);
@@ -134,6 +135,7 @@ gst_v4l2_xoverlay_open (GstV4l2Object * v4l2object)
   v4l2xv->mutex = g_mutex_new ();
   v4l2xv->idle_id = 0;
   v4l2xv->event_id = 0;
+  v4l2xv->internal_window = FALSE;
   v4l2object->xv = v4l2xv;
 
   if (v4l2object->xwindow_id) {
@@ -261,6 +263,12 @@ event_refresh (gpointer data)
 
     g_mutex_lock (v4l2xv->mutex);
 
+    /* Stop repeat if we lost the window id */
+    if (!v4l2object->xwindow_id) {
+      g_mutex_unlock (v4l2xv->mutex);
+      return FALSE;
+    }
+
     /* If the element supports navigation, collect the relavent input
      * events and push them upstream as navigation events
      */
@@ -391,6 +399,24 @@ gst_v4l2_xoverlay_set_window_handle (GstV4l2Object * v4l2object, guintptr id)
     }
 
     v4l2object->xwindow_id = xwindow_id;
+
+    if (v4l2object->xwindow_id && v4l2xv) {
+      long event_mask;
+
+      GST_DEBUG_OBJECT (v4l2object->element, "Setting up event mask");
+
+      event_mask = ExposureMask | StructureNotifyMask;
+      if (GST_IS_NAVIGATION (v4l2object->element)) {
+        event_mask |= PointerMotionMask | KeyPressMask | KeyReleaseMask;
+        if (v4l2xv->internal_window)
+          event_mask |= ButtonPressMask | ButtonReleaseMask;
+      }
+      XSelectInput (v4l2xv->dpy, v4l2object->xwindow_id, event_mask);
+
+      if (v4l2xv->event_id)
+        g_source_remove (v4l2xv->event_id);
+      v4l2xv->event_id = g_timeout_add (45, event_refresh, v4l2object);
+    }
   }
 
   if (!v4l2xv || xwindow_id == 0) {
@@ -437,7 +463,6 @@ gst_v4l2_xoverlay_prepare_xwindow_id (GstV4l2Object * v4l2object,
     GstV4l2Xv *v4l2xv;
     Window win;
     int width, height;
-    long event_mask;
 
     if (!v4l2object->xv && GST_V4L2_IS_OPEN (v4l2object))
       gst_v4l2_xoverlay_open (v4l2object);
@@ -464,18 +489,11 @@ gst_v4l2_xoverlay_prepare_xwindow_id (GstV4l2Object * v4l2object,
 
     GST_DEBUG_OBJECT (v4l2object->element, "win=%lu", win);
 
-    event_mask = ExposureMask | StructureNotifyMask;
-    if (GST_IS_NAVIGATION (v4l2object->element)) {
-      event_mask |= PointerMotionMask |
-          KeyPressMask | KeyReleaseMask | ButtonPressMask | ButtonReleaseMask;
-    }
-    XSelectInput (v4l2xv->dpy, win, event_mask);
-    v4l2xv->event_id = g_timeout_add (45, event_refresh, v4l2object);
-
     XMapRaised (v4l2xv->dpy, win);
-
     XSync (v4l2xv->dpy, FALSE);
 
+    v4l2xv->internal_window = TRUE;
+
     g_mutex_unlock (v4l2xv->mutex);
 
     GST_DEBUG_OBJECT (v4l2object->element, "got window");
-- 
1.7.1

