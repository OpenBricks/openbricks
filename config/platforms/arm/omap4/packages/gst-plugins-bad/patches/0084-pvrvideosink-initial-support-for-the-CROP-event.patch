From 7f57bb37d3b44e5273d7f3241fe6a00af0ad7f77 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Wed, 21 Sep 2011 13:39:03 +0200
Subject: [PATCH 084/154] pvrvideosink: initial support for the CROP event

---
 sys/pvr2d/gstpvrvideosink.c |   63 +++++++++++++++++++++++++++++++++++-------
 sys/pvr2d/gstpvrvideosink.h |    2 +-
 2 files changed, 53 insertions(+), 12 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index fd4a830..f57218a 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -280,6 +280,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   PPVR2D_3DBLT_EXT p_blt_3d;
   PVR2DFORMAT pvr_format = pvrvideosink->format == GST_VIDEO_FORMAT_NV12 ?
       PVR2D_YUV420_2PLANE : PVR2D_ARGB8888;
+  PVR2DRECT *crop = &pvrvideosink->crop;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
 
@@ -327,7 +328,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   p_blt_3d->sDst.SurfOffset = 0;
   p_blt_3d->sDst.Stride =
       gst_video_format_get_row_stride (GST_VIDEO_FORMAT_BGRx, 0,
-          pvrvideosink->xwindow->width);
+      pvrvideosink->xwindow->width);
   p_blt_3d->sDst.Format = PVR2D_ARGB8888;
   p_blt_3d->sDst.SurfWidth = pvrvideosink->xwindow->width;
   p_blt_3d->sDst.SurfHeight = pvrvideosink->xwindow->height;
@@ -344,10 +345,14 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   p_blt_3d->sSrc.SurfWidth = video_width;
   p_blt_3d->sSrc.SurfHeight = video_height;
 
-  p_blt_3d->rcSource.left = 0;
-  p_blt_3d->rcSource.top = 0;
-  p_blt_3d->rcSource.right = video_width;
-  p_blt_3d->rcSource.bottom = video_height;
+  if (crop->left || crop->top || crop->right || crop->bottom) {
+    p_blt_3d->rcSource = *crop;
+  } else {
+    p_blt_3d->rcSource.left = 0;
+    p_blt_3d->rcSource.top = 0;
+    p_blt_3d->rcSource.right = video_width;
+    p_blt_3d->rcSource.bottom = video_height;
+  }
 
   p_blt_3d->hUseCode = NULL;
 
@@ -481,7 +486,7 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   GstPVRVideoSink *pvrvideosink;
   gboolean ret = TRUE;
   GstStructure *structure;
-  gint new_width, new_height;
+  gint width, height;
   const GValue *fps;
   GstQuery *query;
 
@@ -493,10 +498,10 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   structure = gst_caps_get_structure (caps, 0);
 
   ret = gst_video_format_parse_caps_strided (caps, &pvrvideosink->format,
-      &new_width, &new_height, &pvrvideosink->rowstride);
+      &width, &height, &pvrvideosink->rowstride);
   if (pvrvideosink->rowstride == 0)
     pvrvideosink->rowstride =
-        gst_video_format_get_row_stride (pvrvideosink->format, 0, new_width);
+        gst_video_format_get_row_stride (pvrvideosink->format, 0, width);
   fps = gst_structure_get_value (structure, "framerate");
   ret &= (fps != NULL);
   if (!ret) {
@@ -574,13 +579,13 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   } else {
     g_mutex_unlock (pvrvideosink->flow_lock);
   }
-  GST_VIDEO_SINK_WIDTH (pvrvideosink) = new_width;
-  GST_VIDEO_SINK_HEIGHT (pvrvideosink) = new_height;
+  GST_VIDEO_SINK_WIDTH (pvrvideosink) = width;
+  GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
 
   g_mutex_lock (pvrvideosink->flow_lock);
   if (!pvrvideosink->xwindow)
     pvrvideosink->xwindow = gst_pvrvideosink_create_window (pvrvideosink,
-        new_width, new_height);
+        width, height);
   g_mutex_unlock (pvrvideosink->flow_lock);
 
   pvrvideosink->fps_n = gst_value_get_fraction_numerator (fps);
@@ -675,6 +680,39 @@ gst_pvrvideosink_get_times (GstBaseSink * bsink, GstBuffer * buf,
   }
 }
 
+static gboolean
+gst_pvrvideosink_event (GstBaseSink * bsink, GstEvent * event)
+{
+  gboolean res;
+  GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (bsink);
+
+  switch (GST_EVENT_TYPE (event)) {
+    case GST_EVENT_CROP:
+    {
+      gint left, top, width, height;
+
+      PVR2DRECT *c = &pvrvideosink->crop;
+      gst_event_parse_crop (event, &top, &left, &width, &height);
+      c->top = top;
+      c->left = left;
+      if (width == -1)
+        c->right = GST_VIDEO_SINK_WIDTH (pvrvideosink);
+      else
+        c->right = left + width;
+
+      if (height == -1)
+        c->bottom = GST_VIDEO_SINK_HEIGHT (pvrvideosink);
+      else
+        c->bottom = top + height;
+      break;
+    }
+    default:
+      res = TRUE;
+  }
+
+  return res;
+}
+
 static GstFlowReturn
 gst_pvrvideosink_show_frame (GstBaseSink * vsink, GstBuffer * buf)
 {
@@ -1120,6 +1158,7 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
     gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
     pvrvideosink->buffer_pool = NULL;
   }
+  memset (&pvrvideosink->crop, 0, sizeof (PVR2DRECT));
 }
 
 static void
@@ -1171,6 +1210,7 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->xwindow = NULL;
   pvrvideosink->redraw_borders = TRUE;
   pvrvideosink->current_buffer = NULL;
+  memset (&pvrvideosink->crop, 0, sizeof (PVR2DRECT));
 }
 
 static void
@@ -1219,6 +1259,7 @@ gst_pvrvideosink_class_init (GstPVRVideoSinkClass * klass)
   gstbasesink_class->buffer_alloc =
       GST_DEBUG_FUNCPTR (gst_pvrvideosink_buffer_alloc);
   gstbasesink_class->get_times = GST_DEBUG_FUNCPTR (gst_pvrvideosink_get_times);
+  gstbasesink_class->event = GST_DEBUG_FUNCPTR (gst_pvrvideosink_event);
 
   gstbasesink_class->render = GST_DEBUG_FUNCPTR (gst_pvrvideosink_show_frame);
 }
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index d8733cb..d341239 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -141,7 +141,7 @@ struct _GstPVRVideoSink
   gchar *media_title;
   gboolean redraw_borders;
   GstBuffer *current_buffer;
-
+  PVR2DRECT crop;
 };
 
 struct _GstPVRVideoSinkClass
-- 
1.7.5.4

