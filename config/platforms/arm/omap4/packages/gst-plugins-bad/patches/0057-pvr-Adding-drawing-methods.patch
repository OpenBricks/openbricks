From fe124c965e3f1ddb35a93530b39ee2ab40acee3a Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Sun, 11 Sep 2011 16:23:13 -0300
Subject: [PATCH 057/154] pvr: Adding drawing methods

---
 sys/pvr2d/Makefile.am       |    2 +-
 sys/pvr2d/gstpvrvideosink.c |  263 ++++++++++++++++++++++++++++++++++++++++++-
 sys/pvr2d/gstpvrvideosink.h |   34 ++++++-
 3 files changed, 294 insertions(+), 5 deletions(-)

diff --git a/sys/pvr2d/Makefile.am b/sys/pvr2d/Makefile.am
index 62218db..c9cd64f 100644
--- a/sys/pvr2d/Makefile.am
+++ b/sys/pvr2d/Makefile.am
@@ -9,7 +9,7 @@ libgstpvr_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) $(GST_CFLAGS) $(PVR_CFLAGS)
 
 libgstpvr_la_LIBADD = $(GST_LIBS) $(GST_BASE_LIBS) \
 	$(GST_PLUGINS_BASE_LIBS) $(X11_LIBS) -lgstvideo-$(GST_MAJORMINOR) \
-	-lgstinterfaces-$(GST_MAJORMINOR) \
+	-lgstinterfaces-$(GST_MAJORMINOR) -lpvrPVR2D_DRIWSEGL\
 	$(PVR_LIBS) \
 	$(LIBM)
 
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index a23bafc..53a3918 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -72,6 +72,240 @@ static GstVideoSinkClass *parent_class = NULL;
 #define GST_PVRVIDEO_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBuffer))
 #define GST_PVRVIDEO_BUFFER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBufferClass))
 
+static GstDrawContext *
+gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
+{
+  GstDrawContext *dcontext;
+  PVR2DERROR pvr_error;
+  gint num_devices;
+  PVR2DDEVICEINFO *p_dev_info;
+
+  dcontext = g_new0 (GstDrawContext, 1);
+
+  dcontext->wsegl_table = WSEGL_GetFunctionTablePointer ();
+
+  dcontext->x_display = XOpenDisplay (NULL);
+
+  num_devices = PVR2DEnumerateDevices (NULL);
+  p_dev_info = g_new0 (PVR2DDEVICEINFO, num_devices);
+  pvr_error = PVR2DEnumerateDevices (p_dev_info);
+  if (pvr_error != PVR2D_OK) {
+    GST_ERROR_OBJECT (pvrvideosink, "Failed to enumerate devices "
+        "returned %d", pvr_error);
+    return NULL;
+  }
+  pvr_error = PVR2DCreateDeviceContext (0xffffffff,
+      &(dcontext->pvr_context), 0);
+  switch (pvr_error) {
+    case PVR2D_OK:
+      break;
+    case PVR2DERROR_DEVICE_UNAVAILABLE:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to create device context,"
+          "device unavailable");
+      return NULL;
+      break;
+    default:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to create device context,"
+          "generic error");
+      return NULL;
+      break;
+  }
+  return dcontext;
+}
+
+static GstXWindow *
+gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
+{
+  WSEGLError glerror;
+  WSEGLDrawableParams source_params;
+  WSEGLDrawableParams render_params;
+  Window root;
+  gint video_width;
+  gint video_height;
+  GstStructure *structure;
+  gboolean ret;
+  GstXWindow *xwindow;
+  GstDrawContext *dcontext;
+  WSEGLCaps *glcaps;
+
+  GST_DEBUG_OBJECT (pvrvideosink, "begin");
+
+  dcontext = pvrvideosink->dcontext;
+  xwindow = g_new0 (GstXWindow, 1);
+
+  structure = gst_caps_get_structure (caps, 0);
+  ret = gst_structure_get_int (structure, "width", &video_width);
+  ret &= gst_structure_get_int (structure, "height", &video_height);
+
+  if (!ret) {
+    GST_ERROR_OBJECT (pvrvideosink, "Caps are incomplete");
+    return NULL;
+  }
+
+  root = DefaultRootWindow (dcontext->x_display);
+  xwindow->window_attributes.event_mask =
+      ExposureMask | PointerMotionMask | KeyPressMask;
+
+  xwindow->window = XCreateWindow (dcontext->x_display, root, 0, 0,
+      video_width, video_height, 0, CopyFromParent, InputOutput,
+      CopyFromParent, CWEventMask, &(xwindow->window_attributes));
+
+  XMapWindow (dcontext->x_display, xwindow->window);
+
+  /* We have to do that to prevent X from redrawing the background on
+   * ConfigureNotify. This takes away flickering of video when resizing. */
+  XSetWindowBackgroundPixmap (pvrvideosink->dcontext->x_display,
+      xwindow->window, None);
+
+  glerror = dcontext->wsegl_table->pfnWSEGL_IsDisplayValid (
+      (NativeDisplayType) dcontext->x_display);
+
+  if (glerror != WSEGL_SUCCESS) {
+    GST_ERROR_OBJECT (pvrvideosink, "Display is not valid");
+    return NULL;
+  }
+
+  glcaps = g_new0 (WSEGLCaps, 1);
+  dcontext->glcaps = &glcaps;
+
+  g_message ("Initializing display");
+  glerror = dcontext->wsegl_table->pfnWSEGL_InitialiseDisplay (
+      (NativeDisplayType) dcontext->x_display, &dcontext->display_handle,
+      dcontext->glcaps, &(dcontext->glconfig));
+  g_message ("Display initialized");
+
+  if (glerror != WSEGL_SUCCESS) {
+    GST_ERROR_OBJECT (pvrvideosink, "Error initializing display");
+    return NULL;
+  }
+
+  glerror =
+      dcontext->wsegl_table->
+      pfnWSEGL_CreateWindowDrawable (dcontext->display_handle,
+      dcontext->glconfig, &(dcontext->drawable_handle),
+      (NativeWindowType) xwindow->window, &(dcontext->rotation));
+
+  if (glerror != WSEGL_SUCCESS) {
+    GST_ERROR_OBJECT (pvrvideosink, "Error creating drawable");
+    return NULL;
+  }
+  glerror =
+      dcontext->wsegl_table->
+      pfnWSEGL_GetDrawableParameters (dcontext->drawable_handle, &source_params,
+      &render_params);
+  dcontext->dst_mem = (PVR2DMEMINFO *) render_params.hPrivateData;
+
+  GST_DEBUG_OBJECT (pvrvideosink, "end");
+  return xwindow;
+}
+
+static void
+gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
+{
+  PVR2DBLTINFO p_blt_info;
+  PVR2DERROR pvr_error;
+  GstDrawContext *dcontext = pvrvideosink->dcontext;
+  void *data;
+  guint size;
+  GstCaps *caps;
+  GstStructure *structure;
+  gint video_width;
+  gint video_height;
+  gboolean ret;
+
+  GST_DEBUG_OBJECT (pvrvideosink, "begin");
+
+  data = GST_BUFFER_DATA (buffer);
+  size = GST_BUFFER_SIZE (buffer);
+  caps = GST_BUFFER_CAPS (buffer);
+
+  structure = gst_caps_get_structure (caps, 0);
+  ret = gst_structure_get_int (structure, "width", &video_width);
+  ret &= gst_structure_get_int (structure, "height", &video_height);
+  if (!ret) {
+    GST_ERROR_OBJECT (pvrvideosink, "Failed to get dimensions of the buffer");
+    return;
+  }
+
+  pvr_error = PVR2DMemWrap (dcontext->pvr_context, data, 0, size, NULL,
+      &(dcontext->src_mem));
+  if (pvr_error != PVR2D_OK) {
+    GST_ERROR_OBJECT (pvrvideosink, "Failed to Wrap buffer memory"
+        "returned %d", pvr_error);
+    return;
+  }
+
+  p_blt_info.pDstMemInfo = dcontext->dst_mem;
+  p_blt_info.DstOffset = 0;
+  p_blt_info.pSrcMemInfo = dcontext->src_mem;
+  p_blt_info.SrcOffset = 0;
+  p_blt_info.CopyCode = PVR2DROPcopy;
+  //p_blt_info.Color = 0;
+  //p_blt_info.ColorKey = 0;
+  p_blt_info.GlobalAlphaValue = 255;
+  p_blt_info.AlphaBlendingFunc = 255;
+  p_blt_info.BlitFlags = 0;
+  p_blt_info.DstStride = 4096;
+  p_blt_info.DstX = 0;
+  p_blt_info.DstY = 0;
+  p_blt_info.DSizeX = video_width;
+  p_blt_info.DSizeY = video_height;
+  p_blt_info.DstFormat = PVR2D_YUV422_UYVY;
+  p_blt_info.DstSurfWidth = video_width;
+  p_blt_info.DstSurfHeight = video_height;
+  p_blt_info.SrcStride = 4096;
+  p_blt_info.SrcX = 0;
+  p_blt_info.SrcY = 0;
+  p_blt_info.SizeX = video_width;
+  p_blt_info.SizeY = video_height;
+  p_blt_info.SrcFormat = 0;
+  p_blt_info.SrcSurfWidth = video_width;
+  p_blt_info.SrcSurfHeight = video_height;
+  p_blt_info.pPalMemInfo = NULL;
+
+
+
+  pvr_error = PVR2DBlt (pvrvideosink->dcontext->pvr_context, &p_blt_info);
+  switch (pvr_error) {
+    case PVR2D_OK:
+      break;
+    case PVR2DERROR_DEVICE_UNAVAILABLE:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, device unavailable");
+      return;
+      break;
+    case PVR2DERROR_INVALID_CONTEXT:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, invalid context");
+      return;
+      break;
+    case PVR2DERROR_INVALID_PARAMETER:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, invalid parameter");
+      return;
+      break;
+    case PVR2DERROR_HW_FEATURE_NOT_SUPPORTED:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, "
+          "hardware feature not supported");
+      return;
+      break;
+    case PVR2DERROR_GENERIC_ERROR:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, generic error");
+      return;
+      break;
+    default:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, "
+          "undefined error %d", pvr_error);
+      return;
+      break;
+  }
+  GST_DEBUG_OBJECT (pvrvideosink, "end");
+}
+
+static void
+gst_pvrvideosink_destroy_drawable (GstPVRVideoSink * pvrvideosink)
+{
+  if (pvrvideosink->dcontext != NULL)
+    PVR2DDestroyDeviceContext (pvrvideosink->dcontext->pvr_context);
+}
+
 
 /* Element stuff */
 
@@ -189,11 +423,20 @@ gst_pvrvideosink_change_state (GstElement * element, GstStateChange transition)
 {
   GstPVRVideoSink *pvrvideosink;
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
+  GstDrawContext *dcontext;
 
   pvrvideosink = GST_PVRVIDEOSINK (element);
 
   switch (transition) {
     case GST_STATE_CHANGE_NULL_TO_READY:
+      if (pvrvideosink->dcontext == NULL) {
+        dcontext = gst_pvrvideosink_get_dcontext (pvrvideosink);
+        if (dcontext == NULL)
+          return GST_STATE_CHANGE_FAILURE;
+        GST_OBJECT_LOCK (pvrvideosink);
+        pvrvideosink->dcontext = dcontext;
+        GST_OBJECT_UNLOCK (pvrvideosink);
+      }
       break;
     case GST_STATE_CHANGE_READY_TO_PAUSED:
       break;
@@ -303,7 +546,7 @@ gst_pvrvideosink_show_frame (GstBaseSink * vsink, GstBuffer * buf)
     buf = newbuf;
   }
 
-  /* TODO show frame */
+  gst_pvrvideosink_blit (pvrvideosink, buf);
 
   if (!newbuf) {
     gst_buffer_ref (buf);
@@ -390,11 +633,22 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
                 caps, pvrvideosink->num_buffers))) {
       return GST_FLOW_ERROR;
     }
-    g_message ("seing prepare xwindow id");
-    gst_x_overlay_prepare_xwindow_id (GST_X_OVERLAY (pvrvideosink));
+    /* Notify application to set xwindow id now */
+    g_mutex_lock (pvrvideosink->flow_lock);
+    if (!pvrvideosink->xwindow) {
+      g_mutex_unlock (pvrvideosink->flow_lock);
+      gst_x_overlay_prepare_xwindow_id (GST_X_OVERLAY (pvrvideosink));
+    } else {
+      g_mutex_unlock (pvrvideosink->flow_lock);
+    }
   }
   pvrvideo = gst_pvr_bufferpool_get (pvrvideosink->buffer_pool, NULL);
 
+  g_mutex_lock (pvrvideosink->flow_lock);
+  if (!pvrvideosink->xwindow)
+    pvrvideosink->xwindow = gst_pvrvideosink_create_window (pvrvideosink, caps);
+  g_mutex_unlock (pvrvideosink->flow_lock);
+
   *buf = GST_BUFFER_CAST (pvrvideo);
 
 beach:
@@ -541,6 +795,7 @@ gst_pvrvideosink_finalize (GObject * object)
   }
 
   G_OBJECT_CLASS (parent_class)->finalize (object);
+  gst_pvrvideosink_destroy_drawable (pvrvideosink);
 }
 
 static void
@@ -560,6 +815,8 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->num_buffers = DEFAULT_QUEUE_SIZE;
   pvrvideosink->num_buffers_can_change = TRUE;
   pvrvideosink->min_queued_bufs = DEFAULT_MIN_QUEUED_BUFS;
+  pvrvideosink->dcontext = NULL;
+  pvrvideosink->xwindow = NULL;
 }
 
 static void
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 3020e2f..521abb0 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -28,6 +28,10 @@
 
 #include <string.h>
 #include <math.h>
+#include <pvr2d.h>
+#include <EGL/egl.h>
+#include <sgx/wsegl.h>
+#include <X11/Xlib.h>
 
 G_BEGIN_DECLS
 #define GST_TYPE_PVRVIDEOSINK (gst_pvrvideosink_get_type())
@@ -39,7 +43,7 @@ G_BEGIN_DECLS
   (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PVRVIDEOSINK))
 #define GST_IS_PVRVIDEOSINK_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass), GST_TYPE_PVRVIDEOSINK))
-typedef struct _GstXContext GstXContext;
+typedef struct _GstDrawContext GstDrawContext;
 typedef struct _GstXWindow GstXWindow;
 
 typedef struct _GstPVRVideoBuffer GstPVRVideoBuffer;
@@ -48,6 +52,32 @@ typedef struct _GstPVRVideoBufferClass GstPVRVideoBufferClass;
 typedef struct _GstPVRVideoSink GstPVRVideoSink;
 typedef struct _GstPVRVideoSinkClass GstPVRVideoSinkClass;
 
+struct _GstDrawContext
+{
+  /* PVR2D */
+  PVR2DCONTEXTHANDLE pvr_context;
+  PVR2DMEMINFO *dst_mem;
+  PVR2DMEMINFO *src_mem;
+
+  /* WSEGL */
+  const WSEGL_FunctionTable *wsegl_table;
+
+  WSEGLDisplayHandle display_handle;
+  const WSEGLCaps **glcaps;
+  WSEGLConfig *glconfig;
+  WSEGLDrawableHandle drawable_handle;
+  WSEGLRotationAngle rotation;
+
+  Display *x_display;
+};
+
+struct _GstXWindow
+{
+  Window window;
+  XSetWindowAttributes window_attributes;
+};
+
+
 
 /**
  * GstPVRVideoSink:
@@ -86,6 +116,8 @@ struct _GstPVRVideoSink
   gboolean keep_aspect;
 
   GstCaps *current_caps;
+  GstDrawContext *dcontext;
+  GstXWindow *xwindow;
 };
 
 struct _GstPVRVideoSinkClass
-- 
1.7.5.4

