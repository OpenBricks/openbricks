From 4992953d28d7747a5f16249c5179056ef743ba21 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <lucianafujii@collabora.co.uk>
Date: Fri, 21 Oct 2011 10:37:41 -0400
Subject: [PATCH 112/154] pvrbufferpool: Free available buffers queue on
 destroy

When bufferpool stops running, free available buffers queue instead of
all the buffers in case there is someone else holding a reference to a
buffer.

Renamed _destroy to _stop_running, since the finalize will be called
only after every reference to the bufferpool is freed.
---
 sys/pvr2d/gstpvrbufferpool.c |   25 ++++++++++++++-----------
 sys/pvr2d/gstpvrbufferpool.h |    2 +-
 sys/pvr2d/gstpvrvideosink.c  |    4 ++--
 3 files changed, 17 insertions(+), 14 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index 8e30679..f9d6fd4 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -110,7 +110,6 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
     pool->buffers[index] = self;
   }
 
-
   if (!resuscitated) {
     GST_LOG_OBJECT (pool->element,
         "buffer %p (data %p, len %u) not recovered, freeing",
@@ -203,11 +202,10 @@ gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
   return self;
 }
 
-/** destroy existing bufferpool */
 void
-gst_pvr_bufferpool_destroy (GstPvrBufferPool * self)
+gst_pvr_bufferpool_stop_running (GstPvrBufferPool * self)
 {
-  gint i;
+  gboolean empty = FALSE;
 
   g_return_if_fail (self);
 
@@ -215,17 +213,19 @@ gst_pvr_bufferpool_destroy (GstPvrBufferPool * self)
   self->running = FALSE;
   GST_PVR_BUFFERPOOL_UNLOCK (self);
 
-  GST_DEBUG_OBJECT (self->element, "destroy pool");
+  GST_DEBUG_OBJECT (self->element, "free available buffers");
 
   /* free all buffers on the freelist */
-  for (i = 0; i < self->buffer_count; i++) {
+  while (!empty) {
     GstDucatiBuffer *buf;
-    GST_PVR_BUFFERPOOL_LOCK (self);
-    buf = self->buffers[i];
-    GST_PVR_BUFFERPOOL_UNLOCK (self);
+    buf = g_async_queue_try_pop (self->avail_buffers);
     if (buf)
       gst_buffer_unref (GST_BUFFER (buf));
+    else
+      empty = TRUE;
   }
+  g_async_queue_unref (self->avail_buffers);
+  self->avail_buffers = NULL;
 
   gst_mini_object_unref (GST_MINI_OBJECT (self));
 }
@@ -261,11 +261,14 @@ gst_pvr_bufferpool_get (GstPvrBufferPool * self, GstBuffer * orig)
 static void
 gst_pvr_bufferpool_finalize (GstPvrBufferPool * self)
 {
+  GST_DEBUG_OBJECT (self->element, "destroy bufferpool");
   g_mutex_free (self->lock);
   self->lock = NULL;
 
-  g_async_queue_unref (self->avail_buffers);
-  self->avail_buffers = NULL;
+  if (self->avail_buffers) {
+    g_async_queue_unref (self->avail_buffers);
+    self->avail_buffers = NULL;
+  }
 
   if (self->buffers) {
     g_free (self->buffers);
diff --git a/sys/pvr2d/gstpvrbufferpool.h b/sys/pvr2d/gstpvrbufferpool.h
index 25b531e..3f1baa6 100644
--- a/sys/pvr2d/gstpvrbufferpool.h
+++ b/sys/pvr2d/gstpvrbufferpool.h
@@ -66,7 +66,7 @@ struct _GstPvrBufferPool
 GstPvrBufferPool * gst_pvr_bufferpool_new (GstElement * element,
     GstCaps * caps, gint num_buffers, gint size,
     PVR2DCONTEXTHANDLE pvr_context);
-void gst_pvr_bufferpool_destroy (GstPvrBufferPool * pool);
+void gst_pvr_bufferpool_stop_running (GstPvrBufferPool * pool);
 GstDucatiBuffer * gst_pvr_bufferpool_get (GstPvrBufferPool * self,
     GstBuffer * orig);
 
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 1db694f..376fe6b 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -1248,7 +1248,7 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
   /* Clear image pool as the images are unusable anyway */
   g_mutex_lock (pvrvideosink->pool_lock);
   if (pvrvideosink->buffer_pool) {
-    gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
+    gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool);
     pvrvideosink->buffer_pool = NULL;
   }
   g_mutex_unlock (pvrvideosink->pool_lock);
@@ -1477,7 +1477,7 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
   g_mutex_lock (pvrvideosink->pool_lock);
   pvrvideosink->pool_invalid = TRUE;
   if (pvrvideosink->buffer_pool) {
-    gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
+    gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool);
     pvrvideosink->buffer_pool = NULL;
   }
   g_mutex_unlock (pvrvideosink->pool_lock);
-- 
1.7.5.4

