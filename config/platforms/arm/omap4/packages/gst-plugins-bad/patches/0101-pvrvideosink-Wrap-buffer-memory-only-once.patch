From 6ca411802eac866d93f304ec2956baadabd7c7fc Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <lucianafujii@collabora.co.uk>
Date: Wed, 19 Oct 2011 15:27:35 -0400
Subject: [PATCH 101/154] pvrvideosink: Wrap buffer memory only once

Wrap buffer memory when the buffer is added to the pool and only unwrap
when the pool is destroyed instead of wraping and unwraping at every
blit.
---
 sys/pvr2d/gstpvrbufferpool.c |   26 +++++++++++++++++++++++++-
 sys/pvr2d/gstpvrbufferpool.h |    7 ++++++-
 sys/pvr2d/gstpvrvideosink.c  |   22 +++++-----------------
 sys/pvr2d/gstpvrvideosink.h  |    1 -
 4 files changed, 36 insertions(+), 20 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index 4064002..c8ad2c3 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -42,9 +42,17 @@ gst_ducati_buffer_get (GstDucatiBuffer * self)
   return GST_BUFFER (self);
 }
 
+PVR2DMEMINFO *
+gst_ducati_buffer_get_meminfo (GstDucatiBuffer * self)
+{
+  return self->src_mem;
+}
+
+
 static GstDucatiBuffer *
 gst_ducati_buffer_new (GstPvrBufferPool * pool, gint index)
 {
+  PVR2DERROR pvr_error;
   GstDucatiBuffer *self = (GstDucatiBuffer *)
       gst_mini_object_new (GST_TYPE_DUCATIBUFFER);
 
@@ -59,6 +67,14 @@ gst_ducati_buffer_new (GstPvrBufferPool * pool, gint index)
   GST_LOG_OBJECT (pool->element, "width=%d, height=%d and size=%d",
       pool->padded_width, pool->padded_height, pool->size);
 
+  pvr_error =
+      PVR2DMemWrap (pool->pvr_context, GST_BUFFER_DATA (self), 0, pool->size,
+      NULL, &(self->src_mem));
+  if (pvr_error != PVR2D_OK) {
+    GST_LOG_OBJECT (pool->element, "Failed to Wrap buffer memory"
+        "returned %d", pvr_error);
+  }
+
   gst_buffer_set_caps (GST_BUFFER (self), pool->caps);
 
   return self;
@@ -68,6 +84,7 @@ gst_ducati_buffer_new (GstPvrBufferPool * pool, gint index)
 static void
 gst_ducati_buffer_finalize (GstDucatiBuffer * self)
 {
+  PVR2DERROR pvr_error;
   GstPvrBufferPool *pool = self->pool;
   gboolean resuscitated = FALSE;
   gint index = self->index;
@@ -98,6 +115,12 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
     GST_LOG_OBJECT (pool->element,
         "buffer %p (data %p, len %u) not recovered, freeing",
         self, GST_BUFFER_DATA (self), GST_BUFFER_SIZE (self));
+
+    pvr_error = PVR2DMemFree (pool->pvr_context, self->src_mem);
+    if (pvr_error != PVR2D_OK) {
+      GST_ERROR_OBJECT (pool->element, "Failed to Unwrap buffer memory"
+          "returned %d", pvr_error);
+    }
     MemMgr_Free ((void *) GST_BUFFER_DATA (self));
     GST_BUFFER_DATA (self) = NULL;
     gst_mini_object_unref (GST_MINI_OBJECT (pool));
@@ -147,7 +170,7 @@ static GstMiniObjectClass *bufferpool_parent_class = NULL;
  */
 GstPvrBufferPool *
 gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
-    gint size)
+    gint size, PVR2DCONTEXTHANDLE pvr_context)
 {
   gint i;
   GstPvrBufferPool *self = (GstPvrBufferPool *)
@@ -159,6 +182,7 @@ gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
   gst_structure_get_int (s, "height", &self->padded_height);
   self->caps = gst_caps_ref (caps);
   self->size = size;
+  self->pvr_context = pvr_context;
 
   self->buffers = g_new0 (GstDucatiBuffer *, num_buffers);
   self->avail_buffers = g_async_queue_new ();
diff --git a/sys/pvr2d/gstpvrbufferpool.h b/sys/pvr2d/gstpvrbufferpool.h
index b73fddc..25b531e 100644
--- a/sys/pvr2d/gstpvrbufferpool.h
+++ b/sys/pvr2d/gstpvrbufferpool.h
@@ -22,6 +22,7 @@
 #define __GSTPVRBUFFERPOOL_H__
 
 #include "gstpvr.h"
+#include <pvr2d.h>
 
 G_BEGIN_DECLS
 
@@ -50,6 +51,7 @@ struct _GstPvrBufferPool
   /* output (padded) size including any codec padding: */
   gint padded_width, padded_height;
   gint size;
+  PVR2DCONTEXTHANDLE pvr_context;
 
   GstCaps *caps;
   GMutex *lock;
@@ -62,7 +64,8 @@ struct _GstPvrBufferPool
 };
 
 GstPvrBufferPool * gst_pvr_bufferpool_new (GstElement * element,
-    GstCaps * caps, gint num_buffers, gint size);
+    GstCaps * caps, gint num_buffers, gint size,
+    PVR2DCONTEXTHANDLE pvr_context);
 void gst_pvr_bufferpool_destroy (GstPvrBufferPool * pool);
 GstDucatiBuffer * gst_pvr_bufferpool_get (GstPvrBufferPool * self,
     GstBuffer * orig);
@@ -76,9 +79,11 @@ struct _GstDucatiBuffer {
   GstPvrBufferPool *pool; /* buffer-pool that this buffer belongs to */
   GstBuffer       *orig;     /* original buffer, if we need to copy output */
   gint index;               /* index */
+  PVR2DMEMINFO *src_mem; /* Memory wrapped by pvr */
 };
 
 GstBuffer * gst_ducati_buffer_get (GstDucatiBuffer * self);
+PVR2DMEMINFO * gst_ducati_buffer_get_meminfo (GstDucatiBuffer * self);
 
 G_END_DECLS
 
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index e805b6d..d77c260 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -266,7 +266,7 @@ gst_pvrvideosink_event_thread (GstPVRVideoSink * pvrvideosink)
     if (pvrvideosink->xwindow) {
       gst_pvrvideosink_handle_xevents (pvrvideosink);
     }
-    g_usleep (G_USEC_PER_SEC / 5);
+    g_usleep (G_USEC_PER_SEC / 20);
 
     GST_OBJECT_LOCK (pvrvideosink);
   }
@@ -490,6 +490,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   gboolean ret;
   gboolean draw_border = FALSE;
   PPVR2D_3DBLT_EXT p_blt_3d;
+  PVR2DMEMINFO *src_mem;
   PVR2DFORMAT pvr_format = pvrvideosink->format == GST_VIDEO_FORMAT_NV12 ?
       PVR2D_YUV420_2PLANE : PVR2D_ARGB8888;
   PVR2DRECT *crop = &pvrvideosink->crop;
@@ -508,6 +509,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   data = GST_BUFFER_DATA (buffer);
   size = GST_BUFFER_SIZE (buffer);
   caps = GST_BUFFER_CAPS (buffer);
+  src_mem = gst_ducati_buffer_get_meminfo ((GstDucatiBuffer *) buffer);
   p_blt_3d = dcontext->p_blt_info;
 
   structure = gst_caps_get_structure (caps, 0);
@@ -518,13 +520,6 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     goto done;
   }
 
-  pvr_error = PVR2DMemWrap (dcontext->pvr_context, data, 0, size, NULL,
-      &(dcontext->src_mem));
-  if (pvr_error != PVR2D_OK) {
-    GST_ERROR_OBJECT (pvrvideosink, "Failed to Wrap buffer memory"
-        "returned %d", pvr_error);
-    goto done;
-  }
   g_mutex_lock (pvrvideosink->x_lock);
 
   /* Draw borders when displaying the first frame. After this
@@ -572,7 +567,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   p_blt_3d->rcDest.right = result.w + result.x;
   p_blt_3d->rcDest.bottom = result.h + result.y;
 
-  p_blt_3d->sSrc.pSurfMemInfo = dcontext->src_mem;
+  p_blt_3d->sSrc.pSurfMemInfo = src_mem;
   p_blt_3d->sSrc.SurfOffset = 0;
   p_blt_3d->sSrc.Stride = pvrvideosink->rowstride;
   p_blt_3d->sSrc.Format = pvr_format;
@@ -639,13 +634,6 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   g_mutex_unlock (pvrvideosink->x_lock);
 
 done:
-  pvr_error = PVR2DMemFree (dcontext->pvr_context, dcontext->src_mem);
-  if (pvr_error != PVR2D_OK) {
-    GST_ERROR_OBJECT (pvrvideosink, "Failed to Unwrap buffer memory"
-        "returned %d", pvr_error);
-    return;
-  }
-
   GST_DEBUG_OBJECT (pvrvideosink, "end");
   g_mutex_unlock (pvrvideosink->flow_lock);
 }
@@ -1161,7 +1149,7 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
 
     if (!(pvrvideosink->buffer_pool =
             gst_pvr_bufferpool_new (GST_ELEMENT (pvrvideosink),
-                caps, 8, size))) {
+                caps, 8, size, pvrvideosink->dcontext->pvr_context))) {
       return GST_FLOW_ERROR;
     }
   }
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 658228a..93737d3 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -59,7 +59,6 @@ struct _GstDrawContext
   /* PVR2D */
   PVR2DCONTEXTHANDLE pvr_context;
   PVR2DMEMINFO dst_mem;
-  PVR2DMEMINFO *src_mem;
   PPVR2D_3DBLT_EXT p_blt_info;
   PPVR2DBLTINFO p_blt2d_info;
 
-- 
1.7.5.4

