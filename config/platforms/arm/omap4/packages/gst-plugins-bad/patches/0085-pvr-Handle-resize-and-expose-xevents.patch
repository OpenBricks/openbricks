From d4b2278fed29d5e2e44041dd00ff3fecf012182c Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Tue, 20 Sep 2011 21:30:06 -0300
Subject: [PATCH 085/154] pvr: Handle resize and expose xevents

---
 sys/pvr2d/gstpvrvideosink.c |  230 +++++++++++++++++++++++++++++++++++++------
 sys/pvr2d/gstpvrvideosink.h |    1 +
 2 files changed, 200 insertions(+), 31 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index f57218a..afdb426 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -62,6 +62,9 @@ static GstFlowReturn gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink,
     guint64 offset, guint size, GstCaps * caps, GstBuffer ** buf);
 static void gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink *
     pvrvideosink, GstXWindow * xwindow, GstVideoRectangle rect);
+static void gst_pvrvideosink_expose (GstXOverlay * overlay);
+static void gst_pvrvideosink_xwindow_destroy (GstPVRVideoSink * pvrvideosink,
+    GstXWindow * xwindow);
 
 static GstStaticPadTemplate gst_pvrvideosink_sink_template_factory =
     GST_STATIC_PAD_TEMPLATE ("sink",
@@ -95,6 +98,186 @@ static GstVideoSinkClass *parent_class = NULL;
 #define GST_PVRVIDEO_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBuffer))
 #define GST_PVRVIDEO_BUFFER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBufferClass))
 
+static void
+gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
+{
+  XWindowAttributes attr;
+  WSEGLError glerror;
+  WSEGLDrawableParams source_params;
+  WSEGLDrawableParams render_params;
+
+  /* Update the window geometry */
+  g_mutex_lock (pvrvideosink->x_lock);
+  if (G_UNLIKELY (pvrvideosink->xwindow == NULL)) {
+    g_mutex_unlock (pvrvideosink->x_lock);
+    return;
+  }
+
+  XGetWindowAttributes (pvrvideosink->dcontext->x_display,
+      pvrvideosink->xwindow->window, &attr);
+
+  pvrvideosink->xwindow->width = attr.width;
+  pvrvideosink->xwindow->height = attr.height;
+
+  if (!pvrvideosink->have_render_rect) {
+    pvrvideosink->render_rect.x = pvrvideosink->render_rect.y = 0;
+    pvrvideosink->render_rect.w = attr.width;
+    pvrvideosink->render_rect.h = attr.height;
+  }
+  if (pvrvideosink->dcontext != NULL) {
+    glerror =
+        pvrvideosink->dcontext->wsegl_table->
+        pfnWSEGL_DeleteDrawable (pvrvideosink->dcontext->drawable_handle);
+    if (glerror != WSEGL_SUCCESS) {
+      GST_ERROR_OBJECT (pvrvideosink, "Error destroying drawable");
+      return;
+    }
+    glerror =
+        pvrvideosink->dcontext->wsegl_table->
+        pfnWSEGL_CreateWindowDrawable (pvrvideosink->dcontext->display_handle,
+        pvrvideosink->dcontext->glconfig,
+        &pvrvideosink->dcontext->drawable_handle,
+        (NativeWindowType) pvrvideosink->xwindow->window,
+        &pvrvideosink->dcontext->rotation);
+    if (glerror != WSEGL_SUCCESS) {
+      GST_ERROR_OBJECT (pvrvideosink, "Error creating drawable");
+      return;
+    }
+    glerror =
+        pvrvideosink->dcontext->wsegl_table->
+        pfnWSEGL_GetDrawableParameters (pvrvideosink->dcontext->drawable_handle,
+        &source_params, &render_params);
+    if (glerror != WSEGL_SUCCESS) {
+      GST_ERROR_OBJECT (pvrvideosink, "Error getting Drawable params");
+      return;
+    }
+    pvrvideosink->dcontext->dst_mem =
+        (PVR2DMEMINFO *) render_params.hPrivateData;
+  }
+
+  g_mutex_unlock (pvrvideosink->x_lock);
+}
+
+/* This function handles XEvents that might be in the queue. It generates
+   GstEvent that will be sent upstream in the pipeline to handle interactivity
+   and navigation. It will also listen for configure events on the window to
+   trigger caps renegotiation so on the fly software scaling can work. */
+static void
+gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
+{
+  XEvent e;
+  gboolean exposed = FALSE;
+  gboolean configured = FALSE;
+
+  g_mutex_lock (pvrvideosink->flow_lock);
+  g_mutex_lock (pvrvideosink->x_lock);
+
+  /* Handle Expose */
+  while (XCheckWindowEvent (pvrvideosink->dcontext->x_display,
+          pvrvideosink->xwindow->window, ExposureMask | StructureNotifyMask,
+          &e)) {
+    switch (e.type) {
+      case Expose:
+        exposed = TRUE;
+        break;
+      case ConfigureNotify:
+        g_mutex_unlock (pvrvideosink->x_lock);
+        gst_pvrvideosink_xwindow_update_geometry (pvrvideosink);
+        g_mutex_lock (pvrvideosink->x_lock);
+        configured = TRUE;
+        break;
+      default:
+        break;
+    }
+  }
+
+  if (exposed || configured) {
+    g_mutex_unlock (pvrvideosink->x_lock);
+    g_mutex_unlock (pvrvideosink->flow_lock);
+
+    gst_pvrvideosink_expose (GST_X_OVERLAY (pvrvideosink));
+
+    g_mutex_lock (pvrvideosink->flow_lock);
+    g_mutex_lock (pvrvideosink->x_lock);
+  }
+
+  /* Handle Display events */
+  while (XPending (pvrvideosink->dcontext->x_display)) {
+    XNextEvent (pvrvideosink->dcontext->x_display, &e);
+
+    switch (e.type) {
+      case ClientMessage:{
+        Atom wm_delete;
+
+        wm_delete = XInternAtom (pvrvideosink->dcontext->x_display,
+            "WM_DELETE_WINDOW", True);
+        if (wm_delete != None && wm_delete == (Atom) e.xclient.data.l[0]) {
+          /* Handle window deletion by posting an error on the bus */
+          GST_ELEMENT_ERROR (pvrvideosink, RESOURCE, NOT_FOUND,
+              ("Output window was closed"), (NULL));
+
+          g_mutex_unlock (pvrvideosink->x_lock);
+          gst_pvrvideosink_xwindow_destroy (pvrvideosink,
+              pvrvideosink->xwindow);
+          pvrvideosink->xwindow = NULL;
+          g_mutex_lock (pvrvideosink->x_lock);
+        }
+        break;
+      }
+      default:
+        break;
+    }
+  }
+
+  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->flow_lock);
+}
+
+static gpointer
+gst_pvrvideosink_event_thread (GstPVRVideoSink * pvrvideosink)
+{
+  GST_OBJECT_LOCK (pvrvideosink);
+  while (pvrvideosink->running) {
+    GST_OBJECT_UNLOCK (pvrvideosink);
+
+    if (pvrvideosink->xwindow) {
+      gst_pvrvideosink_handle_xevents (pvrvideosink);
+    }
+    g_usleep (G_USEC_PER_SEC / 5);
+
+    GST_OBJECT_LOCK (pvrvideosink);
+  }
+  GST_OBJECT_UNLOCK (pvrvideosink);
+
+  return NULL;
+}
+
+static void
+gst_pvrvideosink_manage_event_thread (GstPVRVideoSink * pvrvideosink)
+{
+  GThread *thread = NULL;
+
+  /* don't start the thread too early */
+  if (pvrvideosink->dcontext == NULL) {
+    return;
+  }
+
+  GST_OBJECT_LOCK (pvrvideosink);
+  if (!pvrvideosink->event_thread) {
+    /* Setup our event listening thread */
+    GST_DEBUG_OBJECT (pvrvideosink, "run xevent thread");
+    pvrvideosink->running = TRUE;
+    pvrvideosink->event_thread = g_thread_create (
+        (GThreadFunc) gst_pvrvideosink_event_thread, pvrvideosink, TRUE, NULL);
+  }
+  GST_OBJECT_UNLOCK (pvrvideosink);
+
+  /* Wait for our event thread to finish */
+  if (thread)
+    g_thread_join (thread);
+}
+
+
 static GstDrawContext *
 gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
 {
@@ -283,10 +466,15 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   PVR2DRECT *crop = &pvrvideosink->crop;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
+  if (buffer == NULL) {
+    //buffer = pvrvideosink->current_buffer;
+    return;
+  }
 
   data = GST_BUFFER_DATA (buffer);
   size = GST_BUFFER_SIZE (buffer);
   caps = GST_BUFFER_CAPS (buffer);
+  p_blt_3d = dcontext->p_blt_info;
 
   structure = gst_caps_get_structure (caps, 0);
   ret = gst_structure_get_int (structure, "width", &video_width);
@@ -303,7 +491,6 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
         "returned %d", pvr_error);
     goto done;
   }
-
   g_mutex_lock (pvrvideosink->flow_lock);
 
   /* Draw borders when displaying the first frame. After this
@@ -323,7 +510,6 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     pvrvideosink->current_buffer = gst_buffer_ref (buffer);
   }
 
-  p_blt_3d = dcontext->p_blt_info;
   p_blt_3d->sDst.pSurfMemInfo = dcontext->dst_mem;
   p_blt_3d->sDst.SurfOffset = 0;
   p_blt_3d->sDst.Stride =
@@ -333,10 +519,10 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   p_blt_3d->sDst.SurfWidth = pvrvideosink->xwindow->width;
   p_blt_3d->sDst.SurfHeight = pvrvideosink->xwindow->height;
 
-  p_blt_3d->rcDest.left = 0;
-  p_blt_3d->rcDest.top = 0;
-  p_blt_3d->rcDest.right = pvrvideosink->xwindow->width;
-  p_blt_3d->rcDest.bottom = pvrvideosink->xwindow->height;
+  p_blt_3d->rcDest.left = pvrvideosink->render_rect.x;
+  p_blt_3d->rcDest.top = pvrvideosink->render_rect.y;
+  p_blt_3d->rcDest.right = pvrvideosink->render_rect.w;
+  p_blt_3d->rcDest.bottom = pvrvideosink->render_rect.h;
 
   p_blt_3d->sSrc.pSurfMemInfo = dcontext->src_mem;
   p_blt_3d->sSrc.SurfOffset = 0;
@@ -396,7 +582,6 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
       break;
   }
   dcontext->wsegl_table->pfnWSEGL_SwapDrawable (dcontext->drawable_handle, 1);
-  PVR2DQueryBlitsComplete (dcontext->pvr_context, dcontext->dst_mem, 1);
 
   g_mutex_lock (pvrvideosink->x_lock);
   if (draw_border) {
@@ -628,6 +813,7 @@ gst_pvrvideosink_change_state (GstElement * element, GstStateChange transition)
         pvrvideosink->dcontext = dcontext;
         GST_OBJECT_UNLOCK (pvrvideosink);
       }
+      gst_pvrvideosink_manage_event_thread (pvrvideosink);
       break;
     case GST_STATE_CHANGE_READY_TO_PAUSED:
       break;
@@ -982,13 +1168,8 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
       pvrvideosink->render_rect.w = attr.width;
       pvrvideosink->render_rect.h = attr.height;
     }
-#if 0
-    if (pvrvideosink->handle_events) {
-      XSelectInput (pvrvideosink->dcontext->x_display, xwindow->window,
-          ExposureMask | StructureNotifyMask | PointerMotionMask |
-          KeyPressMask | KeyReleaseMask);
-    }
-#endif
+    XSelectInput (pvrvideosink->dcontext->x_display, xwindow->window,
+        ExposureMask | StructureNotifyMask);
 
     XSetWindowBackgroundPixmap (pvrvideosink->dcontext->x_display,
         xwindow->window, None);
@@ -1036,11 +1217,8 @@ static void
 gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
     gboolean handle_events)
 {
-#if 0
   GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (overlay);
 
-  pvrvideosink->handle_events = handle_events;
-
   g_mutex_lock (pvrvideosink->flow_lock);
 
   if (G_UNLIKELY (!pvrvideosink->xwindow)) {
@@ -1050,24 +1228,12 @@ gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
 
   g_mutex_lock (pvrvideosink->x_lock);
 
-  if (handle_events) {
-    if (pvrvideosink->xwindow->internal) {
-      XSelectInput (pvrvideosink->dcontext->disp, pvrvideosink->xwindow->win,
-          ExposureMask | StructureNotifyMask | PointerMotionMask |
-          KeyPressMask | KeyReleaseMask | ButtonPressMask | ButtonReleaseMask);
-    } else {
-      XSelectInput (pvrvideosink->dcontext->disp, pvrvideosink->xwindow->win,
-          ExposureMask | StructureNotifyMask | PointerMotionMask |
-          KeyPressMask | KeyReleaseMask);
-    }
-  } else {
-    XSelectInput (pvrvideosink->dcontext->disp, pvrvideosink->xwindow->win, 0);
-  }
+  XSelectInput (pvrvideosink->dcontext->x_display,
+      pvrvideosink->xwindow->window, ExposureMask | StructureNotifyMask);
 
   g_mutex_unlock (pvrvideosink->x_lock);
 
   g_mutex_unlock (pvrvideosink->flow_lock);
-#endif
 }
 
 static void
@@ -1159,6 +1325,7 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
     pvrvideosink->buffer_pool = NULL;
   }
   memset (&pvrvideosink->crop, 0, sizeof (PVR2DRECT));
+  pvrvideosink->event_thread = NULL;
 }
 
 static void
@@ -1210,6 +1377,7 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->xwindow = NULL;
   pvrvideosink->redraw_borders = TRUE;
   pvrvideosink->current_buffer = NULL;
+  pvrvideosink->event_thread = NULL;
   memset (&pvrvideosink->crop, 0, sizeof (PVR2DRECT));
 }
 
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index d341239..e4d74d8 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -120,6 +120,7 @@ struct _GstPVRVideoSink
   gint fps_d;
   gint rowstride;
 
+  GThread *event_thread;
   GMutex *flow_lock;
 
   GMutex *pool_lock;
-- 
1.7.5.4

