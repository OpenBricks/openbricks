From 61e082492fb96c38da837a27ba588b90099f3142 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Mon, 31 Oct 2011 10:46:29 +0100
Subject: [PATCH 117/154] pvrvideosink: don't preallocate buffers in the
 buffer pool

---
 sys/pvr2d/gstpvrbufferpool.c |   51 ++++++++++++++---------------------------
 sys/pvr2d/gstpvrbufferpool.h |    6 +---
 2 files changed, 20 insertions(+), 37 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index f9d6fd4..0241ede 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -50,7 +50,7 @@ gst_ducati_buffer_get_meminfo (GstDucatiBuffer * self)
 
 
 static GstDucatiBuffer *
-gst_ducati_buffer_new (GstPvrBufferPool * pool, gint index)
+gst_ducati_buffer_new (GstPvrBufferPool * pool)
 {
   PVR2DERROR pvr_error;
   GstDucatiBuffer *self = (GstDucatiBuffer *)
@@ -60,7 +60,6 @@ gst_ducati_buffer_new (GstPvrBufferPool * pool, gint index)
 
   self->pool = (GstPvrBufferPool *)
       gst_mini_object_ref (GST_MINI_OBJECT (pool));
-  self->index = index;
 
   GST_BUFFER_DATA (self) = gst_ducati_alloc_1d (pool->size);
   GST_BUFFER_SIZE (self) = pool->size;
@@ -87,17 +86,17 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
   PVR2DERROR pvr_error;
   GstPvrBufferPool *pool = self->pool;
   gboolean resuscitated = FALSE;
-  gint index = self->index;
 
   GST_LOG_OBJECT (pool->element, "finalizing buffer %p", self);
 
   GST_PVR_BUFFERPOOL_LOCK (pool);
+  g_queue_remove (pool->used_buffers, self);
   if (pool->running) {
     resuscitated = TRUE;
 
     GST_LOG_OBJECT (pool->element, "reviving buffer %p", self);
 
-    g_async_queue_push (pool->avail_buffers, self);
+    g_queue_push_head (pool->free_buffers, self);
   } else {
     GST_LOG_OBJECT (pool->element, "the pool is shutting down");
   }
@@ -107,7 +106,6 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
     GST_LOG_OBJECT (pool->element, "reviving buffer %p, %d", self, index);
     gst_buffer_ref (GST_BUFFER (self));
     GST_BUFFER_SIZE (self) = 0;
-    pool->buffers[index] = self;
   }
 
   if (!resuscitated) {
@@ -171,7 +169,6 @@ GstPvrBufferPool *
 gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
     gint size, PVR2DCONTEXTHANDLE pvr_context)
 {
-  gint i;
   GstPvrBufferPool *self = (GstPvrBufferPool *)
       gst_mini_object_new (GST_TYPE_PVRBUFFERPOOL);
   GstStructure *s = gst_caps_get_structure (caps, 0);
@@ -183,22 +180,11 @@ gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
   self->size = size;
   self->pvr_context = pvr_context;
 
-  self->buffers = g_new0 (GstDucatiBuffer *, num_buffers);
-  self->avail_buffers = g_async_queue_new ();
-  self->buffer_count = num_buffers;
+  self->free_buffers = g_queue_new ();
+  self->used_buffers = g_queue_new ();
   self->lock = g_mutex_new ();
   self->running = TRUE;
 
-  /* now, map the buffers */
-  for (i = 0; i < num_buffers; i++) {
-    GST_PVR_BUFFERPOOL_LOCK (self);
-    self->buffers[i] = gst_ducati_buffer_new (self, i);
-    g_return_val_if_fail (self->buffers[i] != NULL, NULL);
-    self->num_live_buffers++;
-    g_async_queue_push (self->avail_buffers, self->buffers[i]);
-    GST_PVR_BUFFERPOOL_UNLOCK (self);
-  }
-
   return self;
 }
 
@@ -218,14 +204,14 @@ gst_pvr_bufferpool_stop_running (GstPvrBufferPool * self)
   /* free all buffers on the freelist */
   while (!empty) {
     GstDucatiBuffer *buf;
-    buf = g_async_queue_try_pop (self->avail_buffers);
+    GST_PVR_BUFFERPOOL_LOCK (self);
+    buf = g_queue_pop_head (self->free_buffers);
+    GST_PVR_BUFFERPOOL_UNLOCK (self);
     if (buf)
       gst_buffer_unref (GST_BUFFER (buf));
     else
       empty = TRUE;
   }
-  g_async_queue_unref (self->avail_buffers);
-  self->avail_buffers = NULL;
 
   gst_mini_object_unref (GST_MINI_OBJECT (self));
 }
@@ -242,10 +228,11 @@ gst_pvr_bufferpool_get (GstPvrBufferPool * self, GstBuffer * orig)
   if (self->running) {
     /* re-use a buffer off the freelist if any are available
      */
-    buf = g_async_queue_try_pop (self->avail_buffers);
+    buf = g_queue_pop_head (self->free_buffers);
     if (!buf)
-      buf = gst_ducati_buffer_new (self, 0);
+      buf = gst_ducati_buffer_new (self);
     buf->orig = orig;
+    g_queue_push_head (self->used_buffers, buf);
   }
   GST_PVR_BUFFERPOOL_UNLOCK (self);
 
@@ -265,18 +252,16 @@ gst_pvr_bufferpool_finalize (GstPvrBufferPool * self)
   g_mutex_free (self->lock);
   self->lock = NULL;
 
-  if (self->avail_buffers) {
-    g_async_queue_unref (self->avail_buffers);
-    self->avail_buffers = NULL;
-  }
-
-  if (self->buffers) {
-    g_free (self->buffers);
-    self->buffers = NULL;
-  }
+  g_queue_free (self->free_buffers);
+  self->free_buffers = NULL;
+  g_queue_free (self->used_buffers);
+  self->used_buffers = NULL;
 
   gst_caps_unref (self->caps);
+  self->caps = NULL;
   gst_object_unref (self->element);
+  self->element = NULL;
+
   GST_MINI_OBJECT_CLASS (bufferpool_parent_class)->finalize (GST_MINI_OBJECT
       (self));
 }
diff --git a/sys/pvr2d/gstpvrbufferpool.h b/sys/pvr2d/gstpvrbufferpool.h
index 3f1baa6..00f7235 100644
--- a/sys/pvr2d/gstpvrbufferpool.h
+++ b/sys/pvr2d/gstpvrbufferpool.h
@@ -57,9 +57,8 @@ struct _GstPvrBufferPool
   GMutex *lock;
   gboolean running;  /* with lock */
   GstElement *element;  /* the element that owns us.. */
-  GstDucatiBuffer **buffers;
-  GAsyncQueue *avail_buffers; /* list of available buffers */
-  gint num_live_buffers;
+  GQueue *free_buffers;
+  GQueue *used_buffers;
   guint buffer_count;
 };
 
@@ -78,7 +77,6 @@ struct _GstDucatiBuffer {
 
   GstPvrBufferPool *pool; /* buffer-pool that this buffer belongs to */
   GstBuffer       *orig;     /* original buffer, if we need to copy output */
-  gint index;               /* index */
   PVR2DMEMINFO *src_mem; /* Memory wrapped by pvr */
 };
 
-- 
1.7.5.4

