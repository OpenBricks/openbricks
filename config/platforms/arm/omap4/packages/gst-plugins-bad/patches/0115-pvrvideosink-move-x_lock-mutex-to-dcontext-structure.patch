From 10f8646740a4ed0b02d5c0dbc0405a1948558ea1 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Thu, 27 Oct 2011 17:03:01 +0200
Subject: [PATCH 115/154] pvrvideosink: move x_lock mutex to dcontext
 structure

x_lock is used to protect dcontext->x_display so it makes more sense to have it
there.
---
 sys/pvr2d/gstpvrvideosink.c |   53 ++++++++++++++++++++----------------------
 sys/pvr2d/gstpvrvideosink.h |    2 +-
 2 files changed, 26 insertions(+), 29 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 9b5fff9..e0ee837 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -106,9 +106,9 @@ gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
   PVRSRV_CLIENT_MEM_INFO *client_mem_info;
 
   /* Update the window geometry */
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (pvrvideosink->dcontext->x_lock);
   if (G_UNLIKELY (pvrvideosink->xwindow == NULL)) {
-    g_mutex_unlock (pvrvideosink->x_lock);
+    g_mutex_unlock (pvrvideosink->dcontext->x_lock);
     return;
   }
   pvrvideosink->redraw_borders = TRUE;
@@ -158,7 +158,7 @@ gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
     PVR2DMEMINFO_INITIALISE (&pvrvideosink->dcontext->dst_mem, client_mem_info);
   }
 
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 }
 
 /* This function handles XEvents that might be in the queue. It generates
@@ -173,7 +173,7 @@ gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
   gboolean configured = FALSE;
 
   g_mutex_lock (pvrvideosink->flow_lock);
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
   /* Handle Expose */
   while (XCheckWindowEvent (pvrvideosink->dcontext->x_display,
@@ -184,9 +184,9 @@ gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
         exposed = TRUE;
         break;
       case ConfigureNotify:
-        g_mutex_unlock (pvrvideosink->x_lock);
+        g_mutex_unlock (pvrvideosink->dcontext->x_lock);
         gst_pvrvideosink_xwindow_update_geometry (pvrvideosink);
-        g_mutex_lock (pvrvideosink->x_lock);
+        g_mutex_lock (pvrvideosink->dcontext->x_lock);
         configured = TRUE;
         break;
       default:
@@ -195,13 +195,13 @@ gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
   }
 
   if (exposed || configured) {
-    g_mutex_unlock (pvrvideosink->x_lock);
+    g_mutex_unlock (pvrvideosink->dcontext->x_lock);
     g_mutex_unlock (pvrvideosink->flow_lock);
 
     gst_pvrvideosink_expose (GST_X_OVERLAY (pvrvideosink));
 
     g_mutex_lock (pvrvideosink->flow_lock);
-    g_mutex_lock (pvrvideosink->x_lock);
+    g_mutex_lock (pvrvideosink->dcontext->x_lock);
   }
 
   /* Handle Display events */
@@ -219,11 +219,11 @@ gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
           GST_ELEMENT_ERROR (pvrvideosink, RESOURCE, NOT_FOUND,
               ("Output window was closed"), (NULL));
 
-          g_mutex_unlock (pvrvideosink->x_lock);
+          g_mutex_unlock (pvrvideosink->dcontext->x_lock);
           gst_pvrvideosink_xwindow_destroy (pvrvideosink,
               pvrvideosink->xwindow);
           pvrvideosink->xwindow = NULL;
-          g_mutex_lock (pvrvideosink->x_lock);
+          g_mutex_lock (pvrvideosink->dcontext->x_lock);
         }
         break;
       }
@@ -232,7 +232,7 @@ gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
     }
   }
 
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
   g_mutex_unlock (pvrvideosink->flow_lock);
 }
 
@@ -293,6 +293,7 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
 
   dcontext = g_new0 (GstDrawContext, 1);
   dcontext->p_blt_info = 0;
+  dcontext->x_lock = g_mutex_new ();
 
   dcontext->p_blt_info = g_new0 (PVR2D_3DBLT_EXT, 1);
   if (!dcontext->p_blt_info) {
@@ -405,7 +406,7 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
   xwindow->height = height;
   xwindow->internal = TRUE;
 
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
   root = DefaultRootWindow (dcontext->x_display);
   xwindow->window = XCreateSimpleWindow (dcontext->x_display, root, 0, 0,
@@ -434,7 +435,7 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
   xwindow->gc = XCreateGC (pvrvideosink->dcontext->x_display,
       xwindow->window, 0, &values);
 
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
   glerror =
       dcontext->wsegl_table->pfnWSEGL_CreateWindowDrawable (dcontext->
@@ -496,7 +497,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     goto done;
   }
 
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
   /* Draw borders when displaying the first frame. After this
      draw borders only on expose event or after a size change. */
@@ -607,7 +608,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
         result);
     pvrvideosink->redraw_borders = FALSE;
   }
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
 done:
   GST_DEBUG_OBJECT (pvrvideosink, "end");
@@ -1181,7 +1182,7 @@ gst_pvrvideosink_xwindow_destroy (GstPVRVideoSink * pvrvideosink,
 {
   g_return_if_fail (xwindow != NULL);
 
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
   /* If we did not create that window we just free the GC and let it live */
   if (xwindow->internal)
@@ -1193,7 +1194,7 @@ gst_pvrvideosink_xwindow_destroy (GstPVRVideoSink * pvrvideosink,
 
   XSync (pvrvideosink->dcontext->x_display, FALSE);
 
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
   g_free (xwindow);
 }
@@ -1248,7 +1249,7 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
     xwindow->window = xwindow_id;
 
     /* Set the event we want to receive and create a GC */
-    g_mutex_lock (pvrvideosink->x_lock);
+    g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
     XGetWindowAttributes (pvrvideosink->dcontext->x_display, xwindow->window,
         &attr);
@@ -1270,7 +1271,7 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
     XMapWindow (pvrvideosink->dcontext->x_display, xwindow->window);
     xwindow->gc = XCreateGC (pvrvideosink->dcontext->x_display,
         xwindow->window, 0, NULL);
-    g_mutex_unlock (pvrvideosink->x_lock);
+    g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
     glerror =
         pvrvideosink->dcontext->
@@ -1321,12 +1322,12 @@ gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
     return;
   }
 
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
   XSelectInput (pvrvideosink->dcontext->x_display,
       pvrvideosink->xwindow->window, ExposureMask | StructureNotifyMask);
 
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
   g_mutex_unlock (pvrvideosink->flow_lock);
 }
@@ -1426,9 +1427,10 @@ gst_pvrvideosink_dcontext_clear (GstPVRVideoSink * pvrvideosink)
   if (dcontext->p_blt_info)
     g_free (dcontext->p_blt_info);
 
-  g_mutex_lock (pvrvideosink->x_lock);
+  g_mutex_lock (dcontext->x_lock);
   XCloseDisplay (dcontext->x_display);
-  g_mutex_unlock (pvrvideosink->x_lock);
+  g_mutex_unlock (dcontext->x_lock);
+  g_mutex_free (dcontext->x_lock);
 
   g_free (dcontext);
 }
@@ -1485,10 +1487,6 @@ gst_pvrvideosink_finalize (GObject * object)
 
   gst_pvrvideosink_reset (pvrvideosink);
 
-  if (pvrvideosink->x_lock) {
-    g_mutex_free (pvrvideosink->x_lock);
-    pvrvideosink->x_lock = NULL;
-  }
   if (pvrvideosink->flow_lock) {
     g_mutex_free (pvrvideosink->flow_lock);
     pvrvideosink->flow_lock = NULL;
@@ -1510,7 +1508,6 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->fps_d = 1;
 
   pvrvideosink->flow_lock = g_mutex_new ();
-  pvrvideosink->x_lock = g_mutex_new ();
   pvrvideosink->pool_lock = g_mutex_new ();
   pvrvideosink->buffer_pool = NULL;
   pvrvideosink->pool_invalid = TRUE;
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 2fc52cc..3092690 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -76,6 +76,7 @@ struct _GstDrawContext
   WSEGLDrawableHandle drawable_handle;
   WSEGLRotationAngle rotation;
 
+  GMutex *x_lock;
   Display *x_display;
   gint screen_num;
   gulong black;
@@ -123,7 +124,6 @@ struct _GstPVRVideoSink
   GMutex *flow_lock;
 
   GMutex *pool_lock;
-  GMutex *x_lock;
   GstPvrBufferPool *buffer_pool;
   gboolean pool_invalid;
   gint num_buffers;
-- 
1.7.5.4

