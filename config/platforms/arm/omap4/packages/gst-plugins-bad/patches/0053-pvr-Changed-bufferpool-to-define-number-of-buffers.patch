From 641bcf611466ee84b63127124e29a65adff41ce6 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Wed, 31 Aug 2011 23:50:23 -0300
Subject: [PATCH 053/154] pvr: Changed bufferpool to define number of buffers

Buffer pool now is created with the number of buffers it should contain.
The element pvrvideosink queries the minimum number of buffers required
in the buffer pool.
---
 sys/pvr2d/Makefile.am           |    4 +-
 sys/pvr2d/gstducatibufferpool.c |  239 -----------------------------------
 sys/pvr2d/gstducatibufferpool.h |   73 -----------
 sys/pvr2d/gstpvrbufferpool.c    |  264 +++++++++++++++++++++++++++++++++++++++
 sys/pvr2d/gstpvrbufferpool.h    |   84 ++++++++++++
 sys/pvr2d/gstpvrvideosink.c     |  122 ++++++++++++++----
 sys/pvr2d/gstpvrvideosink.h     |    9 +-
 7 files changed, 451 insertions(+), 344 deletions(-)
 delete mode 100644 sys/pvr2d/gstducatibufferpool.c
 delete mode 100644 sys/pvr2d/gstducatibufferpool.h
 create mode 100644 sys/pvr2d/gstpvrbufferpool.c
 create mode 100644 sys/pvr2d/gstpvrbufferpool.h

diff --git a/sys/pvr2d/Makefile.am b/sys/pvr2d/Makefile.am
index 587d985..62218db 100644
--- a/sys/pvr2d/Makefile.am
+++ b/sys/pvr2d/Makefile.am
@@ -2,7 +2,7 @@ plugin_LTLIBRARIES = libgstpvr.la
 
 libgstpvr_la_SOURCES = \
 	gstducati.c \
-	gstducatibufferpool.c \
+	gstpvrbufferpool.c \
 	gstpvrvideosink.c
 
 libgstpvr_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) $(GST_CFLAGS) $(PVR_CFLAGS)
@@ -18,5 +18,5 @@ libgstpvr_la_LIBTOOLFLAGS = --tag=disable-static
 
 noinst_HEADERS = \
 	gstducati.h \
-	gstducatibufferpool.h \
+	gstpvrbufferpool.h \
 	gstpvrvideosink.h
diff --git a/sys/pvr2d/gstducatibufferpool.c b/sys/pvr2d/gstducatibufferpool.c
deleted file mode 100644
index cfe640a..0000000
--- a/sys/pvr2d/gstducatibufferpool.c
+++ /dev/null
@@ -1,239 +0,0 @@
-/*
- * GStreamer
- * Copyright (c) 2010, Texas Instruments Incorporated
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation
- * version 2.1 of the License.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
-
-#include "gstducatibufferpool.h"
-
-/*
- * GstDucatiBuffer
- */
-
-static GstBufferClass *buffer_parent_class;
-
-/* Get the original buffer, or whatever is the best output buffer.
- * Consumes the input reference, produces the output reference
- */
-GstBuffer *
-gst_ducati_buffer_get (GstDucatiBuffer * self)
-{
-  if (self->orig) {
-    // TODO copy to orig buffer.. if needed.
-    gst_buffer_unref (self->orig);
-    self->orig = NULL;
-  }
-  return GST_BUFFER (self);
-}
-
-static GstDucatiBuffer *
-gst_ducati_buffer_new (GstDucatiBufferPool * pool)
-{
-  GstDucatiBuffer *self = (GstDucatiBuffer *)
-      gst_mini_object_new (GST_TYPE_DUCATIBUFFER);
-  guint sz;
-
-  GST_LOG_OBJECT (pool->element, "creating buffer %p in pool %p", self, pool);
-
-  self->pool = (GstDucatiBufferPool *)
-      gst_mini_object_ref (GST_MINI_OBJECT (pool));
-
-  GST_BUFFER_DATA (self) =
-      gst_ducati_alloc_2d (pool->padded_width, pool->padded_height, &sz);
-  GST_BUFFER_SIZE (self) = sz;
-
-  gst_buffer_set_caps (GST_BUFFER (self), pool->caps);
-
-  return self;
-}
-
-static void
-gst_ducati_buffer_finalize (GstDucatiBuffer * self)
-{
-  GstDucatiBufferPool *pool = self->pool;
-  gboolean resuscitated = FALSE;
-
-  GST_LOG_OBJECT (pool->element, "finalizing buffer %p", self);
-
-  GST_DUCATI_BUFFERPOOL_LOCK (pool);
-  if (pool->running) {
-    resuscitated = TRUE;
-
-    GST_LOG_OBJECT (pool->element, "reviving buffer %p", self);
-    gst_buffer_ref (GST_BUFFER (self));
-
-    /* insert self into freelist */
-    self->next = pool->freelist;
-    pool->freelist = self;
-  } else {
-    GST_LOG_OBJECT (pool->element, "the pool is shutting down");
-  }
-  GST_DUCATI_BUFFERPOOL_UNLOCK (pool);
-
-  if (!resuscitated) {
-    GST_LOG_OBJECT (pool->element,
-        "buffer %p (data %p, len %u) not recovered, freeing",
-        self, GST_BUFFER_DATA (self), GST_BUFFER_SIZE (self));
-    MemMgr_Free ((void *) GST_BUFFER_DATA (self));
-    GST_BUFFER_DATA (self) = NULL;
-    gst_mini_object_unref (GST_MINI_OBJECT (pool));
-    GST_MINI_OBJECT_CLASS (buffer_parent_class)->finalize (GST_MINI_OBJECT
-        (self));
-  }
-}
-
-static void
-gst_ducati_buffer_class_init (gpointer g_class, gpointer class_data)
-{
-  GstMiniObjectClass *mini_object_class = GST_MINI_OBJECT_CLASS (g_class);
-
-  buffer_parent_class = g_type_class_peek_parent (g_class);
-
-  mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
-      GST_DEBUG_FUNCPTR (gst_ducati_buffer_finalize);
-}
-
-GType
-gst_ducati_buffer_get_type (void)
-{
-  static GType type;
-
-  if (G_UNLIKELY (type == 0)) {
-    static const GTypeInfo info = {
-      .class_size = sizeof (GstBufferClass),
-      .class_init = gst_ducati_buffer_class_init,
-      .instance_size = sizeof (GstDucatiBuffer),
-    };
-    type = g_type_register_static (GST_TYPE_BUFFER,
-        "GstDucatiBuffer", &info, 0);
-  }
-  return type;
-}
-
-/*
- * GstDucatiBufferPool
- */
-
-static GstMiniObjectClass *bufferpool_parent_class = NULL;
-
-/** create new bufferpool */
-GstDucatiBufferPool *
-gst_ducati_bufferpool_new (GstElement * element, GstCaps * caps)
-{
-  GstDucatiBufferPool *self = (GstDucatiBufferPool *)
-      gst_mini_object_new (GST_TYPE_DUCATIBUFFERPOOL);
-  GstStructure *s = gst_caps_get_structure (caps, 0);
-
-  self->element = gst_object_ref (element);
-  gst_structure_get_int (s, "width", &self->padded_width);
-  gst_structure_get_int (s, "height", &self->padded_height);
-  self->caps = gst_caps_ref (caps);
-  self->freelist = NULL;
-  self->lock = g_mutex_new ();
-  self->running = TRUE;
-
-  return self;
-}
-
-/** destroy existing bufferpool */
-void
-gst_ducati_bufferpool_destroy (GstDucatiBufferPool * self)
-{
-  g_return_if_fail (self);
-
-  GST_DUCATI_BUFFERPOOL_LOCK (self);
-  self->running = FALSE;
-  GST_DUCATI_BUFFERPOOL_UNLOCK (self);
-
-  GST_DEBUG_OBJECT (self->element, "destroy pool");
-
-  /* free all buffers on the freelist */
-  while (self->freelist) {
-    GstDucatiBuffer *buf = self->freelist;
-    self->freelist = buf->next;
-    gst_buffer_unref (GST_BUFFER (buf));
-  }
-
-  gst_mini_object_unref (GST_MINI_OBJECT (self));
-}
-
-/** get buffer from bufferpool, allocate new buffer if needed */
-GstDucatiBuffer *
-gst_ducati_bufferpool_get (GstDucatiBufferPool * self, GstBuffer * orig)
-{
-  GstDucatiBuffer *buf = NULL;
-
-  g_return_val_if_fail (self, NULL);
-
-  GST_DUCATI_BUFFERPOOL_LOCK (self);
-  if (self->running) {
-    /* re-use a buffer off the freelist if any are available
-     */
-    if (self->freelist) {
-      buf = self->freelist;
-      self->freelist = buf->next;
-    } else {
-      buf = gst_ducati_buffer_new (self);
-    }
-    buf->orig = orig;
-  }
-  GST_DUCATI_BUFFERPOOL_UNLOCK (self);
-
-  if (buf && orig) {
-    GST_BUFFER_TIMESTAMP (buf) = GST_BUFFER_TIMESTAMP (orig);
-    GST_BUFFER_DURATION (buf) = GST_BUFFER_DURATION (orig);
-  }
-
-  return buf;
-}
-
-static void
-gst_ducati_bufferpool_finalize (GstDucatiBufferPool * self)
-{
-  g_mutex_free (self->lock);
-  gst_caps_unref (self->caps);
-  gst_object_unref (self->element);
-  GST_MINI_OBJECT_CLASS (bufferpool_parent_class)->finalize (GST_MINI_OBJECT
-      (self));
-}
-
-static void
-gst_ducati_bufferpool_class_init (gpointer g_class, gpointer class_data)
-{
-  GstMiniObjectClass *mini_object_class = GST_MINI_OBJECT_CLASS (g_class);
-
-  bufferpool_parent_class = g_type_class_peek_parent (g_class);
-
-  mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
-      GST_DEBUG_FUNCPTR (gst_ducati_bufferpool_finalize);
-}
-
-GType
-gst_ducati_bufferpool_get_type (void)
-{
-  static GType type;
-
-  if (G_UNLIKELY (type == 0)) {
-    static const GTypeInfo info = {
-      .class_size = sizeof (GstMiniObjectClass),
-      .class_init = gst_ducati_bufferpool_class_init,
-      .instance_size = sizeof (GstDucatiBufferPool),
-    };
-    type = g_type_register_static (GST_TYPE_MINI_OBJECT,
-        "GstDucatiBufferPool", &info, 0);
-  }
-  return type;
-}
diff --git a/sys/pvr2d/gstducatibufferpool.h b/sys/pvr2d/gstducatibufferpool.h
deleted file mode 100644
index cbf48e9..0000000
--- a/sys/pvr2d/gstducatibufferpool.h
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * GStreamer
- * Copyright (c) 2010, Texas Instruments Incorporated
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation
- * version 2.1 of the License.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
-
-#ifndef __GSTDUCATIBUFFERPOOL_H__
-#define __GSTDUCATIBUFFERPOOL_H__
-
-#include "gstducati.h"
-
-G_BEGIN_DECLS
-
-GType gst_ducati_buffer_get_type (void);
-#define GST_TYPE_DUCATIBUFFER (gst_ducati_buffer_get_type())
-#define GST_IS_DUCATIBUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_DUCATIBUFFER))
-#define GST_DUCATIBUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_DUCATIBUFFER, GstDucatiBuffer))
-
-GType gst_ducati_bufferpool_get_type (void);
-#define GST_TYPE_DUCATIBUFFERPOOL (gst_ducati_bufferpool_get_type())
-#define GST_IS_DUCATIBUFFERPOOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_DUCATIBUFFERPOOL))
-#define GST_DUCATIBUFFERPOOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_DUCATIBUFFERPOOL, GstDucatiBufferPool))
-
-typedef struct _GstDucatiBufferPool GstDucatiBufferPool;
-typedef struct _GstDucatiBuffer GstDucatiBuffer;
-
-struct _GstDucatiBufferPool
-{
-  GstMiniObject parent;
-
-  /* output (padded) size including any codec padding: */
-  gint padded_width, padded_height;
-
-  GstCaps         *caps;
-  GMutex          *lock;
-  gboolean         running;  /* with lock */
-  GstElement      *element;  /* the element that owns us.. */
-  GstDucatiBuffer *freelist; /* list of available buffers */
-};
-
-GstDucatiBufferPool * gst_ducati_bufferpool_new (GstElement * element, GstCaps * caps);
-void gst_ducati_bufferpool_destroy (GstDucatiBufferPool * pool);
-GstDucatiBuffer * gst_ducati_bufferpool_get (GstDucatiBufferPool * self, GstBuffer * orig);
-
-#define GST_DUCATI_BUFFERPOOL_LOCK(self)     g_mutex_lock ((self)->lock)
-#define GST_DUCATI_BUFFERPOOL_UNLOCK(self)   g_mutex_unlock ((self)->lock)
-
-struct _GstDucatiBuffer {
-  GstBuffer parent;
-
-  GstDucatiBufferPool *pool; /* buffer-pool that this buffer belongs to */
-  GstBuffer       *orig;     /* original buffer, if we need to copy output */
-  GstDucatiBuffer *next;     /* next in freelist, if not in use */
-};
-
-GstBuffer * gst_ducati_buffer_get (GstDucatiBuffer * self);
-
-G_END_DECLS
-
-#endif /* __GSTDUCATIBUFFERPOOL_H__ */
diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
new file mode 100644
index 0000000..badab3e
--- /dev/null
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -0,0 +1,264 @@
+/*
+ * GStreamer
+ * Copyright (c) 2010, Texas Instruments Incorporated
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include "gstpvrbufferpool.h"
+
+/*
+ * GstDucatiBuffer
+ */
+
+static GstBufferClass *buffer_parent_class;
+
+/* Get the original buffer, or whatever is the best output buffer.
+ * Consumes the input reference, produces the output reference
+ */
+GstBuffer *
+gst_ducati_buffer_get (GstDucatiBuffer * self)
+{
+  if (self->orig) {
+    // TODO copy to orig buffer.. if needed.
+    gst_buffer_unref (self->orig);
+    self->orig = NULL;
+  }
+  return GST_BUFFER (self);
+}
+
+static GstDucatiBuffer *
+gst_ducati_buffer_new (GstPvrBufferPool * pool)
+{
+  GstDucatiBuffer *self = (GstDucatiBuffer *)
+      gst_mini_object_new (GST_TYPE_DUCATIBUFFER);
+  guint sz;
+
+  GST_LOG_OBJECT (pool->element, "creating buffer %p in pool %p", self, pool);
+
+  self->pool = (GstPvrBufferPool *)
+      gst_mini_object_ref (GST_MINI_OBJECT (pool));
+
+  GST_BUFFER_DATA (self) =
+      gst_ducati_alloc_2d (pool->padded_width, pool->padded_height, &sz);
+  GST_BUFFER_SIZE (self) = sz;
+
+  gst_buffer_set_caps (GST_BUFFER (self), pool->caps);
+
+  return self;
+}
+
+
+static void
+gst_ducati_buffer_finalize (GstDucatiBuffer * self)
+{
+  GstPvrBufferPool *pool = self->pool;
+  gboolean resuscitated = FALSE;
+
+  GST_LOG_OBJECT (pool->element, "finalizing buffer %p", self);
+
+  GST_PVR_BUFFERPOOL_LOCK (pool);
+  if (pool->running) {
+    resuscitated = TRUE;
+
+    GST_LOG_OBJECT (pool->element, "reviving buffer %p", self);
+
+    g_async_queue_push (pool->avail_buffers, self);
+  } else {
+    GST_LOG_OBJECT (pool->element, "the pool is shutting down");
+  }
+  GST_PVR_BUFFERPOOL_UNLOCK (pool);
+
+  if (!resuscitated) {
+    GST_LOG_OBJECT (pool->element,
+        "buffer %p (data %p, len %u) not recovered, freeing",
+        self, GST_BUFFER_DATA (self), GST_BUFFER_SIZE (self));
+    MemMgr_Free ((void *) GST_BUFFER_DATA (self));
+    GST_BUFFER_DATA (self) = NULL;
+    gst_mini_object_unref (GST_MINI_OBJECT (pool));
+    GST_MINI_OBJECT_CLASS (buffer_parent_class)->finalize (GST_MINI_OBJECT
+        (self));
+  }
+}
+
+static void
+gst_ducati_buffer_class_init (gpointer g_class, gpointer class_data)
+{
+  GstMiniObjectClass *mini_object_class = GST_MINI_OBJECT_CLASS (g_class);
+
+  buffer_parent_class = g_type_class_peek_parent (g_class);
+
+  mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
+      GST_DEBUG_FUNCPTR (gst_ducati_buffer_finalize);
+}
+
+GType
+gst_ducati_buffer_get_type (void)
+{
+  static GType type;
+
+  if (G_UNLIKELY (type == 0)) {
+    static const GTypeInfo info = {
+      .class_size = sizeof (GstBufferClass),
+      .class_init = gst_ducati_buffer_class_init,
+      .instance_size = sizeof (GstDucatiBuffer),
+    };
+    type = g_type_register_static (GST_TYPE_BUFFER,
+        "GstDucatiBuffer", &info, 0);
+  }
+  return type;
+}
+
+/*
+ * GstDucatiBufferPool
+ */
+
+static GstMiniObjectClass *bufferpool_parent_class = NULL;
+
+/** create new bufferpool
+ * @element : the element that owns this pool
+ * @caps:  the caps to set on the buffer
+ * @num_buffers:  the requested number of buffers in the pool
+ */
+GstPvrBufferPool *
+gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers)
+{
+  gint i;
+  GstPvrBufferPool *self = (GstPvrBufferPool *)
+      gst_mini_object_new (GST_TYPE_PVRBUFFERPOOL);
+  GstStructure *s = gst_caps_get_structure (caps, 0);
+
+  self->element = gst_object_ref (element);
+  gst_structure_get_int (s, "width", &self->padded_width);
+  gst_structure_get_int (s, "height", &self->padded_height);
+  self->caps = gst_caps_ref (caps);
+
+  self->buffers = g_new0 (GstDucatiBuffer *, num_buffers);
+  self->avail_buffers = g_async_queue_new ();
+  self->buffer_count = num_buffers;
+  self->lock = g_mutex_new ();
+  self->running = TRUE;
+
+  /* now, map the buffers */
+  for (i = 0; i < num_buffers; i++) {
+    self->buffers[i] = gst_ducati_buffer_new (self);
+    self->num_live_buffers++;
+    g_async_queue_push (self->avail_buffers, self->buffers[i]);
+  }
+
+  return self;
+}
+
+/** destroy existing bufferpool */
+void
+gst_pvr_bufferpool_destroy (GstPvrBufferPool * self)
+{
+  gint i;
+
+  g_return_if_fail (self);
+
+  GST_PVR_BUFFERPOOL_LOCK (self);
+  self->running = FALSE;
+  GST_PVR_BUFFERPOOL_UNLOCK (self);
+
+  GST_DEBUG_OBJECT (self->element, "destroy pool");
+
+  /* free all buffers on the freelist */
+  for (i = 0; i < self->buffer_count; i++) {
+    GstDucatiBuffer *buf;
+    GST_PVR_BUFFERPOOL_LOCK (self);
+    buf = self->buffers[i];
+    GST_PVR_BUFFERPOOL_UNLOCK (self);
+    if (buf)
+      gst_buffer_unref (GST_BUFFER (buf));
+  }
+
+  gst_mini_object_unref (GST_MINI_OBJECT (self));
+}
+
+/** get buffer from bufferpool, allocate new buffer if needed */
+GstDucatiBuffer *
+gst_pvr_bufferpool_get (GstPvrBufferPool * self, GstBuffer * orig)
+{
+  GstDucatiBuffer *buf = NULL;
+
+  g_return_val_if_fail (self, NULL);
+
+  GST_PVR_BUFFERPOOL_LOCK (self);
+  if (self->running) {
+    /* re-use a buffer off the freelist if any are available
+     */
+    buf = g_async_queue_try_pop (self->avail_buffers);
+    if (!buf)
+      buf = gst_ducati_buffer_new (self);
+    buf->orig = orig;
+  }
+  GST_PVR_BUFFERPOOL_UNLOCK (self);
+
+  if (buf && orig) {
+    GST_BUFFER_TIMESTAMP (buf) = GST_BUFFER_TIMESTAMP (orig);
+    GST_BUFFER_DURATION (buf) = GST_BUFFER_DURATION (orig);
+  }
+
+  return buf;
+}
+
+static void
+gst_pvr_bufferpool_finalize (GstPvrBufferPool * self)
+{
+  g_mutex_free (self->lock);
+  self->lock = NULL;
+
+  g_async_queue_unref (self->avail_buffers);
+  self->avail_buffers = NULL;
+
+  if (self->buffers) {
+    g_free (self->buffers);
+    self->buffers = NULL;
+  }
+
+  gst_caps_unref (self->caps);
+  gst_object_unref (self->element);
+  GST_MINI_OBJECT_CLASS (bufferpool_parent_class)->finalize (GST_MINI_OBJECT
+      (self));
+}
+
+static void
+gst_pvr_bufferpool_class_init (gpointer g_class, gpointer class_data)
+{
+  GstMiniObjectClass *mini_object_class = GST_MINI_OBJECT_CLASS (g_class);
+
+  bufferpool_parent_class = g_type_class_peek_parent (g_class);
+
+  mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
+      GST_DEBUG_FUNCPTR (gst_pvr_bufferpool_finalize);
+}
+
+GType
+gst_pvr_bufferpool_get_type (void)
+{
+  static GType type;
+
+  if (G_UNLIKELY (type == 0)) {
+    static const GTypeInfo info = {
+      .class_size = sizeof (GstMiniObjectClass),
+      .class_init = gst_pvr_bufferpool_class_init,
+      .instance_size = sizeof (GstPvrBufferPool),
+    };
+    type = g_type_register_static (GST_TYPE_MINI_OBJECT,
+        "GstPvrBufferPool", &info, 0);
+  }
+  return type;
+}
diff --git a/sys/pvr2d/gstpvrbufferpool.h b/sys/pvr2d/gstpvrbufferpool.h
new file mode 100644
index 0000000..f38f05e
--- /dev/null
+++ b/sys/pvr2d/gstpvrbufferpool.h
@@ -0,0 +1,84 @@
+/*
+ * GStreamer
+ * Copyright (c) 2010, 2011 Texas Instruments Incorporated
+ * Copyright (c) 2011, Collabora Ltda
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifndef __GSTPVRBUFFERPOOL_H__
+#define __GSTPVRBUFFERPOOL_H__
+
+#include "gstducati.h"
+
+G_BEGIN_DECLS
+
+GType gst_ducati_buffer_get_type (void);
+#define GST_TYPE_DUCATIBUFFER (gst_ducati_buffer_get_type())
+#define GST_IS_DUCATIBUFFER(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_DUCATIBUFFER))
+#define GST_DUCATIBUFFER(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_DUCATIBUFFER, GstDucatiBuffer))
+
+GType gst_pvr_bufferpool_get_type (void);
+#define GST_TYPE_PVRBUFFERPOOL (gst_pvr_bufferpool_get_type())
+#define GST_IS_PVRBUFFERPOOL(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PVRBUFFERPOOL))
+#define GST_PVRBUFFERPOOL(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PVRBUFFERPOOL, \
+                               GstPvrBufferPool))
+
+typedef struct _GstPvrBufferPool GstPvrBufferPool;
+typedef struct _GstDucatiBuffer GstDucatiBuffer;
+
+struct _GstPvrBufferPool
+{
+  GstMiniObject parent;
+
+  /* output (padded) size including any codec padding: */
+  gint padded_width, padded_height;
+
+  GstCaps *caps;
+  GMutex *lock;
+  gboolean running;  /* with lock */
+  GstElement *element;  /* the element that owns us.. */
+  GstDucatiBuffer **buffers;
+  GAsyncQueue *avail_buffers; /* list of available buffers */
+  gint num_live_buffers;
+  guint buffer_count;
+};
+
+GstPvrBufferPool * gst_pvr_bufferpool_new (GstElement * element,
+    GstCaps * caps, gint num_buffers);
+void gst_pvr_bufferpool_destroy (GstPvrBufferPool * pool);
+GstDucatiBuffer * gst_pvr_bufferpool_get (GstPvrBufferPool * self,
+    GstBuffer * orig);
+
+#define GST_PVR_BUFFERPOOL_LOCK(self)     g_mutex_lock ((self)->lock)
+#define GST_PVR_BUFFERPOOL_UNLOCK(self)   g_mutex_unlock ((self)->lock)
+
+struct _GstDucatiBuffer {
+  GstBuffer parent;
+
+  GstPvrBufferPool *pool; /* buffer-pool that this buffer belongs to */
+  GstBuffer       *orig;     /* original buffer, if we need to copy output */
+  GstDucatiBuffer *next;     /* next in freelist, if not in use */
+};
+
+GstBuffer * gst_ducati_buffer_get (GstDucatiBuffer * self);
+
+G_END_DECLS
+
+#endif /* __GSTPVRBUFFERPOOL_H__ */
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 56b41b5..fb66278 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -23,13 +23,16 @@
 /* Object header */
 #include "gstpvrvideosink.h"
 
-#include "gstducatibufferpool.h"
+#include "gstpvrbufferpool.h"
 #include <gst/video/gstvideosink.h>
 #include <gst/interfaces/xoverlay.h>
 
 /* Debugging category */
 #include <gst/gstinfo.h>
 
+#define DEFAULT_QUEUE_SIZE 12
+#define DEFAULT_MIN_QUEUED_BUFS 1
+
 GST_DEBUG_CATEGORY_EXTERN (gst_debug_pvrvideosink);
 
 static void gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink);
@@ -40,7 +43,7 @@ static GstStaticPadTemplate gst_pvrvideosink_sink_template_factory =
 GST_STATIC_PAD_TEMPLATE ("sink",
     GST_PAD_SINK,
     GST_PAD_ALWAYS,
-    GST_STATIC_CAPS ("video/x-raw-yuv-strided, "
+    GST_STATIC_CAPS ("video/x-raw-yuv, "
         "framerate = (fraction) [ 0, MAX ], "
         "width = (int) [ 1, MAX ], " "height = (int) [ 1, MAX ]")
     );
@@ -80,16 +83,12 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   GstStructure *structure;
   gint new_width, new_height;
   const GValue *fps;
+  GstQuery *query;
 
   pvrvideosink = GST_PVRVIDEOSINK (bsink);
 
   GST_DEBUG_OBJECT (pvrvideosink,
-      "sinkconnect possible caps %" GST_PTR_FORMAT " with given caps %"
-      GST_PTR_FORMAT, pvrvideosink->caps, caps);
-
-  /* We intersect those caps with our template to make sure they are correct */
-  if (!gst_caps_can_intersect (pvrvideosink->caps, caps))
-    goto incompatible_caps;
+      "sinkconnect possible caps with given caps %", caps);
 
   structure = gst_caps_get_structure (caps, 0);
 
@@ -102,17 +101,74 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
     return FALSE;
   }
 
+  if (pvrvideosink->current_caps) {
+    GST_DEBUG_OBJECT (pvrvideosink, "already have caps set");
+    if (gst_caps_is_equal (pvrvideosink->current_caps, caps)) {
+      GST_DEBUG_OBJECT (pvrvideosink, "caps are equal!");
+      return TRUE;
+    }
+    GST_DEBUG_OBJECT (pvrvideosink, "caps are different");
+  }
+
+  if (pvrvideosink->buffer_pool) {
+    /* TODO: change caps of the buffer_pool */
+    GST_DEBUG_OBJECT (pvrvideosink, "changing caps not supported");
+    return FALSE;
+  }
+
+  /* query to find if anyone upstream using these buffers has any
+   * minimum requirements:
+   */
+  query = gst_query_new_buffers (caps);
+  if (gst_element_query (GST_ELEMENT (pvrvideosink), query)) {
+    gint min_buffers;
+
+    gst_query_parse_buffers_count (query, &min_buffers);
+
+    GST_DEBUG_OBJECT (pvrvideosink, "min_buffers=%d", min_buffers);
+
+    /* XXX need to account for some buffers used by queue, etc.. probably
+     * queue should handle query, pass on to sink pad, and then add some
+     * number of buffers to the min, so this value is dynamic depending
+     * on the pipeline?
+     */
+    if (min_buffers != -1) {
+      min_buffers += 3 + pvrvideosink->min_queued_bufs;
+      pvrvideosink->num_buffers_can_change = FALSE;
+    }
+
+    if (min_buffers > pvrvideosink->num_buffers) {
+      pvrvideosink->num_buffers = min_buffers;
+    }
+#if 0
+    gst_query_parse_buffers_dimensions (query, &min_width, &min_height);
+    if (min_width > w) {
+      pvrvideosink->crop.width = w;
+      pvrvideosink->crop_fields_set |= RECT_WIDTH_SET;
+      w = min_width;
+    }
+    if (min_height > h) {
+      pvrvideosink->crop.height = h;
+      pvrvideosink->crop_fields_set |= RECT_HEIGHT_SET;
+      h = min_height;
+    }
+
+    /* clear top/left crop values.. otherwise by default display will try
+     * to center, rather than scale, the image if it is too big to fit on
+     * display
+     */
+    pvrvideosink->crop.top = v4l2sink->crop.left = 0;
+    pvrvideosink->crop_fields_set |= RECT_TOP_SET | RECT_LEFT_SET;
+#endif
+  }
+  gst_query_unref (query);
+
   pvrvideosink->fps_n = gst_value_get_fraction_numerator (fps);
   pvrvideosink->fps_d = gst_value_get_fraction_denominator (fps);
 
-  return TRUE;
+  pvrvideosink->current_caps = gst_caps_ref (caps);
 
-  /* ERRORS */
-incompatible_caps:
-  {
-    GST_ERROR_OBJECT (pvrvideosink, "caps incompatible");
-    return FALSE;
-  }
+  return TRUE;
 }
 
 static GstCaps *
@@ -123,9 +179,6 @@ gst_pvrvideosink_getcaps (GstBaseSink * bsink)
 
   pvrvideosink = GST_PVRVIDEOSINK (bsink);
 
-  if (pvrvideosink->caps)
-    return gst_caps_ref (pvrvideosink->caps);
-
   caps = gst_caps_copy (gst_pad_get_pad_template_caps (GST_BASE_SINK
           (pvrvideosink)->sinkpad));
   return caps;
@@ -192,7 +245,7 @@ gst_pvrvideosink_get_times (GstBaseSink * bsink, GstBuffer * buf,
 }
 
 static GstFlowReturn
-gst_pvrvideosink_show_frame (GstVideoSink * vsink, GstBuffer * buf)
+gst_pvrvideosink_show_frame (GstBaseSink * vsink, GstBuffer * buf)
 {
   GstPVRVideoSink *pvrvideosink;
   GstBuffer *newbuf = NULL;
@@ -250,9 +303,7 @@ gst_pvrvideosink_show_frame (GstVideoSink * vsink, GstBuffer * buf)
     buf = newbuf;
   }
 
-  if (!gst_ducati_bufferpool_get (pvrvideosink->buffer_pool, buf)) {
-    return GST_FLOW_ERROR;
-  }
+  /* TODO show frame */
 
   if (!newbuf) {
     gst_buffer_ref (buf);
@@ -285,6 +336,8 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
 
   pvrvideosink = GST_PVRVIDEOSINK (bsink);
 
+  GST_DEBUG_OBJECT (pvrvideosink, "begin");
+
   if (G_UNLIKELY (!caps)) {
     GST_WARNING_OBJECT (pvrvideosink,
         "have no caps, doing fallback allocation");
@@ -312,21 +365,32 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
 
   /* initialize the buffer pool if not initialized yet (first buffer): */
   if (G_UNLIKELY (!pvrvideosink->buffer_pool)) {
+    /* workaround for bug in omap_vout driver, when we ask for more
+     * than four buffers:
+     */
+    if (pvrvideosink->num_buffers_can_change && pvrvideosink->num_buffers > 4) {
+      pvrvideosink->num_buffers = 4;
+      GST_DEBUG_OBJECT (pvrvideosink,
+          "limiting to 4 buffers to work-around omap_vout driver bug");
+    }
 
     /* set_caps() might not be called yet.. so just to make sure: */
     if (!gst_pvrvideosink_setcaps (bsink, caps)) {
       return GST_FLOW_ERROR;
     }
 
+    GST_LOG_OBJECT (pvrvideosink, "Creating a buffer pool with %d buffers",
+        pvrvideosink->num_buffers);
+
     if (!(pvrvideosink->buffer_pool =
-            gst_ducati_bufferpool_new (GST_ELEMENT (pvrvideosink), caps))) {
+            gst_pvr_bufferpool_new (GST_ELEMENT (pvrvideosink),
+                caps, pvrvideosink->num_buffers))) {
       return GST_FLOW_ERROR;
     }
   }
-  pvrvideo = gst_ducati_bufferpool_get (pvrvideosink->buffer_pool, NULL);
+  pvrvideo = gst_pvr_bufferpool_get (pvrvideosink->buffer_pool, NULL);
 
   *buf = GST_BUFFER_CAST (pvrvideo);
-  g_message ("alloc buffer ok");
 
 beach:
   return ret;
@@ -448,7 +512,7 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
   GST_OBJECT_UNLOCK (pvrvideosink);
 
   if (pvrvideosink->buffer_pool) {
-    gst_ducati_bufferpool_destroy (pvrvideosink->buffer_pool);
+    gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
     pvrvideosink->buffer_pool = NULL;
   }
 }
@@ -487,6 +551,10 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->buffer_pool = NULL;
 
   pvrvideosink->keep_aspect = FALSE;
+  pvrvideosink->current_caps = NULL;
+  pvrvideosink->num_buffers = DEFAULT_QUEUE_SIZE;
+  pvrvideosink->num_buffers_can_change = TRUE;
+  pvrvideosink->min_queued_bufs = DEFAULT_MIN_QUEUED_BUFS;
 }
 
 static void
@@ -536,7 +604,7 @@ gst_pvrvideosink_class_init (GstPVRVideoSinkClass * klass)
       GST_DEBUG_FUNCPTR (gst_pvrvideosink_buffer_alloc);
   gstbasesink_class->get_times = GST_DEBUG_FUNCPTR (gst_pvrvideosink_get_times);
 
-  videosink_class->show_frame = GST_DEBUG_FUNCPTR (gst_pvrvideosink_show_frame);
+  gstbasesink_class->render = GST_DEBUG_FUNCPTR (gst_pvrvideosink_show_frame);
 }
 
 /* ============================================================= */
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 73aa32d..3020e2f 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -24,7 +24,7 @@
 #define __GST_PVRVIDEOSINK_H__
 
 #include <gst/video/gstvideosink.h>
-#include "gstducatibufferpool.h"
+#include "gstpvrbufferpool.h"
 
 #include <string.h>
 #include <math.h>
@@ -78,11 +78,14 @@ struct _GstPVRVideoSink
   GMutex *flow_lock;
 
   GMutex *pool_lock;
-  GstDucatiBufferPool *buffer_pool;
+  GstPvrBufferPool *buffer_pool;
+  gint num_buffers;
+  gboolean num_buffers_can_change;
+  gint min_queued_bufs;
 
   gboolean keep_aspect;
 
-  GstCaps *caps;
+  GstCaps *current_caps;
 };
 
 struct _GstPVRVideoSinkClass
-- 
1.7.5.4

