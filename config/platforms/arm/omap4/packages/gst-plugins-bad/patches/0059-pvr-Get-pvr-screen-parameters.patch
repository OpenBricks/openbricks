From a7440ee1762ab4238b49b90bfb213b6dd7ac34c0 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Tue, 13 Sep 2011 00:32:14 -0300
Subject: [PATCH 059/154] pvr: Get pvr screen parameters

Get pvr screen parameters and use them to blit. Use CreateDeviceContext
with a valid id in order to be able to use GetScreenMode method.

If the resolution of the video is bigger than screen size, cut the size
to be rendered.
---
 sys/pvr2d/gstpvrvideosink.c |   85 ++++++++++++++++++++++++++-----------------
 sys/pvr2d/gstpvrvideosink.h |    5 +++
 2 files changed, 57 insertions(+), 33 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 445868d..688fb21 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -79,6 +79,7 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
   PVR2DERROR pvr_error;
   gint num_devices;
   PVR2DDEVICEINFO *p_dev_info;
+  gint refresh_rate;
 
   dcontext = g_new0 (GstDrawContext, 1);
 
@@ -94,7 +95,7 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
         "returned %d", pvr_error);
     return NULL;
   }
-  pvr_error = PVR2DCreateDeviceContext (0xffffffff,
+  pvr_error = PVR2DCreateDeviceContext (p_dev_info[0].ulDevID,
       &(dcontext->pvr_context), 0);
   switch (pvr_error) {
     case PVR2D_OK:
@@ -110,6 +111,14 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
       return NULL;
       break;
   }
+  pvr_error = PVR2DGetScreenMode (dcontext->pvr_context,
+      &dcontext->display_format, &dcontext->display_width,
+      &dcontext->display_height, &dcontext->stride, &refresh_rate);
+  if (pvr_error != PVR2D_OK) {
+    GST_ERROR_OBJECT (pvrvideosink, "Failed) to get screen mode"
+        "returned %d", pvr_error);
+    return NULL;
+  }
   return dcontext;
 }
 
@@ -146,6 +155,11 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
   xwindow->window_attributes.event_mask =
       ExposureMask | PointerMotionMask | KeyPressMask;
 
+  if (video_width > dcontext->display_width)
+    video_width = dcontext->display_width;
+  if (video_height > dcontext->display_height)
+    video_height = dcontext->display_height;
+
   xwindow->window = XCreateWindow (dcontext->x_display, root, 0, 0,
       video_width, video_height, 0, CopyFromParent, InputOutput,
       CopyFromParent, CWEventMask, &(xwindow->window_attributes));
@@ -202,7 +216,7 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
 static void
 gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
 {
-  PVR2DBLTINFO p_blt_info;
+  PPVR2DBLTINFO p_blt_info = 0;
   PVR2DERROR pvr_error;
   GstDrawContext *dcontext = pvrvideosink->dcontext;
   void *data;
@@ -235,37 +249,42 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     return;
   }
 
-  p_blt_info.pDstMemInfo = dcontext->dst_mem;
-  p_blt_info.DstOffset = 0;
-  p_blt_info.pSrcMemInfo = dcontext->src_mem;
-  p_blt_info.SrcOffset = 0;
-  p_blt_info.CopyCode = PVR2DROPcopy;
-  //p_blt_info.Color = 0;
-  //p_blt_info.ColorKey = 0;
-  p_blt_info.GlobalAlphaValue = 255;
-  p_blt_info.AlphaBlendingFunc = 255;
-  p_blt_info.BlitFlags = 0;
-  p_blt_info.DstStride = 4096;
-  p_blt_info.DstX = 0;
-  p_blt_info.DstY = 0;
-  p_blt_info.DSizeX = video_width;
-  p_blt_info.DSizeY = video_height;
-  p_blt_info.DstFormat = PVR2D_YUV422_UYVY;
-  p_blt_info.DstSurfWidth = video_width;
-  p_blt_info.DstSurfHeight = video_height;
-  p_blt_info.SrcStride = 4096;
-  p_blt_info.SrcX = 0;
-  p_blt_info.SrcY = 0;
-  p_blt_info.SizeX = video_width;
-  p_blt_info.SizeY = video_height;
-  p_blt_info.SrcFormat = 0;
-  p_blt_info.SrcSurfWidth = video_width;
-  p_blt_info.SrcSurfHeight = video_height;
-  p_blt_info.pPalMemInfo = NULL;
-
-
-
-  pvr_error = PVR2DBlt (pvrvideosink->dcontext->pvr_context, &p_blt_info);
+  p_blt_info = g_new0 (PVR2DBLTINFO, 1);
+  if (!p_blt_info) {
+    GST_ERROR_OBJECT (pvrvideosink, "Alloc of bltinfo failed");
+    return;
+  }
+  if (video_width > dcontext->display_width)
+    video_width = dcontext->display_width;
+  if (video_height > dcontext->display_height)
+    video_height = dcontext->display_height;
+  p_blt_info->CopyCode = PVR2DROPcopy;
+  p_blt_info->BlitFlags = PVR2D_BLIT_DISABLE_ALL;
+
+  p_blt_info->pDstMemInfo = dcontext->dst_mem;
+  //p_blt_info->DstOffset = 0;
+  p_blt_info->DstSurfWidth = dcontext->display_width;
+  p_blt_info->DstSurfHeight = dcontext->display_height;
+  p_blt_info->DstStride = dcontext->stride;
+  p_blt_info->DstFormat = dcontext->display_format;
+  p_blt_info->DSizeX = video_width;
+  p_blt_info->DSizeY = video_height;
+  p_blt_info->DstX = 0;
+  p_blt_info->DstY = 0;
+
+  p_blt_info->pSrcMemInfo = dcontext->src_mem;
+  //p_blt_info->SrcOffset = 0;
+  p_blt_info->SrcSurfWidth = video_width;
+  p_blt_info->SrcSurfHeight = video_height;
+  p_blt_info->SrcFormat = PVR2D_YUV422_YUYV;
+  p_blt_info->SrcFormat |= PVR2D_SURFACE_PDUMP; // Set flag to capture host writes to the pdump file
+  p_blt_info->SrcStride = 4096;
+  p_blt_info->SrcX = 0;
+  p_blt_info->SrcY = 0;
+  p_blt_info->SizeX = video_width;
+  p_blt_info->SizeY = video_height;
+
+  pvr_error = PVR2DBlt (pvrvideosink->dcontext->pvr_context, p_blt_info);
   switch (pvr_error) {
     case PVR2D_OK:
       break;
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 521abb0..a8a633e 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -59,6 +59,11 @@ struct _GstDrawContext
   PVR2DMEMINFO *dst_mem;
   PVR2DMEMINFO *src_mem;
 
+  long stride;
+  PVR2DFORMAT display_format;
+  long display_width;
+  long display_height;
+
   /* WSEGL */
   const WSEGL_FunctionTable *wsegl_table;
 
-- 
1.7.5.4

