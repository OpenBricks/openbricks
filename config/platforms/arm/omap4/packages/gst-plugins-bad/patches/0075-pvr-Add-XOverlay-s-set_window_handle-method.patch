From 8e9d57400ee377d54c5cb19e4a570ab049f1f760 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Fri, 16 Sep 2011 00:38:19 -0300
Subject: [PATCH 075/154] pvr: Add XOverlay's set_window_handle method

Allow setting a window handle instead of just creating an internal
window.
---
 sys/pvr2d/gstpvrvideosink.c |  176 ++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 166 insertions(+), 10 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 2a7c837..e823de3 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -214,6 +214,7 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
   xwindow->window_attributes.event_mask =
       ExposureMask | PointerMotionMask | KeyPressMask;
 
+  xwindow->internal = TRUE;
   pvrvideosink->render_rect.x = pvrvideosink->render_rect.y = 0;
   pvrvideosink->render_rect.w = width;
   pvrvideosink->render_rect.h = height;
@@ -260,16 +261,6 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
       &render_params);
   dcontext->dst_mem = (PVR2DMEMINFO *) render_params.hPrivateData;
 
-  dcontext->p_blt_info->pDstMemInfo = dcontext->dst_mem;
-  dcontext->p_blt_info->CopyCode = PVR2DROPcopy;
-  dcontext->p_blt_info->BlitFlags = PVR2D_BLIT_DISABLE_ALL;
-
-  dcontext->p_blt_info->DstSurfWidth = width;
-  dcontext->p_blt_info->DstSurfHeight = height;
-  dcontext->p_blt_info->DstStride =
-      gst_video_format_get_row_stride (GST_VIDEO_FORMAT_BGRx, 0, width);
-  dcontext->p_blt_info->DstFormat = PVR2D_ARGB8888;
-
   GST_DEBUG_OBJECT (pvrvideosink, "end");
   return xwindow;
 }
@@ -334,6 +325,15 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     pvrvideosink->current_buffer = gst_buffer_ref (buffer);
   }
 
+  dcontext->p_blt_info->pDstMemInfo = dcontext->dst_mem;
+  dcontext->p_blt_info->CopyCode = PVR2DROPcopy;
+  dcontext->p_blt_info->BlitFlags = PVR2D_BLIT_DISABLE_ALL;
+
+  dcontext->p_blt_info->DstSurfWidth = video_width;
+  dcontext->p_blt_info->DstSurfHeight = video_height;
+  dcontext->p_blt_info->DstStride =
+      gst_video_format_get_row_stride (GST_VIDEO_FORMAT_BGRx, 0, video_width);
+  dcontext->p_blt_info->DstFormat = PVR2D_ARGB8888;
   dcontext->p_blt_info->DSizeX = video_width;
   dcontext->p_blt_info->DSizeY = video_height;
   dcontext->p_blt_info->DstX = 0;
@@ -846,6 +846,137 @@ gst_pvrvideosink_interface_init (GstImplementsInterfaceClass * klass)
   klass->supported = gst_pvrvideosink_interface_supported;
 }
 
+/* This function destroys a GstXWindow */
+static void
+gst_pvrvideosink_xwindow_destroy (GstPVRVideoSink * pvrvideosink,
+    GstXWindow * xwindow)
+{
+  g_return_if_fail (xwindow != NULL);
+
+  g_mutex_lock (pvrvideosink->x_lock);
+
+  /* If we did not create that window we just free the GC and let it live */
+  if (xwindow->internal)
+    XDestroyWindow (pvrvideosink->dcontext->x_display, xwindow->window);
+  else
+    XSelectInput (pvrvideosink->dcontext->x_display, xwindow->window, 0);
+
+  XFreeGC (pvrvideosink->dcontext->x_display, xwindow->gc);
+
+  XSync (pvrvideosink->dcontext->x_display, FALSE);
+
+  g_mutex_unlock (pvrvideosink->x_lock);
+
+  g_free (xwindow);
+}
+
+static void
+gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
+{
+  XID xwindow_id = id;
+  GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (overlay);
+  GstXWindow *xwindow = NULL;
+
+  g_return_if_fail (GST_IS_PVRVIDEOSINK (pvrvideosink));
+
+  g_mutex_lock (pvrvideosink->flow_lock);
+
+  /* If we already use that window return */
+  if (pvrvideosink->xwindow && (xwindow_id == pvrvideosink->xwindow->window)) {
+    g_mutex_unlock (pvrvideosink->flow_lock);
+    return;
+  }
+
+  /* If the element has not initialized the X11 context try to do so */
+  if (!pvrvideosink->dcontext && !(pvrvideosink->dcontext =
+          gst_pvrvideosink_get_dcontext (pvrvideosink))) {
+    g_mutex_unlock (pvrvideosink->flow_lock);
+    /* we have thrown a GST_ELEMENT_ERROR now */
+    return;
+  }
+
+  /* Clear image pool as the images are unusable anyway */
+  if (pvrvideosink->buffer_pool) {
+    gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
+    pvrvideosink->buffer_pool = NULL;
+  }
+
+  /* If a window is there already we destroy it */
+  if (pvrvideosink->xwindow) {
+    gst_pvrvideosink_xwindow_destroy (pvrvideosink, pvrvideosink->xwindow);
+    pvrvideosink->xwindow = NULL;
+  }
+
+  /* If the xid is 0 we will create an internal one in buffer_alloc */
+  if (xwindow_id != 0) {
+    XWindowAttributes attr;
+    WSEGLError glerror;
+    WSEGLDrawableParams source_params;
+    WSEGLDrawableParams render_params;
+
+    xwindow = g_new0 (GstXWindow, 1);
+    xwindow->window = xwindow_id;
+
+    /* Set the event we want to receive and create a GC */
+    g_mutex_lock (pvrvideosink->x_lock);
+
+    XGetWindowAttributes (pvrvideosink->dcontext->x_display, xwindow->window,
+        &attr);
+
+    xwindow->width = attr.width;
+    xwindow->height = attr.height;
+    xwindow->internal = FALSE;
+    if (!pvrvideosink->have_render_rect) {
+      pvrvideosink->render_rect.x = pvrvideosink->render_rect.y = 0;
+      pvrvideosink->render_rect.w = attr.width;
+      pvrvideosink->render_rect.h = attr.height;
+    }
+#if 0
+    if (pvrvideosink->handle_events) {
+      XSelectInput (pvrvideosink->dcontext->x_display, xwindow->window,
+          ExposureMask | StructureNotifyMask | PointerMotionMask |
+          KeyPressMask | KeyReleaseMask);
+    }
+#endif
+
+    xwindow->gc = XCreateGC (pvrvideosink->dcontext->x_display,
+        xwindow->window, 0, NULL);
+    g_mutex_unlock (pvrvideosink->x_lock);
+
+    glerror =
+        pvrvideosink->dcontext->wsegl_table->
+        pfnWSEGL_CreateWindowDrawable (pvrvideosink->dcontext->display_handle,
+        pvrvideosink->dcontext->glconfig,
+        &(pvrvideosink->dcontext->drawable_handle),
+        (NativeWindowType) xwindow->window,
+        &(pvrvideosink->dcontext->rotation));
+
+    if (glerror != WSEGL_SUCCESS) {
+      GST_ERROR_OBJECT (pvrvideosink, "Error creating drawable");
+      return;
+    }
+    glerror =
+        pvrvideosink->dcontext->wsegl_table->
+        pfnWSEGL_GetDrawableParameters (pvrvideosink->dcontext->drawable_handle,
+        &source_params, &render_params);
+    pvrvideosink->dcontext->dst_mem =
+        (PVR2DMEMINFO *) render_params.hPrivateData;
+  }
+
+  if (xwindow)
+    pvrvideosink->xwindow = xwindow;
+
+  g_mutex_unlock (pvrvideosink->flow_lock);
+}
+
+static void
+gst_pvrvideosink_expose (GstXOverlay * overlay)
+{
+  GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (overlay);
+
+  gst_pvrvideosink_blit (pvrvideosink, NULL);
+}
+
 static void
 gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
     gboolean handle_events)
@@ -885,9 +1016,34 @@ gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
 }
 
 static void
+gst_pvrvideosink_set_render_rectangle (GstXOverlay * overlay, gint x, gint y,
+    gint width, gint height)
+{
+  GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (overlay);
+
+  /* FIXME: how about some locking? */
+  if (width >= 0 && height >= 0) {
+    pvrvideosink->render_rect.x = x;
+    pvrvideosink->render_rect.y = y;
+    pvrvideosink->render_rect.w = width;
+    pvrvideosink->render_rect.h = height;
+    pvrvideosink->have_render_rect = TRUE;
+  } else {
+    pvrvideosink->render_rect.x = 0;
+    pvrvideosink->render_rect.y = 0;
+    pvrvideosink->render_rect.w = pvrvideosink->xwindow->width;
+    pvrvideosink->render_rect.h = pvrvideosink->xwindow->height;
+    pvrvideosink->have_render_rect = FALSE;
+  }
+}
+
+static void
 gst_pvrvideosink_xoverlay_init (GstXOverlayClass * iface)
 {
+  iface->set_window_handle = gst_pvrvideosink_set_window_handle;
+  iface->expose = gst_pvrvideosink_expose;
   iface->handle_events = gst_pvrvideosink_set_event_handling;
+  iface->set_render_rectangle = gst_pvrvideosink_set_render_rectangle;
 }
 
 /* =========================================== */
-- 
1.7.5.4

