From 99efe40cd2764d5d65e924f5090ff7416dab6c64 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Fri, 10 Jun 2011 15:42:21 +0200
Subject: [PATCH 012/154] omxcamerabinsrc: add allocate-buffers and
 source-filter properties

---
 gst/camerabin2/gstomxcamerabinsrc.c |   77 +++++++++++++++++++++++++++++++++--
 gst/camerabin2/gstomxcamerabinsrc.h |    3 +
 2 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/gst/camerabin2/gstomxcamerabinsrc.c b/gst/camerabin2/gstomxcamerabinsrc.c
index 51f056a..1fe5541 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.c
+++ b/gst/camerabin2/gstomxcamerabinsrc.c
@@ -52,6 +52,8 @@ enum GstVideoRecordingStatus
 enum
 {
   PROP_0,
+  PROP_SOURCE_FILTER,
+  PROP_ALLOCATE_BUFFERS
 };
 
 GST_DEBUG_CATEGORY (omx_camera_bin_src_debug);
@@ -66,6 +68,8 @@ gst_omx_camera_bin_src_dispose (GObject * object)
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (object);
 
   gst_caps_replace (&self->image_capture_caps, NULL);
+  gst_object_unref (self->user_source_filter);
+  self->user_source_filter = NULL;
 
   G_OBJECT_CLASS (parent_class)->dispose (object);
 }
@@ -83,6 +87,39 @@ gst_omx_camera_bin_src_set_property (GObject * object,
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (object);
 
   switch (prop_id) {
+    case PROP_SOURCE_FILTER:
+      if (self->source_filter) {
+        gst_bin_remove (GST_BIN (object), self->source_filter);
+        gst_element_set_state (self->source_filter, GST_STATE_NULL);
+        gst_object_unref (self->source_filter);
+        self->source_filter = NULL;
+      }
+
+      if (self->user_source_filter)
+        gst_object_unref (self->user_source_filter);
+      self->user_source_filter = g_value_dup_object (value);
+
+      if (self->user_source_filter)
+        self->source_filter = self->user_source_filter;
+      else
+        self->source_filter = gst_element_factory_make ("identity", NULL);
+      self->source_filter = gst_object_ref (self->source_filter);
+
+      gst_bin_add (GST_BIN (self), self->source_filter);
+      if (!gst_element_link_pads (self->video_source, "src",
+              self->source_filter, "sink"))
+        g_assert (FALSE);
+      if (!gst_element_link_pads (self->source_filter, "src",
+              self->tee, "sink"))
+        g_assert (FALSE);
+      break;
+    case PROP_ALLOCATE_BUFFERS:
+    {
+      gboolean allocate = g_value_get_boolean (value);
+      if (self->video_source)
+        g_object_set (self->video_source, "allocate-buffers", allocate, NULL);
+      break;
+    }
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (self, prop_id, pspec);
       break;
@@ -96,6 +133,20 @@ gst_omx_camera_bin_src_get_property (GObject * object,
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (object);
 
   switch (prop_id) {
+    case PROP_SOURCE_FILTER:
+      if (self->user_source_filter)
+        g_value_set_object (value, self->user_source_filter);
+      break;
+    case PROP_ALLOCATE_BUFFERS:
+    {
+      gboolean allocate = TRUE;
+
+      if (self->video_source)
+        g_object_get (self->video_source, "allocate-buffers", &allocate, NULL);
+
+      g_value_set_boolean (value, allocate);
+      break;
+    }
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (self, prop_id, pspec);
       break;
@@ -208,6 +259,10 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
     else
       g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO, NULL);
 
+    if (self->source_filter == NULL)
+      self->source_filter = gst_element_factory_make ("identity", NULL);
+    self->source_filter = gst_object_ref (self->source_filter);
+
     self->tee = gst_element_factory_make ("tee", NULL);
 
     self->vfsrc_filter = gst_element_factory_make ("capsfilter",
@@ -229,11 +284,15 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
     self->imgsrc_stride =
         gst_element_factory_make ("identity", "imgsrc-stride");
 
-    gst_bin_add_many (cbin, self->video_source, self->tee, self->vfsrc_filter,
-        self->vfsrc_stride, self->vidsrc_filter, self->vidsrc_stride,
-        self->imgsrc_stride, NULL);
+    gst_bin_add_many (cbin, self->video_source, self->tee,
+        self->vfsrc_filter, self->vfsrc_stride, self->vidsrc_filter,
+        self->vidsrc_stride, self->imgsrc_stride, NULL);
 
-    if (!gst_element_link_pads (self->video_source, "src", self->tee, "sink"))
+    gst_bin_add (cbin, self->source_filter);
+    if (!gst_element_link_pads (self->video_source, "src",
+            self->source_filter, "sink"))
+      goto link_error;
+    if (!gst_element_link_pads (self->source_filter, "src", self->tee, "sink"))
       goto link_error;
 
     pad = gst_element_get_request_pad (self->tee, "src0");
@@ -498,6 +557,16 @@ gst_omx_camera_bin_src_class_init (GstOmxCameraBinSrcClass * klass)
       gst_omx_camera_bin_src_get_allowed_input_caps;
   gstbasecamerasrc_class->start_capture = gst_omx_camera_bin_src_start_capture;
   gstbasecamerasrc_class->stop_capture = gst_omx_camera_bin_src_stop_capture;
+
+  g_object_class_install_property (gobject_class, PROP_SOURCE_FILTER,
+      g_param_spec_object ("source-filter", "Source filter",
+          "Writeme",
+          GST_TYPE_ELEMENT, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (gobject_class, PROP_ALLOCATE_BUFFERS,
+      g_param_spec_boolean ("allocate-buffers", "Allocate buffers",
+          "Use OMX_AllocateBuffer to allocate output buffers", FALSE,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 }
 
 static void
diff --git a/gst/camerabin2/gstomxcamerabinsrc.h b/gst/camerabin2/gstomxcamerabinsrc.h
index 761f25b..62079d9 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.h
+++ b/gst/camerabin2/gstomxcamerabinsrc.h
@@ -64,9 +64,12 @@ struct _GstOmxCameraBinSrc
 
   /* image capture controls */
   gint image_capture_count;
+  
+  GstElement *user_source_filter;
 
   /* source elements */
   GstElement *video_source;
+  GstElement *source_filter;
   GstElement *tee;
   GstElement *vfsrc_filter;
   GstElement *vfsrc_stride;
-- 
1.7.5.4

