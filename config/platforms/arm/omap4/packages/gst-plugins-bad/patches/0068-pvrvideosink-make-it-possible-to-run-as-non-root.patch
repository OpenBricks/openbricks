From 0b3fe83f87022a8ed233f1296e97c909e2f1e33a Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Wed, 14 Sep 2011 12:58:48 +0200
Subject: [PATCH 068/154] pvrvideosink: make it possible to run as non-root

Call WSEGL_InitialiseDisplay a bit earlier and get the pvr2d context from there.
InitialiseDisplay does DRM authentication so the sink can now be used as
non-root.
---
 sys/pvr2d/gstpvrvideosink.c |  112 ++++++++++++++++++-------------------------
 1 files changed, 46 insertions(+), 66 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 86b49d9..99c2285 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -36,6 +36,27 @@
 GST_DEBUG_CATEGORY_EXTERN (gst_debug_pvrvideosink);
 #define GST_CAT_DEFAULT gst_debug_pvrvideosink
 
+typedef struct DRI2WS_Display_TAG
+{
+	unsigned int			ui32RefCount;
+	
+	Display				*display;
+	int				screen;
+	unsigned int			ui32Flags;
+
+	unsigned int			ui32Width;
+	unsigned int			ui32Height;
+	unsigned int			ui32StrideInBytes;
+	unsigned int			ui32BytesPerPixel;
+	WSEGLPixelFormat		ePixelFormat;
+
+	PVR2DFORMAT				ePVR2DPixelFormat;
+	PVR2DCONTEXTHANDLE		hContext;
+	PVR2DMEMINFO			*psMemInfo;
+
+	int				iDRMfd;
+} DRI2WSDisplay;
+
 static void gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink);
 static GstFlowReturn gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink,
     guint64 offset, guint size, GstCaps * caps, GstBuffer ** buf);
@@ -78,9 +99,10 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
 {
   GstDrawContext *dcontext;
   PVR2DERROR pvr_error;
-  gint num_devices;
-  PVR2DDEVICEINFO *p_dev_info;
   gint refresh_rate;
+  DRI2WSDisplay *displayImpl;
+  WSEGLError glerror;
+  WSEGLCaps *glcaps;
 
   dcontext = g_new0 (GstDrawContext, 1);
   dcontext->p_blt_info = 0;
@@ -91,35 +113,28 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
     return NULL;
   }
 
-  dcontext->wsegl_table = WSEGL_GetFunctionTablePointer ();
-
   dcontext->x_display = XOpenDisplay (NULL);
 
-  pvr_error = num_devices = PVR2DEnumerateDevices (NULL);
-  if (num_devices < 0)
-    goto enumerate_devices_error;
+  dcontext->wsegl_table = WSEGL_GetFunctionTablePointer ();
+  glerror = dcontext->wsegl_table->pfnWSEGL_IsDisplayValid (
+      (NativeDisplayType) dcontext->x_display);
 
-  p_dev_info = g_new0 (PVR2DDEVICEINFO, num_devices);
-  pvr_error = PVR2DEnumerateDevices (p_dev_info);
-  if (pvr_error != PVR2D_OK)
-    goto enumerate_devices_error;
+  if (glerror != WSEGL_SUCCESS) {
+    GST_ERROR_OBJECT (pvrvideosink, "Display is not valid");
+    return NULL;
+  }
 
-  pvr_error = PVR2DCreateDeviceContext (p_dev_info[0].ulDevID,
-      &(dcontext->pvr_context), 0);
-  switch (pvr_error) {
-    case PVR2D_OK:
-      break;
-    case PVR2DERROR_DEVICE_UNAVAILABLE:
-      GST_ERROR_OBJECT (pvrvideosink, "Failed to create device context,"
-          "device unavailable");
-      return NULL;
-      break;
-    default:
-      GST_ERROR_OBJECT (pvrvideosink, "Failed to create device context,"
-          "generic error");
-      return NULL;
-      break;
+  glerror = dcontext->wsegl_table->pfnWSEGL_InitialiseDisplay (
+      (NativeDisplayType) dcontext->x_display, &dcontext->display_handle,
+      &glcaps, &dcontext->glconfig);
+  if (glerror != WSEGL_SUCCESS) {
+    GST_ERROR_OBJECT (pvrvideosink, "Error initializing display");
+    return NULL;
   }
+
+  displayImpl = (DRI2WSDisplay *) dcontext->display_handle;
+  dcontext->pvr_context = displayImpl->hContext;
+
   pvr_error = PVR2DGetScreenMode (dcontext->pvr_context,
       &dcontext->display_format, &dcontext->display_width,
       &dcontext->display_height, &dcontext->stride, &refresh_rate);
@@ -129,19 +144,7 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
     return NULL;
   }
 
-  dcontext->p_blt_info->CopyCode = PVR2DROPcopy;
-  dcontext->p_blt_info->BlitFlags = PVR2D_BLIT_DISABLE_ALL;
-
-  dcontext->p_blt_info->DstSurfWidth = dcontext->display_width;
-  dcontext->p_blt_info->DstSurfHeight = dcontext->display_height;
-  dcontext->p_blt_info->DstStride = dcontext->stride;
-  dcontext->p_blt_info->DstFormat = dcontext->display_format;
   return dcontext;
-
-enumerate_devices_error:
-  GST_ERROR_OBJECT (pvrvideosink, "Failed to enumerate devices "
-      "returned %d", pvr_error);
-  return NULL;
 }
 
 static GstXWindow *
@@ -157,7 +160,6 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
   gboolean ret;
   GstXWindow *xwindow;
   GstDrawContext *dcontext;
-  WSEGLCaps *glcaps;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
 
@@ -173,15 +175,15 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
     return NULL;
   }
 
-  root = DefaultRootWindow (dcontext->x_display);
-  xwindow->window_attributes.event_mask =
-      ExposureMask | PointerMotionMask | KeyPressMask;
-
   if (video_width > dcontext->display_width)
     video_width = dcontext->display_width;
   if (video_height > dcontext->display_height)
     video_height = dcontext->display_height;
 
+  root = DefaultRootWindow (dcontext->x_display);
+  xwindow->window_attributes.event_mask =
+      ExposureMask | PointerMotionMask | KeyPressMask;
+
   xwindow->window = XCreateWindow (dcontext->x_display, root, 0, 0,
       video_width, video_height, 0, CopyFromParent, InputOutput,
       CopyFromParent, CWEventMask, &(xwindow->window_attributes));
@@ -193,28 +195,6 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
   XSetWindowBackgroundPixmap (pvrvideosink->dcontext->x_display,
       xwindow->window, None);
 
-  glerror = dcontext->wsegl_table->pfnWSEGL_IsDisplayValid (
-      (NativeDisplayType) dcontext->x_display);
-
-  if (glerror != WSEGL_SUCCESS) {
-    GST_ERROR_OBJECT (pvrvideosink, "Display is not valid");
-    return NULL;
-  }
-
-  glcaps = g_new0 (WSEGLCaps, 1);
-  dcontext->glcaps = &glcaps;
-
-  g_message ("Initializing display");
-  glerror = dcontext->wsegl_table->pfnWSEGL_InitialiseDisplay (
-      (NativeDisplayType) dcontext->x_display, &dcontext->display_handle,
-      dcontext->glcaps, &(dcontext->glconfig));
-  g_message ("Display initialized");
-
-  if (glerror != WSEGL_SUCCESS) {
-    GST_ERROR_OBJECT (pvrvideosink, "Error initializing display");
-    return NULL;
-  }
-
   glerror =
       dcontext->wsegl_table->
       pfnWSEGL_CreateWindowDrawable (dcontext->display_handle,
-- 
1.7.5.4

