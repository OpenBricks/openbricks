From d54aea53478761a821eb9479f3d8dcdbb7548e88 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Mon, 9 May 2011 16:37:50 +0200
Subject: [PATCH 006/154] camerabin2: rename GstBaseCameraSrc to
 GstBaseCameraBinSrc

Avoids a gtype name conflict with camerabin(1)
camerabin2: rename GstBaseCameraSrc to GstBaseCameraBinSrc
---
 gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.c |   69 +++++++++++-----------
 gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.h |   56 +++++++++---------
 gst/camerabin2/gstomxcamerabinsrc.c              |   22 ++++----
 gst/camerabin2/gstomxcamerabinsrc.h              |    4 +-
 gst/camerabin2/gstwrappercamerabinsrc.c          |   31 +++++-----
 gst/camerabin2/gstwrappercamerabinsrc.h          |    4 +-
 tests/check/elements/camerabin2.c                |   10 ++--
 7 files changed, 99 insertions(+), 97 deletions(-)

diff --git a/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.c b/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.c
index b2ae992..df22e18 100644
--- a/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.c
+++ b/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.c
@@ -45,7 +45,7 @@
  * directly in the subclass without extra elements.
  *
  * The src will receive the capture mode from #GstCameraBin2 on the 
- * #GstBaseCameraSrc:mode property. Possible capture modes are defined in
+ * #GstBaseCameraBinSrc:mode property. Possible capture modes are defined in
  * #GstCameraBinMode.
  */
 
@@ -84,7 +84,8 @@ static guint basecamerasrc_signals[LAST_SIGNAL];
 GST_DEBUG_CATEGORY (base_camera_src_debug);
 #define GST_CAT_DEFAULT base_camera_src_debug
 
-GST_BOILERPLATE (GstBaseCameraSrc, gst_base_camera_src, GstBin, GST_TYPE_BIN);
+GST_BOILERPLATE (GstBaseCameraBinSrc, gst_base_camera_src, GstBin,
+    GST_TYPE_BIN);
 
 static GstStaticPadTemplate vfsrc_template =
 GST_STATIC_PAD_TEMPLATE (GST_BASE_CAMERA_SRC_VIEWFINDER_PAD_NAME,
@@ -118,7 +119,7 @@ GST_STATIC_PAD_TEMPLATE (GST_BASE_CAMERA_SRC_VIDEO_PAD_NAME,
  * returns NULL.
  */
 GstPhotography *
-gst_base_camera_src_get_photography (GstBaseCameraSrc * self)
+gst_base_camera_src_get_photography (GstBaseCameraBinSrc * self)
 {
   GstElement *elem;
 
@@ -144,7 +145,7 @@ gst_base_camera_src_get_photography (GstBaseCameraSrc * self)
  * returns NULL.
  */
 GstColorBalance *
-gst_base_camera_src_get_color_balance (GstBaseCameraSrc * self)
+gst_base_camera_src_get_color_balance (GstBaseCameraBinSrc * self)
 {
   GstElement *elem;
 
@@ -169,9 +170,9 @@ gst_base_camera_src_get_color_balance (GstBaseCameraSrc * self)
  * Set the chosen #GstCameraBinMode capture mode.
  */
 gboolean
-gst_base_camera_src_set_mode (GstBaseCameraSrc * self, GstCameraBinMode mode)
+gst_base_camera_src_set_mode (GstBaseCameraBinSrc * self, GstCameraBinMode mode)
 {
-  GstBaseCameraSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
+  GstBaseCameraBinSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
 
   g_return_val_if_fail (bclass->set_mode, FALSE);
 
@@ -189,9 +190,9 @@ gst_base_camera_src_set_mode (GstBaseCameraSrc * self, GstCameraBinMode mode)
  * Apply zoom configured to camerabin to capture.
  */
 void
-gst_base_camera_src_setup_zoom (GstBaseCameraSrc * self)
+gst_base_camera_src_setup_zoom (GstBaseCameraBinSrc * self)
 {
-  GstBaseCameraSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
+  GstBaseCameraBinSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
 
   g_return_if_fail (self->zoom);
   g_return_if_fail (bclass->set_zoom);
@@ -207,10 +208,10 @@ gst_base_camera_src_setup_zoom (GstBaseCameraSrc * self)
  * Apply preview caps to preview pipeline and to video source.
  */
 void
-gst_base_camera_src_setup_preview (GstBaseCameraSrc * self,
+gst_base_camera_src_setup_preview (GstBaseCameraBinSrc * self,
     GstCaps * preview_caps)
 {
-  GstBaseCameraSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
+  GstBaseCameraBinSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
 
   if (self->preview_pipeline) {
     GST_DEBUG_OBJECT (self,
@@ -231,9 +232,9 @@ gst_base_camera_src_setup_preview (GstBaseCameraSrc * self,
  * Returns: caps object from videosrc
  */
 GstCaps *
-gst_base_camera_src_get_allowed_input_caps (GstBaseCameraSrc * self)
+gst_base_camera_src_get_allowed_input_caps (GstBaseCameraBinSrc * self)
 {
-  GstBaseCameraSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
+  GstBaseCameraBinSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
 
   g_return_val_if_fail (bclass->get_allowed_input_caps, NULL);
 
@@ -241,9 +242,9 @@ gst_base_camera_src_get_allowed_input_caps (GstBaseCameraSrc * self)
 }
 
 static void
-gst_base_camera_src_start_capture (GstBaseCameraSrc * src)
+gst_base_camera_src_start_capture (GstBaseCameraBinSrc * src)
 {
-  GstBaseCameraSrcClass *klass = GST_BASE_CAMERA_SRC_GET_CLASS (src);
+  GstBaseCameraBinSrcClass *klass = GST_BASE_CAMERA_SRC_GET_CLASS (src);
 
   g_return_if_fail (klass->start_capture != NULL);
 
@@ -272,9 +273,9 @@ gst_base_camera_src_start_capture (GstBaseCameraSrc * src)
 }
 
 static void
-gst_base_camera_src_stop_capture (GstBaseCameraSrc * src)
+gst_base_camera_src_stop_capture (GstBaseCameraBinSrc * src)
 {
-  GstBaseCameraSrcClass *klass = GST_BASE_CAMERA_SRC_GET_CLASS (src);
+  GstBaseCameraBinSrcClass *klass = GST_BASE_CAMERA_SRC_GET_CLASS (src);
 
   g_return_if_fail (klass->stop_capture != NULL);
 
@@ -289,7 +290,7 @@ gst_base_camera_src_stop_capture (GstBaseCameraSrc * src)
 }
 
 void
-gst_base_camera_src_finish_capture (GstBaseCameraSrc * self)
+gst_base_camera_src_finish_capture (GstBaseCameraBinSrc * self)
 {
   GST_DEBUG_OBJECT (self, "Finishing capture");
   g_return_if_fail (self->capturing);
@@ -300,7 +301,7 @@ gst_base_camera_src_finish_capture (GstBaseCameraSrc * self)
 static void
 gst_base_camera_src_dispose (GObject * object)
 {
-  GstBaseCameraSrc *src = GST_BASE_CAMERA_SRC_CAST (object);
+  GstBaseCameraBinSrc *src = GST_BASE_CAMERA_SRC_CAST (object);
 
   g_mutex_free (src->capturing_mutex);
 
@@ -321,7 +322,7 @@ gst_base_camera_src_dispose (GObject * object)
 }
 
 static void
-gst_base_camera_src_finalize (GstBaseCameraSrc * self)
+gst_base_camera_src_finalize (GstBaseCameraBinSrc * self)
 {
   G_OBJECT_CLASS (parent_class)->finalize ((GObject *) (self));
 }
@@ -330,7 +331,7 @@ static void
 gst_base_camera_src_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
 {
-  GstBaseCameraSrc *self = GST_BASE_CAMERA_SRC (object);
+  GstBaseCameraBinSrc *self = GST_BASE_CAMERA_SRC (object);
 
   switch (prop_id) {
     case PROP_MODE:
@@ -380,7 +381,7 @@ static void
 gst_base_camera_src_get_property (GObject * object,
     guint prop_id, GValue * value, GParamSpec * pspec)
 {
-  GstBaseCameraSrc *self = GST_BASE_CAMERA_SRC (object);
+  GstBaseCameraBinSrc *self = GST_BASE_CAMERA_SRC (object);
 
   switch (prop_id) {
     case PROP_MODE:
@@ -413,9 +414,9 @@ gst_base_camera_src_get_property (GObject * object,
 }
 
 static gboolean
-construct_pipeline (GstBaseCameraSrc * self)
+construct_pipeline (GstBaseCameraBinSrc * self)
 {
-  GstBaseCameraSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
+  GstBaseCameraBinSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
 
   if (bclass->construct_pipeline) {
     if (!bclass->construct_pipeline (self)) {
@@ -428,9 +429,9 @@ construct_pipeline (GstBaseCameraSrc * self)
 }
 
 static gboolean
-setup_pipeline (GstBaseCameraSrc * self)
+setup_pipeline (GstBaseCameraBinSrc * self)
 {
-  GstBaseCameraSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
+  GstBaseCameraBinSrcClass *bclass = GST_BASE_CAMERA_SRC_GET_CLASS (self);
   if (bclass->setup_pipeline)
     return bclass->setup_pipeline (self);
   return TRUE;
@@ -441,7 +442,7 @@ gst_base_camera_src_change_state (GstElement * element,
     GstStateChange transition)
 {
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
-  GstBaseCameraSrc *self = GST_BASE_CAMERA_SRC (element);
+  GstBaseCameraBinSrc *self = GST_BASE_CAMERA_SRC (element);
 
   GST_DEBUG_OBJECT (self, "%d -> %d",
       GST_STATE_TRANSITION_CURRENT (transition),
@@ -519,7 +520,7 @@ gst_base_camera_src_base_init (gpointer g_class)
 }
 
 static void
-gst_base_camera_src_class_init (GstBaseCameraSrcClass * klass)
+gst_base_camera_src_class_init (GstBaseCameraBinSrcClass * klass)
 {
   GObjectClass *gobject_class;
   GstElementClass *gstelement_class;
@@ -550,7 +551,7 @@ gst_base_camera_src_class_init (GstBaseCameraSrcClass * klass)
           MAX_ZOOM, G_PARAM_READABLE | G_PARAM_STATIC_STRINGS));
 
   /**
-   * GstBaseCameraSrc:post-previews:
+   * GstBaseCameraBinSrc:post-previews:
    *
    * When %TRUE, preview images should be posted to the bus when
    * captures are made
@@ -571,7 +572,7 @@ gst_base_camera_src_class_init (GstBaseCameraSrcClass * klass)
           GST_TYPE_ELEMENT, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   /**
-   * GstBaseCameraSrc:ready-for-capture:
+   * GstBaseCameraBinSrc:ready-for-capture:
    *
    * When TRUE new capture can be prepared. If FALSE capturing is ongoing
    * and starting a new capture immediately is not possible.
@@ -592,14 +593,14 @@ gst_base_camera_src_class_init (GstBaseCameraSrcClass * klass)
       g_signal_new ("start-capture",
       G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION,
-      G_STRUCT_OFFSET (GstBaseCameraSrcClass, private_start_capture),
+      G_STRUCT_OFFSET (GstBaseCameraBinSrcClass, private_start_capture),
       NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
 
   basecamerasrc_signals[STOP_CAPTURE_SIGNAL] =
       g_signal_new ("stop-capture",
       G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION,
-      G_STRUCT_OFFSET (GstBaseCameraSrcClass, private_stop_capture),
+      G_STRUCT_OFFSET (GstBaseCameraBinSrcClass, private_stop_capture),
       NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
 
   /* TODO these should be moved to a private struct
@@ -613,8 +614,8 @@ gst_base_camera_src_class_init (GstBaseCameraSrcClass * klass)
 }
 
 static void
-gst_base_camera_src_init (GstBaseCameraSrc * self,
-    GstBaseCameraSrcClass * klass)
+gst_base_camera_src_init (GstBaseCameraBinSrc * self,
+    GstBaseCameraBinSrcClass * klass)
 {
   self->width = DEFAULT_WIDTH;
   self->height = DEFAULT_HEIGHT;
@@ -629,7 +630,7 @@ gst_base_camera_src_init (GstBaseCameraSrc * self,
 }
 
 void
-gst_base_camera_src_post_preview (GstBaseCameraSrc * self, GstBuffer * buf)
+gst_base_camera_src_post_preview (GstBaseCameraBinSrc * self, GstBuffer * buf)
 {
   if (self->post_preview) {
     gst_camerabin_preview_pipeline_post (self->preview_pipeline, buf);
diff --git a/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.h b/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.h
index 1c412e4..505e2a5 100644
--- a/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.h
+++ b/gst-libs/gst/basecamerabinsrc/gstbasecamerasrc.h
@@ -38,21 +38,21 @@ G_BEGIN_DECLS
 #define GST_TYPE_BASE_CAMERA_SRC \
   (gst_base_camera_src_get_type())
 #define GST_BASE_CAMERA_SRC(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_BASE_CAMERA_SRC,GstBaseCameraSrc))
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_BASE_CAMERA_SRC,GstBaseCameraBinSrc))
 #define GST_BASE_CAMERA_SRC_GET_CLASS(obj) \
-  (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_BASE_CAMERA_SRC, GstBaseCameraSrcClass))
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_BASE_CAMERA_SRC, GstBaseCameraBinSrcClass))
 #define GST_BASE_CAMERA_SRC_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_BASE_CAMERA_SRC,GstBaseCameraSrcClass))
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_BASE_CAMERA_SRC,GstBaseCameraBinSrcClass))
 #define GST_IS_BASE_CAMERA_SRC(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_BASE_CAMERA_SRC))
 #define GST_IS_BASE_CAMERA_SRC_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_BASE_CAMERA_SRC))
 #define GST_BASE_CAMERA_SRC_CAST(obj) \
-  ((GstBaseCameraSrc *) (obj))
+  ((GstBaseCameraBinSrc *) (obj))
 GType gst_base_camera_src_get_type (void);
 
-typedef struct _GstBaseCameraSrc GstBaseCameraSrc;
-typedef struct _GstBaseCameraSrcClass GstBaseCameraSrcClass;
+typedef struct _GstBaseCameraBinSrc GstBaseCameraBinSrc;
+typedef struct _GstBaseCameraBinSrcClass GstBaseCameraBinSrcClass;
 
 #define GST_BASE_CAMERA_SRC_VIEWFINDER_PAD_NAME "vfsrc"
 #define GST_BASE_CAMERA_SRC_IMAGE_PAD_NAME "imgsrc"
@@ -61,9 +61,9 @@ typedef struct _GstBaseCameraSrcClass GstBaseCameraSrcClass;
 #define GST_BASE_CAMERA_SRC_PREVIEW_MESSAGE_NAME "preview-image"
 
 /**
- * GstBaseCameraSrc:
+ * GstBaseCameraBinSrc:
  */
-struct _GstBaseCameraSrc
+struct _GstBaseCameraBinSrc
 {
   GstBin parent;
 
@@ -91,40 +91,40 @@ struct _GstBaseCameraSrc
 
 
 /**
- * GstBaseCameraSrcClass:
+ * GstBaseCameraBinSrcClass:
  * @construct_pipeline: construct pipeline must be implemented by derived class
  * @setup_pipeline: configure pipeline for the chosen settings
  * @set_zoom: set the zoom
  * @set_mode: set the mode
  */
-struct _GstBaseCameraSrcClass
+struct _GstBaseCameraBinSrcClass
 {
   GstBinClass parent;
 
   /* construct pipeline must be implemented by derived class */
-  gboolean    (*construct_pipeline)  (GstBaseCameraSrc *self);
+  gboolean    (*construct_pipeline)  (GstBaseCameraBinSrc *self);
 
   /* optional */
-  gboolean    (*setup_pipeline)      (GstBaseCameraSrc *self);
+  gboolean    (*setup_pipeline)      (GstBaseCameraBinSrc *self);
 
   /* set the zoom */
-  void        (*set_zoom)            (GstBaseCameraSrc *self, gfloat zoom);
+  void        (*set_zoom)            (GstBaseCameraBinSrc *self, gfloat zoom);
 
   /* set the mode */
-  gboolean    (*set_mode)            (GstBaseCameraSrc *self,
+  gboolean    (*set_mode)            (GstBaseCameraBinSrc *self,
                                       GstCameraBinMode mode);
 
   /* set preview caps */
-  gboolean    (*set_preview)         (GstBaseCameraSrc *self,
+  gboolean    (*set_preview)         (GstBaseCameraBinSrc *self,
                                       GstCaps *preview_caps);
 
   /* */
-  GstCaps *   (*get_allowed_input_caps) (GstBaseCameraSrc * self);
+  GstCaps *   (*get_allowed_input_caps) (GstBaseCameraBinSrc * self);
 
-  void (*private_start_capture) (GstBaseCameraSrc * src);
-  void (*private_stop_capture) (GstBaseCameraSrc * src);
-  gboolean (*start_capture) (GstBaseCameraSrc * src);
-  void (*stop_capture) (GstBaseCameraSrc * src);
+  void (*private_start_capture) (GstBaseCameraBinSrc * src);
+  void (*private_stop_capture) (GstBaseCameraBinSrc * src);
+  gboolean (*start_capture) (GstBaseCameraBinSrc * src);
+  void (*stop_capture) (GstBaseCameraBinSrc * src);
 
   gpointer _gst_reserved[GST_PADDING_LARGE];
 };
@@ -134,17 +134,17 @@ struct _GstBaseCameraSrcClass
 #define MAX_ZOOM 10.0f
 #define ZOOM_1X MIN_ZOOM
 
-GstPhotography * gst_base_camera_src_get_photography (GstBaseCameraSrc *self);
-GstColorBalance * gst_base_camera_src_get_color_balance (GstBaseCameraSrc *self);
+GstPhotography * gst_base_camera_src_get_photography (GstBaseCameraBinSrc *self);
+GstColorBalance * gst_base_camera_src_get_color_balance (GstBaseCameraBinSrc *self);
 
-gboolean gst_base_camera_src_set_mode (GstBaseCameraSrc *self, GstCameraBinMode mode);
-void gst_base_camera_src_setup_zoom (GstBaseCameraSrc * self);
-void gst_base_camera_src_setup_preview (GstBaseCameraSrc * self, GstCaps * preview_caps);
-GstCaps * gst_base_camera_src_get_allowed_input_caps (GstBaseCameraSrc * self);
-void gst_base_camera_src_finish_capture (GstBaseCameraSrc *self);
+gboolean gst_base_camera_src_set_mode (GstBaseCameraBinSrc *self, GstCameraBinMode mode);
+void gst_base_camera_src_setup_zoom (GstBaseCameraBinSrc * self);
+void gst_base_camera_src_setup_preview (GstBaseCameraBinSrc * self, GstCaps * preview_caps);
+GstCaps * gst_base_camera_src_get_allowed_input_caps (GstBaseCameraBinSrc * self);
+void gst_base_camera_src_finish_capture (GstBaseCameraBinSrc *self);
 
 
-void gst_base_camera_src_post_preview (GstBaseCameraSrc *self, GstBuffer * buf);
+void gst_base_camera_src_post_preview (GstBaseCameraBinSrc *self, GstBuffer * buf);
 // XXX add methods to get/set img capture and vid capture caps..
 
 #endif /* __GST_BASE_CAMERA_SRC_H__ */
diff --git a/gst/camerabin2/gstomxcamerabinsrc.c b/gst/camerabin2/gstomxcamerabinsrc.c
index 67cae19..1fb3038 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.c
+++ b/gst/camerabin2/gstomxcamerabinsrc.c
@@ -57,7 +57,7 @@ GST_DEBUG_CATEGORY (omx_camera_bin_src_debug);
 #define GST_CAT_DEFAULT omx_camera_bin_src_debug
 
 GST_BOILERPLATE (GstOmxCameraBinSrc, gst_omx_camera_bin_src,
-    GstBaseCameraSrc, GST_TYPE_BASE_CAMERA_SRC);
+    GstBaseCameraBinSrc, GST_TYPE_BASE_CAMERA_SRC);
 
 static void set_capsfilter_caps (GstOmxCameraBinSrc * self, GstCaps * new_caps);
 
@@ -169,7 +169,7 @@ gst_omx_camera_bin_src_imgsrc_probe (GstPad * pad, GstBuffer * buffer,
     gpointer data)
 {
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (data);
-  GstBaseCameraSrc *camerasrc = GST_BASE_CAMERA_SRC (data);
+  GstBaseCameraBinSrc *camerasrc = GST_BASE_CAMERA_SRC (data);
   gboolean ret = FALSE;
 
   GST_LOG_OBJECT (self, "Image probe, mode %d, capture count %d",
@@ -204,7 +204,7 @@ gst_omx_camera_bin_src_vidsrc_probe (GstPad * pad, GstBuffer * buffer,
     gpointer data)
 {
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (data);
-  GstBaseCameraSrc *camerasrc = GST_BASE_CAMERA_SRC_CAST (self);
+  GstBaseCameraBinSrc *camerasrc = GST_BASE_CAMERA_SRC_CAST (self);
   gboolean ret = FALSE;
 
   GST_LOG_OBJECT (self, "Video probe, mode %d, capture status %d",
@@ -299,7 +299,7 @@ static void
 gst_omx_camera_bin_src_caps_cb (GObject * gobject, GParamSpec * pspec,
     gpointer user_data)
 {
-  GstBaseCameraSrc *bcamsrc = GST_BASE_CAMERA_SRC (user_data);
+  GstBaseCameraBinSrc *bcamsrc = GST_BASE_CAMERA_SRC (user_data);
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (user_data);
   GstPad *src_caps_src_pad;
   GstCaps *caps = NULL;
@@ -380,7 +380,7 @@ gst_omx_camera_pad_added_cb (GstElement * element,
  * Returns: TRUE, if elements were successfully created, FALSE otherwise
  */
 static gboolean
-gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraSrc * bcamsrc)
+gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
 {
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (bcamsrc);
   GstBin *cbin = GST_BIN (bcamsrc);
@@ -469,7 +469,7 @@ done:
 }
 
 static gboolean
-gst_omx_camera_bin_src_set_mode (GstBaseCameraSrc * bcamsrc,
+gst_omx_camera_bin_src_set_mode (GstBaseCameraBinSrc * bcamsrc,
     GstCameraBinMode mode)
 {
   GstPhotography *photography = gst_base_camera_src_get_photography (bcamsrc);
@@ -502,7 +502,7 @@ gst_omx_camera_bin_src_set_mode (GstBaseCameraSrc * bcamsrc,
 }
 
 static void
-gst_omx_camera_bin_src_set_zoom (GstBaseCameraSrc * bcamsrc, gfloat zoom)
+gst_omx_camera_bin_src_set_zoom (GstBaseCameraBinSrc * bcamsrc, gfloat zoom)
 {
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (bcamsrc);
 
@@ -512,7 +512,7 @@ gst_omx_camera_bin_src_set_zoom (GstBaseCameraSrc * bcamsrc, gfloat zoom)
 }
 
 static GstCaps *
-gst_omx_camera_bin_src_get_allowed_input_caps (GstBaseCameraSrc * bcamsrc)
+gst_omx_camera_bin_src_get_allowed_input_caps (GstBaseCameraBinSrc * bcamsrc)
 {
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (bcamsrc);
   GstCaps *caps = NULL;
@@ -597,7 +597,7 @@ set_capsfilter_caps (GstOmxCameraBinSrc * self, GstCaps * new_caps)
 }
 
 static gboolean
-gst_omx_camera_bin_src_start_capture (GstBaseCameraSrc * camerasrc)
+gst_omx_camera_bin_src_start_capture (GstBaseCameraBinSrc * camerasrc)
 {
   GstOmxCameraBinSrc *src = GST_OMX_CAMERA_BIN_SRC (camerasrc);
 
@@ -636,7 +636,7 @@ gst_omx_camera_bin_src_start_capture (GstBaseCameraSrc * camerasrc)
 }
 
 static void
-gst_omx_camera_bin_src_stop_capture (GstBaseCameraSrc * camerasrc)
+gst_omx_camera_bin_src_stop_capture (GstBaseCameraBinSrc * camerasrc)
 {
   GstOmxCameraBinSrc *src = GST_OMX_CAMERA_BIN_SRC (camerasrc);
 
@@ -703,7 +703,7 @@ gst_omx_camera_bin_src_class_init (GstOmxCameraBinSrcClass * klass)
 {
   GObjectClass *gobject_class;
   GstElementClass *gstelement_class;
-  GstBaseCameraSrcClass *gstbasecamerasrc_class;
+  GstBaseCameraBinSrcClass *gstbasecamerasrc_class;
 
   gobject_class = G_OBJECT_CLASS (klass);
   gstelement_class = GST_ELEMENT_CLASS (klass);
diff --git a/gst/camerabin2/gstomxcamerabinsrc.h b/gst/camerabin2/gstomxcamerabinsrc.h
index 8679bca..2500f05 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.h
+++ b/gst/camerabin2/gstomxcamerabinsrc.h
@@ -51,7 +51,7 @@ typedef struct _GstOmxCameraBinSrcClass GstOmxCameraBinSrcClass;
  */
 struct _GstOmxCameraBinSrc
 {
-  GstBaseCameraSrc parent;
+  GstBaseCameraBinSrc parent;
 
   GstCameraBinMode mode;
 
@@ -98,7 +98,7 @@ struct _GstOmxCameraBinSrc
  */
 struct _GstOmxCameraBinSrcClass
 {
-  GstBaseCameraSrcClass parent;
+  GstBaseCameraBinSrcClass parent;
 };
 
 gboolean gst_omx_camera_bin_src_plugin_init (GstPlugin * plugin);
diff --git a/gst/camerabin2/gstwrappercamerabinsrc.c b/gst/camerabin2/gstwrappercamerabinsrc.c
index 2cf6ac4..bad473d 100644
--- a/gst/camerabin2/gstwrappercamerabinsrc.c
+++ b/gst/camerabin2/gstwrappercamerabinsrc.c
@@ -44,7 +44,7 @@ GST_DEBUG_CATEGORY (wrapper_camera_bin_src_debug);
 #define GST_CAT_DEFAULT wrapper_camera_bin_src_debug
 
 GST_BOILERPLATE (GstWrapperCameraBinSrc, gst_wrapper_camera_bin_src,
-    GstBaseCameraSrc, GST_TYPE_BASE_CAMERA_SRC);
+    GstBaseCameraBinSrc, GST_TYPE_BASE_CAMERA_SRC);
 
 static void set_capsfilter_caps (GstWrapperCameraBinSrc * self,
     GstCaps * new_caps);
@@ -178,7 +178,7 @@ gst_wrapper_camera_bin_src_imgsrc_probe (GstPad * pad, GstBuffer * buffer,
     gpointer data)
 {
   GstWrapperCameraBinSrc *self = GST_WRAPPER_CAMERA_BIN_SRC (data);
-  GstBaseCameraSrc *camerasrc = GST_BASE_CAMERA_SRC (data);
+  GstBaseCameraBinSrc *camerasrc = GST_BASE_CAMERA_SRC (data);
   gboolean ret = FALSE;
 
   GST_LOG_OBJECT (self, "Image probe, mode %d, capture count %d",
@@ -213,7 +213,7 @@ gst_wrapper_camera_bin_src_vidsrc_probe (GstPad * pad, GstBuffer * buffer,
     gpointer data)
 {
   GstWrapperCameraBinSrc *self = GST_WRAPPER_CAMERA_BIN_SRC (data);
-  GstBaseCameraSrc *camerasrc = GST_BASE_CAMERA_SRC_CAST (self);
+  GstBaseCameraBinSrc *camerasrc = GST_BASE_CAMERA_SRC_CAST (self);
   gboolean ret = FALSE;
 
   GST_LOG_OBJECT (self, "Video probe, mode %d, capture status %d",
@@ -300,7 +300,7 @@ static void
 gst_wrapper_camera_bin_src_caps_cb (GObject * gobject, GParamSpec * pspec,
     gpointer user_data)
 {
-  GstBaseCameraSrc *bcamsrc = GST_BASE_CAMERA_SRC (user_data);
+  GstBaseCameraBinSrc *bcamsrc = GST_BASE_CAMERA_SRC (user_data);
   GstWrapperCameraBinSrc *self = GST_WRAPPER_CAMERA_BIN_SRC (user_data);
   GstPad *src_caps_src_pad;
   GstCaps *caps = NULL;
@@ -340,7 +340,7 @@ static void
 gst_wrapper_camera_bin_src_max_zoom_cb (GObject * self, GParamSpec * pspec,
     gpointer user_data)
 {
-  GstBaseCameraSrc *bcamsrc = (GstBaseCameraSrc *) user_data;
+  GstBaseCameraBinSrc *bcamsrc = (GstBaseCameraBinSrc *) user_data;
 
   g_object_get (self, "max-zoom", &bcamsrc->max_zoom, NULL);
   g_object_notify (G_OBJECT (bcamsrc), "max-zoom");
@@ -361,7 +361,7 @@ gst_wrapper_camera_bin_src_max_zoom_cb (GObject * self, GParamSpec * pspec,
  * Returns: TRUE, if elements were successfully created, FALSE otherwise
  */
 static gboolean
-gst_wrapper_camera_bin_src_construct_pipeline (GstBaseCameraSrc * bcamsrc)
+gst_wrapper_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
 {
   GstWrapperCameraBinSrc *self = GST_WRAPPER_CAMERA_BIN_SRC (bcamsrc);
   GstBin *cbin = GST_BIN (bcamsrc);
@@ -539,7 +539,7 @@ copy_missing_fields (GQuark field_id, const GValue * value, gpointer user_data)
 static void
 adapt_image_capture (GstWrapperCameraBinSrc * self, GstCaps * in_caps)
 {
-  GstBaseCameraSrc *bcamsrc = GST_BASE_CAMERA_SRC (self);
+  GstBaseCameraBinSrc *bcamsrc = GST_BASE_CAMERA_SRC (self);
   GstStructure *in_st, *new_st, *req_st;
   gint in_width = 0, in_height = 0, req_width = 0, req_height = 0, crop = 0;
   gdouble ratio_w, ratio_h;
@@ -647,7 +647,7 @@ img_capture_prepared (gpointer data, GstCaps * caps)
 static gboolean
 start_image_capture (GstWrapperCameraBinSrc * self)
 {
-  GstBaseCameraSrc *bcamsrc = GST_BASE_CAMERA_SRC (self);
+  GstBaseCameraBinSrc *bcamsrc = GST_BASE_CAMERA_SRC (self);
   GstPhotography *photography = gst_base_camera_src_get_photography (bcamsrc);
   gboolean ret = FALSE;
   GstCaps *caps;
@@ -686,7 +686,7 @@ start_image_capture (GstWrapperCameraBinSrc * self)
 }
 
 static gboolean
-gst_wrapper_camera_bin_src_set_mode (GstBaseCameraSrc * bcamsrc,
+gst_wrapper_camera_bin_src_set_mode (GstBaseCameraBinSrc * bcamsrc,
     GstCameraBinMode mode)
 {
   GstPhotography *photography = gst_base_camera_src_get_photography (bcamsrc);
@@ -734,7 +734,7 @@ static gboolean
 set_element_zoom (GstWrapperCameraBinSrc * self, gfloat zoom)
 {
   gboolean ret = FALSE;
-  GstBaseCameraSrc *bcamsrc = GST_BASE_CAMERA_SRC (self);
+  GstBaseCameraBinSrc *bcamsrc = GST_BASE_CAMERA_SRC (self);
   gint w2_crop = 0, h2_crop = 0;
   GstPad *pad_zoom_sink = NULL;
   gint left = self->base_crop_left;
@@ -779,7 +779,7 @@ set_element_zoom (GstWrapperCameraBinSrc * self, gfloat zoom)
 }
 
 static void
-gst_wrapper_camera_bin_src_set_zoom (GstBaseCameraSrc * bcamsrc, gfloat zoom)
+gst_wrapper_camera_bin_src_set_zoom (GstBaseCameraBinSrc * bcamsrc, gfloat zoom)
 {
   GstWrapperCameraBinSrc *self = GST_WRAPPER_CAMERA_BIN_SRC (bcamsrc);
 
@@ -796,7 +796,8 @@ gst_wrapper_camera_bin_src_set_zoom (GstBaseCameraSrc * bcamsrc, gfloat zoom)
 }
 
 static GstCaps *
-gst_wrapper_camera_bin_src_get_allowed_input_caps (GstBaseCameraSrc * bcamsrc)
+gst_wrapper_camera_bin_src_get_allowed_input_caps (GstBaseCameraBinSrc *
+    bcamsrc)
 {
   GstWrapperCameraBinSrc *self = GST_WRAPPER_CAMERA_BIN_SRC (bcamsrc);
   GstCaps *caps = NULL;
@@ -976,7 +977,7 @@ set_capsfilter_caps (GstWrapperCameraBinSrc * self, GstCaps * new_caps)
 }
 
 static gboolean
-gst_wrapper_camera_bin_src_start_capture (GstBaseCameraSrc * camerasrc)
+gst_wrapper_camera_bin_src_start_capture (GstBaseCameraBinSrc * camerasrc)
 {
   GstWrapperCameraBinSrc *src = GST_WRAPPER_CAMERA_BIN_SRC (camerasrc);
 
@@ -1018,7 +1019,7 @@ gst_wrapper_camera_bin_src_start_capture (GstBaseCameraSrc * camerasrc)
 }
 
 static void
-gst_wrapper_camera_bin_src_stop_capture (GstBaseCameraSrc * camerasrc)
+gst_wrapper_camera_bin_src_stop_capture (GstBaseCameraBinSrc * camerasrc)
 {
   GstWrapperCameraBinSrc *src = GST_WRAPPER_CAMERA_BIN_SRC (camerasrc);
 
@@ -1085,7 +1086,7 @@ gst_wrapper_camera_bin_src_class_init (GstWrapperCameraBinSrcClass * klass)
 {
   GObjectClass *gobject_class;
   GstElementClass *gstelement_class;
-  GstBaseCameraSrcClass *gstbasecamerasrc_class;
+  GstBaseCameraBinSrcClass *gstbasecamerasrc_class;
 
   gobject_class = G_OBJECT_CLASS (klass);
   gstelement_class = GST_ELEMENT_CLASS (klass);
diff --git a/gst/camerabin2/gstwrappercamerabinsrc.h b/gst/camerabin2/gstwrappercamerabinsrc.h
index ccc1ef6..9671b1a 100644
--- a/gst/camerabin2/gstwrappercamerabinsrc.h
+++ b/gst/camerabin2/gstwrappercamerabinsrc.h
@@ -58,7 +58,7 @@ enum GstVideoRecordingStatus {
  */
 struct _GstWrapperCameraBinSrc
 {
-  GstBaseCameraSrc parent;
+  GstBaseCameraBinSrc parent;
 
   GstCameraBinMode mode;
 
@@ -121,7 +121,7 @@ struct _GstWrapperCameraBinSrc
  */
 struct _GstWrapperCameraBinSrcClass
 {
-  GstBaseCameraSrcClass parent;
+  GstBaseCameraBinSrcClass parent;
 };
 
 gboolean gst_wrapper_camera_bin_src_plugin_init (GstPlugin * plugin);
diff --git a/tests/check/elements/camerabin2.c b/tests/check/elements/camerabin2.c
index f449985..d43b1c0 100644
--- a/tests/check/elements/camerabin2.c
+++ b/tests/check/elements/camerabin2.c
@@ -58,7 +58,7 @@ typedef struct _GstTestCameraSrc GstTestCameraSrc;
 typedef struct _GstTestCameraSrcClass GstTestCameraSrcClass;
 struct _GstTestCameraSrc
 {
-  GstBaseCameraSrc element;
+  GstBaseCameraBinSrc element;
 
   GstPad *vfpad;
   GstPad *vidpad;
@@ -69,16 +69,16 @@ struct _GstTestCameraSrc
 
 struct _GstTestCameraSrcClass
 {
-  GstBaseCameraSrcClass parent_class;
+  GstBaseCameraBinSrcClass parent_class;
 };
 
 GType gst_test_camera_src_get_type (void);
 
 GST_BOILERPLATE (GstTestCameraSrc,
-    gst_test_camera_src, GstBaseCameraSrc, GST_TYPE_BASE_CAMERA_SRC);
+    gst_test_camera_src, GstBaseCameraBinSrc, GST_TYPE_BASE_CAMERA_SRC);
 
 static gboolean
-gst_test_camera_src_set_mode (GstBaseCameraSrc * src, GstCameraBinMode mode)
+gst_test_camera_src_set_mode (GstBaseCameraBinSrc * src, GstCameraBinMode mode)
 {
   GstTestCameraSrc *self = GST_TEST_CAMERA_SRC (src);
 
@@ -122,7 +122,7 @@ gst_test_camera_src_class_init (GstTestCameraSrcClass * klass)
 {
   GObjectClass *gobject_class;
   GstElementClass *gstelement_class;
-  GstBaseCameraSrcClass *gstbasecamera_class;
+  GstBaseCameraBinSrcClass *gstbasecamera_class;
 
   gobject_class = G_OBJECT_CLASS (klass);
   gstelement_class = GST_ELEMENT_CLASS (klass);
-- 
1.7.5.4

