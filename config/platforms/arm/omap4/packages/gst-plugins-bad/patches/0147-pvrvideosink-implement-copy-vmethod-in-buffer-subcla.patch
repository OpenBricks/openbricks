From c18c10d65a02839a20633b2263cca98a1c7963f5 Mon Sep 17 00:00:00 2001
From: Rob Clark <rob@ti.com>
Date: Thu, 29 Dec 2011 00:20:51 -0600
Subject: [PATCH 147/154] pvrvideosink: implement copy vmethod in buffer
 subclass

When upstream element needs a writeable buffer (ex. dvdspu), it will call
gst_buffer_make_writable(), which will use the copy vmethod to create a
copy of the buffer.  Implement copy vmethod so we don't end up having to
copy back into a bufferpool buffer in order to render.
---
 sys/pvr2d/gstpvrbufferpool.c |   44 ++++++++++++++++++++++-------------------
 sys/pvr2d/gstpvrbufferpool.h |    5 +---
 sys/pvr2d/gstpvrvideosink.c  |    5 +---
 3 files changed, 26 insertions(+), 28 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index fd81070..1e4fa8b 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -28,20 +28,6 @@ GST_DEBUG_CATEGORY_EXTERN (gst_debug_pvrvideosink);
 
 static GstBufferClass *buffer_parent_class;
 
-/* Get the original buffer, or whatever is the best output buffer.
- * Consumes the input reference, produces the output reference
- */
-GstBuffer *
-gst_ducati_buffer_get (GstDucatiBuffer * self)
-{
-  if (self->orig) {
-    // TODO copy to orig buffer.. if needed.
-    gst_buffer_unref (self->orig);
-    self->orig = NULL;
-  }
-  return GST_BUFFER (self);
-}
-
 PVR2DMEMINFO *
 gst_ducati_buffer_get_meminfo (GstDucatiBuffer * self)
 {
@@ -90,6 +76,27 @@ gst_ducati_buffer_new (GstPvrBufferPool * pool)
   return self;
 }
 
+static GstDucatiBuffer *
+gst_ducati_buffer_copy (GstDucatiBuffer * self)
+{
+  GstPvrBufferPool *pool = self->pool;
+  GstDucatiBuffer *copy;
+
+  g_return_val_if_fail (self != NULL, NULL);
+
+  GST_LOG_OBJECT (pool->element, "copy buffer %p", self);
+
+  copy = gst_pvr_bufferpool_get (pool);
+
+  memcpy (GST_BUFFER_DATA (copy),
+      GST_BUFFER_DATA (self), GST_BUFFER_SIZE (self));
+
+  gst_buffer_copy_metadata (GST_BUFFER (copy),
+      GST_BUFFER (self), GST_BUFFER_COPY_ALL);
+
+  return copy;
+
+}
 
 static void
 gst_ducati_buffer_finalize (GstDucatiBuffer * self)
@@ -145,6 +152,8 @@ gst_ducati_buffer_class_init (gpointer g_class, gpointer class_data)
 
   buffer_parent_class = g_type_class_peek_parent (g_class);
 
+  mini_object_class->copy = (GstMiniObjectCopyFunction)
+      GST_DEBUG_FUNCPTR (gst_ducati_buffer_copy);
   mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
       GST_DEBUG_FUNCPTR (gst_ducati_buffer_finalize);
 }
@@ -259,7 +268,7 @@ gst_pvr_bufferpool_stop_running (GstPvrBufferPool * self, gboolean unwrap)
 
 /** get buffer from bufferpool, allocate new buffer if needed */
 GstDucatiBuffer *
-gst_pvr_bufferpool_get (GstPvrBufferPool * self, GstBuffer * orig)
+gst_pvr_bufferpool_get (GstPvrBufferPool * self)
 {
   GstDucatiBuffer *buf = NULL;
 
@@ -272,15 +281,10 @@ gst_pvr_bufferpool_get (GstPvrBufferPool * self, GstBuffer * orig)
     buf = g_queue_pop_head (self->free_buffers);
     if (!buf)
       buf = gst_ducati_buffer_new (self);
-    buf->orig = orig;
     g_queue_push_head (self->used_buffers, buf);
   }
   GST_PVR_BUFFERPOOL_UNLOCK (self);
 
-  if (buf && orig) {
-    GST_BUFFER_TIMESTAMP (buf) = GST_BUFFER_TIMESTAMP (orig);
-    GST_BUFFER_DURATION (buf) = GST_BUFFER_DURATION (orig);
-  }
   GST_BUFFER_SIZE (buf) = self->size;
 
   return buf;
diff --git a/sys/pvr2d/gstpvrbufferpool.h b/sys/pvr2d/gstpvrbufferpool.h
index 93bb7a3..8c0f024 100644
--- a/sys/pvr2d/gstpvrbufferpool.h
+++ b/sys/pvr2d/gstpvrbufferpool.h
@@ -68,8 +68,7 @@ GstPvrBufferPool * gst_pvr_bufferpool_new (GstElement * element,
     GstCaps * caps, gint num_buffers, gint size,
     PVR2DCONTEXTHANDLE pvr_context);
 void gst_pvr_bufferpool_stop_running (GstPvrBufferPool * pool, gboolean unwrap);
-GstDucatiBuffer * gst_pvr_bufferpool_get (GstPvrBufferPool * self,
-    GstBuffer * orig);
+GstDucatiBuffer * gst_pvr_bufferpool_get (GstPvrBufferPool * self);
 
 #define GST_PVR_BUFFERPOOL_LOCK(self)     g_mutex_lock ((self)->lock)
 #define GST_PVR_BUFFERPOOL_UNLOCK(self)   g_mutex_unlock ((self)->lock)
@@ -78,12 +77,10 @@ struct _GstDucatiBuffer {
   GstBuffer parent;
 
   GstPvrBufferPool *pool; /* buffer-pool that this buffer belongs to */
-  GstBuffer       *orig;     /* original buffer, if we need to copy output */
   PVR2DMEMINFO *src_mem; /* Memory wrapped by pvr */
   gboolean wrapped;
 };
 
-GstBuffer * gst_ducati_buffer_get (GstDucatiBuffer * self);
 PVR2DMEMINFO * gst_ducati_buffer_get_meminfo (GstDucatiBuffer * self);
 
 G_END_DECLS
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index aba9d05..440944a 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -1404,15 +1404,12 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
     ret = GST_FLOW_WRONG_STATE;
     g_mutex_unlock (pvrvideosink->pool_lock);
     goto beach;
-  } else {
-    g_mutex_unlock (pvrvideosink->pool_lock);
   }
 
   GST_LOG_OBJECT (pvrvideosink,
       "a buffer of %d bytes was requested with caps %" GST_PTR_FORMAT
       " and offset %" G_GUINT64_FORMAT, size, caps, offset);
 
-  g_mutex_lock (pvrvideosink->pool_lock);
   /* initialize the buffer pool if not initialized yet */
   if (G_UNLIKELY (!pvrvideosink->buffer_pool ||
           pvrvideosink->buffer_pool->size != size)) {
@@ -1430,7 +1427,7 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
       return GST_FLOW_ERROR;
     }
   }
-  pvrvideo = gst_pvr_bufferpool_get (pvrvideosink->buffer_pool, NULL);
+  pvrvideo = gst_pvr_bufferpool_get (pvrvideosink->buffer_pool);
   g_mutex_unlock (pvrvideosink->pool_lock);
 
   *buf = GST_BUFFER_CAST (pvrvideo);
-- 
1.7.5.4

