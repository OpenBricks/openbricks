From 7c9aa09f550f53dcbf3523d56c1709c165b11720 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Tue, 30 Aug 2011 23:39:36 -0300
Subject: [PATCH 052/154] Add pvrvideosink element

---
 configure.ac                    |    7 +
 sys/Makefile.am                 |    5 +-
 sys/pvr2d/Makefile.am           |   22 ++
 sys/pvr2d/gstducati.c           |   87 ++++++
 sys/pvr2d/gstducati.h           |   45 +++
 sys/pvr2d/gstducatibufferpool.c |  239 ++++++++++++++++
 sys/pvr2d/gstducatibufferpool.h |   73 +++++
 sys/pvr2d/gstpvrvideosink.c     |  586 +++++++++++++++++++++++++++++++++++++++
 sys/pvr2d/gstpvrvideosink.h     |   96 +++++++
 9 files changed, 1159 insertions(+), 1 deletions(-)
 create mode 100644 sys/pvr2d/Makefile.am
 create mode 100644 sys/pvr2d/gstducati.c
 create mode 100644 sys/pvr2d/gstducati.h
 create mode 100644 sys/pvr2d/gstducatibufferpool.c
 create mode 100644 sys/pvr2d/gstducatibufferpool.h
 create mode 100644 sys/pvr2d/gstpvrvideosink.c
 create mode 100644 sys/pvr2d/gstpvrvideosink.h

diff --git a/configure.ac b/configure.ac
index a72e7b0..cd36a23 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1304,6 +1304,12 @@ AG_GST_CHECK_FEATURE(OPENCV, [opencv plugins], opencv, [
   AC_SUBST(OPENCV_LIBS)
 ])
 
+dnl *** PVR ***
+ PKG_CHECK_MODULES([PVR], [libtimemmgr])
+ AC_SUBST(PVR_CFLAGS)
+ AC_SUBST(PVR_LIBS)
+
+
 dnl *** rsvg ***
 translit(dnm, m, l) AM_CONDITIONAL(USE_RSVG, true)
 AG_GST_CHECK_FEATURE(RSVG, [rsvg decoder], rsvg, [
@@ -1848,6 +1854,7 @@ sys/vcd/Makefile
 sys/vdpau/Makefile
 sys/vdpau/gstvdp/Makefile
 sys/vdpau/basevideodecoder/Makefile
+sys/pvr2d/Makefile
 sys/wasapi/Makefile
 sys/wininet/Makefile
 sys/winks/Makefile
diff --git a/sys/Makefile.am b/sys/Makefile.am
index 8c161d0..c1ffad7 100644
--- a/sys/Makefile.am
+++ b/sys/Makefile.am
@@ -95,13 +95,16 @@ else
 VDPAU_DIR=
 endif
 
+
 if USE_SHM
 SHM_DIR=shm
 else
 SHM_DIR=
 endif
 
-SUBDIRS = $(ACM_DIR) $(APPLE_MEDIA_DIR) $(DECKLINK_DIR) $(DIRECTDRAW_DIR) $(DIRECTSOUND_DIR) $(DVB_DIR) $(FBDEV_DIR) $(LINSYS_DIR) $(OSX_VIDEO_DIR) $(QT_DIR) $(SHM_DIR) $(VCD_DIR) $(VDPAU_DIR) $(WININET_DIR)
+PVR_DIR=pvr2d
+
+SUBDIRS = $(ACM_DIR) $(APPLE_MEDIA_DIR) $(DECKLINK_DIR) $(DIRECTDRAW_DIR) $(DIRECTSOUND_DIR) $(DVB_DIR) $(FBDEV_DIR) $(LINSYS_DIR) $(OSX_VIDEO_DIR) $(QT_DIR) $(SHM_DIR) $(VCD_DIR) $(VDPAU_DIR) $(WININET_DIR) $(PVR_DIR)
 
 DIST_SUBDIRS = acmenc acmmp3dec applemedia decklink directdraw directsound dvb linsys fbdev dshowdecwrapper dshowsrcwrapper dshowvideosink \
 		osxvideo qtwrapper shm vcd vdpau wasapi wininet winks winscreencap
diff --git a/sys/pvr2d/Makefile.am b/sys/pvr2d/Makefile.am
new file mode 100644
index 0000000..587d985
--- /dev/null
+++ b/sys/pvr2d/Makefile.am
@@ -0,0 +1,22 @@
+plugin_LTLIBRARIES = libgstpvr.la
+
+libgstpvr_la_SOURCES = \
+	gstducati.c \
+	gstducatibufferpool.c \
+	gstpvrvideosink.c
+
+libgstpvr_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) $(GST_CFLAGS) $(PVR_CFLAGS)
+
+libgstpvr_la_LIBADD = $(GST_LIBS) $(GST_BASE_LIBS) \
+	$(GST_PLUGINS_BASE_LIBS) $(X11_LIBS) -lgstvideo-$(GST_MAJORMINOR) \
+	-lgstinterfaces-$(GST_MAJORMINOR) \
+	$(PVR_LIBS) \
+	$(LIBM)
+
+libgstpvr_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
+libgstpvr_la_LIBTOOLFLAGS = --tag=disable-static
+
+noinst_HEADERS = \
+	gstducati.h \
+	gstducatibufferpool.h \
+	gstpvrvideosink.h
diff --git a/sys/pvr2d/gstducati.c b/sys/pvr2d/gstducati.c
new file mode 100644
index 0000000..50e2954
--- /dev/null
+++ b/sys/pvr2d/gstducati.c
@@ -0,0 +1,87 @@
+/*
+ * GStreamer
+ * Copyright (c) 2010, Texas Instruments Incorporated
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include "gstducati.h"
+#include "gstpvrvideosink.h"
+
+GST_DEBUG_CATEGORY (gst_ducati_debug);
+
+static gboolean
+plugin_init (GstPlugin * plugin)
+{
+  GST_DEBUG_CATEGORY_INIT (gst_ducati_debug, "ducati", 0, "ducati");
+
+  /* TODO .. find some way to reasonably detect if the corresponding
+   * codecs are actually available..
+   */
+  return gst_element_register (plugin, "pvrvideosink", GST_RANK_PRIMARY,
+      GST_TYPE_PVRVIDEOSINK);
+}
+
+void *
+gst_ducati_alloc_1d (gint sz)
+{
+  MemAllocBlock block = {
+    .pixelFormat = PIXEL_FMT_PAGE,
+    .dim.len = sz,
+  };
+  return MemMgr_Alloc (&block, 1);
+}
+
+void *
+gst_ducati_alloc_2d (gint width, gint height, guint * sz)
+{
+  MemAllocBlock block[] = { {
+          .pixelFormat = PIXEL_FMT_8BIT,
+          .dim = {.area = {
+                      .width = width,
+                      .height = ALIGN2 (height, 1),
+                  }},
+      .stride = 4096}, {
+        .pixelFormat = PIXEL_FMT_16BIT,
+        .dim = {.area = {
+                    .width = width,
+                    .height = ALIGN2 (height, 1) / 2,
+                }},
+      .stride = 4096}
+  };
+  if (sz) {
+    *sz = (4096 * ALIGN2 (height, 1) * 3) / 2;
+  }
+  return MemMgr_Alloc (block, 2);
+}
+
+/* PACKAGE: this is usually set by autotools depending on some _INIT macro
+ * in configure.ac and then written into and defined in config.h, but we can
+ * just set it ourselves here in case someone doesn't use autotools to
+ * compile this code. GST_PLUGIN_DEFINE needs PACKAGE to be defined.
+ */
+#ifndef PACKAGE
+#  define PACKAGE "ducati"
+#endif
+
+GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
+    GST_VERSION_MINOR,
+    "ducati",
+    "Hardware accellerated codecs for OMAP4",
+    plugin_init, VERSION, "LGPL", "GStreamer", "http://gstreamer.net/")
diff --git a/sys/pvr2d/gstducati.h b/sys/pvr2d/gstducati.h
new file mode 100644
index 0000000..a90af35
--- /dev/null
+++ b/sys/pvr2d/gstducati.h
@@ -0,0 +1,45 @@
+/*
+ * GStreamer
+ * Copyright (c) 2010, Texas Instruments Incorporated
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifndef __GST_DUCATI_H__
+#define __GST_DUCATI_H__
+
+#include <stdint.h>
+#include <string.h>
+
+#include <tiler.h>
+#include <tilermem.h>
+#include <memmgr.h>
+
+#include <gst/gst.h>
+
+G_BEGIN_DECLS
+
+GST_DEBUG_CATEGORY_EXTERN (gst_ducati_debug);
+#define GST_CAT_DEFAULT gst_ducati_debug
+
+/* align x to next highest multiple of 2^n */
+#define ALIGN2(x,n)   (((x) + ((1 << (n)) - 1)) & ~((1 << (n)) - 1))
+
+void * gst_ducati_alloc_1d (gint sz);
+void * gst_ducati_alloc_2d (gint width, gint height, guint * sz);
+
+G_END_DECLS
+
+#endif /* __GST_DUCATI_H__ */
diff --git a/sys/pvr2d/gstducatibufferpool.c b/sys/pvr2d/gstducatibufferpool.c
new file mode 100644
index 0000000..cfe640a
--- /dev/null
+++ b/sys/pvr2d/gstducatibufferpool.c
@@ -0,0 +1,239 @@
+/*
+ * GStreamer
+ * Copyright (c) 2010, Texas Instruments Incorporated
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include "gstducatibufferpool.h"
+
+/*
+ * GstDucatiBuffer
+ */
+
+static GstBufferClass *buffer_parent_class;
+
+/* Get the original buffer, or whatever is the best output buffer.
+ * Consumes the input reference, produces the output reference
+ */
+GstBuffer *
+gst_ducati_buffer_get (GstDucatiBuffer * self)
+{
+  if (self->orig) {
+    // TODO copy to orig buffer.. if needed.
+    gst_buffer_unref (self->orig);
+    self->orig = NULL;
+  }
+  return GST_BUFFER (self);
+}
+
+static GstDucatiBuffer *
+gst_ducati_buffer_new (GstDucatiBufferPool * pool)
+{
+  GstDucatiBuffer *self = (GstDucatiBuffer *)
+      gst_mini_object_new (GST_TYPE_DUCATIBUFFER);
+  guint sz;
+
+  GST_LOG_OBJECT (pool->element, "creating buffer %p in pool %p", self, pool);
+
+  self->pool = (GstDucatiBufferPool *)
+      gst_mini_object_ref (GST_MINI_OBJECT (pool));
+
+  GST_BUFFER_DATA (self) =
+      gst_ducati_alloc_2d (pool->padded_width, pool->padded_height, &sz);
+  GST_BUFFER_SIZE (self) = sz;
+
+  gst_buffer_set_caps (GST_BUFFER (self), pool->caps);
+
+  return self;
+}
+
+static void
+gst_ducati_buffer_finalize (GstDucatiBuffer * self)
+{
+  GstDucatiBufferPool *pool = self->pool;
+  gboolean resuscitated = FALSE;
+
+  GST_LOG_OBJECT (pool->element, "finalizing buffer %p", self);
+
+  GST_DUCATI_BUFFERPOOL_LOCK (pool);
+  if (pool->running) {
+    resuscitated = TRUE;
+
+    GST_LOG_OBJECT (pool->element, "reviving buffer %p", self);
+    gst_buffer_ref (GST_BUFFER (self));
+
+    /* insert self into freelist */
+    self->next = pool->freelist;
+    pool->freelist = self;
+  } else {
+    GST_LOG_OBJECT (pool->element, "the pool is shutting down");
+  }
+  GST_DUCATI_BUFFERPOOL_UNLOCK (pool);
+
+  if (!resuscitated) {
+    GST_LOG_OBJECT (pool->element,
+        "buffer %p (data %p, len %u) not recovered, freeing",
+        self, GST_BUFFER_DATA (self), GST_BUFFER_SIZE (self));
+    MemMgr_Free ((void *) GST_BUFFER_DATA (self));
+    GST_BUFFER_DATA (self) = NULL;
+    gst_mini_object_unref (GST_MINI_OBJECT (pool));
+    GST_MINI_OBJECT_CLASS (buffer_parent_class)->finalize (GST_MINI_OBJECT
+        (self));
+  }
+}
+
+static void
+gst_ducati_buffer_class_init (gpointer g_class, gpointer class_data)
+{
+  GstMiniObjectClass *mini_object_class = GST_MINI_OBJECT_CLASS (g_class);
+
+  buffer_parent_class = g_type_class_peek_parent (g_class);
+
+  mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
+      GST_DEBUG_FUNCPTR (gst_ducati_buffer_finalize);
+}
+
+GType
+gst_ducati_buffer_get_type (void)
+{
+  static GType type;
+
+  if (G_UNLIKELY (type == 0)) {
+    static const GTypeInfo info = {
+      .class_size = sizeof (GstBufferClass),
+      .class_init = gst_ducati_buffer_class_init,
+      .instance_size = sizeof (GstDucatiBuffer),
+    };
+    type = g_type_register_static (GST_TYPE_BUFFER,
+        "GstDucatiBuffer", &info, 0);
+  }
+  return type;
+}
+
+/*
+ * GstDucatiBufferPool
+ */
+
+static GstMiniObjectClass *bufferpool_parent_class = NULL;
+
+/** create new bufferpool */
+GstDucatiBufferPool *
+gst_ducati_bufferpool_new (GstElement * element, GstCaps * caps)
+{
+  GstDucatiBufferPool *self = (GstDucatiBufferPool *)
+      gst_mini_object_new (GST_TYPE_DUCATIBUFFERPOOL);
+  GstStructure *s = gst_caps_get_structure (caps, 0);
+
+  self->element = gst_object_ref (element);
+  gst_structure_get_int (s, "width", &self->padded_width);
+  gst_structure_get_int (s, "height", &self->padded_height);
+  self->caps = gst_caps_ref (caps);
+  self->freelist = NULL;
+  self->lock = g_mutex_new ();
+  self->running = TRUE;
+
+  return self;
+}
+
+/** destroy existing bufferpool */
+void
+gst_ducati_bufferpool_destroy (GstDucatiBufferPool * self)
+{
+  g_return_if_fail (self);
+
+  GST_DUCATI_BUFFERPOOL_LOCK (self);
+  self->running = FALSE;
+  GST_DUCATI_BUFFERPOOL_UNLOCK (self);
+
+  GST_DEBUG_OBJECT (self->element, "destroy pool");
+
+  /* free all buffers on the freelist */
+  while (self->freelist) {
+    GstDucatiBuffer *buf = self->freelist;
+    self->freelist = buf->next;
+    gst_buffer_unref (GST_BUFFER (buf));
+  }
+
+  gst_mini_object_unref (GST_MINI_OBJECT (self));
+}
+
+/** get buffer from bufferpool, allocate new buffer if needed */
+GstDucatiBuffer *
+gst_ducati_bufferpool_get (GstDucatiBufferPool * self, GstBuffer * orig)
+{
+  GstDucatiBuffer *buf = NULL;
+
+  g_return_val_if_fail (self, NULL);
+
+  GST_DUCATI_BUFFERPOOL_LOCK (self);
+  if (self->running) {
+    /* re-use a buffer off the freelist if any are available
+     */
+    if (self->freelist) {
+      buf = self->freelist;
+      self->freelist = buf->next;
+    } else {
+      buf = gst_ducati_buffer_new (self);
+    }
+    buf->orig = orig;
+  }
+  GST_DUCATI_BUFFERPOOL_UNLOCK (self);
+
+  if (buf && orig) {
+    GST_BUFFER_TIMESTAMP (buf) = GST_BUFFER_TIMESTAMP (orig);
+    GST_BUFFER_DURATION (buf) = GST_BUFFER_DURATION (orig);
+  }
+
+  return buf;
+}
+
+static void
+gst_ducati_bufferpool_finalize (GstDucatiBufferPool * self)
+{
+  g_mutex_free (self->lock);
+  gst_caps_unref (self->caps);
+  gst_object_unref (self->element);
+  GST_MINI_OBJECT_CLASS (bufferpool_parent_class)->finalize (GST_MINI_OBJECT
+      (self));
+}
+
+static void
+gst_ducati_bufferpool_class_init (gpointer g_class, gpointer class_data)
+{
+  GstMiniObjectClass *mini_object_class = GST_MINI_OBJECT_CLASS (g_class);
+
+  bufferpool_parent_class = g_type_class_peek_parent (g_class);
+
+  mini_object_class->finalize = (GstMiniObjectFinalizeFunction)
+      GST_DEBUG_FUNCPTR (gst_ducati_bufferpool_finalize);
+}
+
+GType
+gst_ducati_bufferpool_get_type (void)
+{
+  static GType type;
+
+  if (G_UNLIKELY (type == 0)) {
+    static const GTypeInfo info = {
+      .class_size = sizeof (GstMiniObjectClass),
+      .class_init = gst_ducati_bufferpool_class_init,
+      .instance_size = sizeof (GstDucatiBufferPool),
+    };
+    type = g_type_register_static (GST_TYPE_MINI_OBJECT,
+        "GstDucatiBufferPool", &info, 0);
+  }
+  return type;
+}
diff --git a/sys/pvr2d/gstducatibufferpool.h b/sys/pvr2d/gstducatibufferpool.h
new file mode 100644
index 0000000..cbf48e9
--- /dev/null
+++ b/sys/pvr2d/gstducatibufferpool.h
@@ -0,0 +1,73 @@
+/*
+ * GStreamer
+ * Copyright (c) 2010, Texas Instruments Incorporated
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifndef __GSTDUCATIBUFFERPOOL_H__
+#define __GSTDUCATIBUFFERPOOL_H__
+
+#include "gstducati.h"
+
+G_BEGIN_DECLS
+
+GType gst_ducati_buffer_get_type (void);
+#define GST_TYPE_DUCATIBUFFER (gst_ducati_buffer_get_type())
+#define GST_IS_DUCATIBUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_DUCATIBUFFER))
+#define GST_DUCATIBUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_DUCATIBUFFER, GstDucatiBuffer))
+
+GType gst_ducati_bufferpool_get_type (void);
+#define GST_TYPE_DUCATIBUFFERPOOL (gst_ducati_bufferpool_get_type())
+#define GST_IS_DUCATIBUFFERPOOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_DUCATIBUFFERPOOL))
+#define GST_DUCATIBUFFERPOOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_DUCATIBUFFERPOOL, GstDucatiBufferPool))
+
+typedef struct _GstDucatiBufferPool GstDucatiBufferPool;
+typedef struct _GstDucatiBuffer GstDucatiBuffer;
+
+struct _GstDucatiBufferPool
+{
+  GstMiniObject parent;
+
+  /* output (padded) size including any codec padding: */
+  gint padded_width, padded_height;
+
+  GstCaps         *caps;
+  GMutex          *lock;
+  gboolean         running;  /* with lock */
+  GstElement      *element;  /* the element that owns us.. */
+  GstDucatiBuffer *freelist; /* list of available buffers */
+};
+
+GstDucatiBufferPool * gst_ducati_bufferpool_new (GstElement * element, GstCaps * caps);
+void gst_ducati_bufferpool_destroy (GstDucatiBufferPool * pool);
+GstDucatiBuffer * gst_ducati_bufferpool_get (GstDucatiBufferPool * self, GstBuffer * orig);
+
+#define GST_DUCATI_BUFFERPOOL_LOCK(self)     g_mutex_lock ((self)->lock)
+#define GST_DUCATI_BUFFERPOOL_UNLOCK(self)   g_mutex_unlock ((self)->lock)
+
+struct _GstDucatiBuffer {
+  GstBuffer parent;
+
+  GstDucatiBufferPool *pool; /* buffer-pool that this buffer belongs to */
+  GstBuffer       *orig;     /* original buffer, if we need to copy output */
+  GstDucatiBuffer *next;     /* next in freelist, if not in use */
+};
+
+GstBuffer * gst_ducati_buffer_get (GstDucatiBuffer * self);
+
+G_END_DECLS
+
+#endif /* __GSTDUCATIBUFFERPOOL_H__ */
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
new file mode 100644
index 0000000..56b41b5
--- /dev/null
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -0,0 +1,586 @@
+/* GStreamer
+ *
+ * Copyright (C) 2011 Collabora Ltda
+ * Copyright (C) 2011 Texas Instruments
+ *  @author: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+/* Object header */
+#include "gstpvrvideosink.h"
+
+#include "gstducatibufferpool.h"
+#include <gst/video/gstvideosink.h>
+#include <gst/interfaces/xoverlay.h>
+
+/* Debugging category */
+#include <gst/gstinfo.h>
+
+GST_DEBUG_CATEGORY_EXTERN (gst_debug_pvrvideosink);
+
+static void gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink);
+static GstFlowReturn gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink,
+    guint64 offset, guint size, GstCaps * caps, GstBuffer ** buf);
+
+static GstStaticPadTemplate gst_pvrvideosink_sink_template_factory =
+GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("video/x-raw-yuv-strided, "
+        "framerate = (fraction) [ 0, MAX ], "
+        "width = (int) [ 1, MAX ], " "height = (int) [ 1, MAX ]")
+    );
+
+enum
+{
+  PROP_0,
+  PROP_FORCE_ASPECT_RATIO,
+  PROP_WINDOW_WIDTH,
+  PROP_WINDOW_HEIGHT
+};
+
+static GstVideoSinkClass *parent_class = NULL;
+
+/* ============================================================= */
+/*                                                               */
+/*                       Private Methods                         */
+/*                                                               */
+/* ============================================================= */
+
+/* pvrvideo buffers */
+
+#define GST_TYPE_PVRVIDEO_BUFFER (gst_pvrvideo_buffer_get_type())
+
+#define GST_IS_PVRVIDEO_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PVRVIDEO_BUFFER))
+#define GST_PVRVIDEO_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBuffer))
+#define GST_PVRVIDEO_BUFFER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBufferClass))
+
+
+/* Element stuff */
+
+static gboolean
+gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
+{
+  GstPVRVideoSink *pvrvideosink;
+  gboolean ret = TRUE;
+  GstStructure *structure;
+  gint new_width, new_height;
+  const GValue *fps;
+
+  pvrvideosink = GST_PVRVIDEOSINK (bsink);
+
+  GST_DEBUG_OBJECT (pvrvideosink,
+      "sinkconnect possible caps %" GST_PTR_FORMAT " with given caps %"
+      GST_PTR_FORMAT, pvrvideosink->caps, caps);
+
+  /* We intersect those caps with our template to make sure they are correct */
+  if (!gst_caps_can_intersect (pvrvideosink->caps, caps))
+    goto incompatible_caps;
+
+  structure = gst_caps_get_structure (caps, 0);
+
+  ret &= gst_structure_get_int (structure, "width", &new_width);
+  ret &= gst_structure_get_int (structure, "height", &new_height);
+  fps = gst_structure_get_value (structure, "framerate");
+  ret &= (fps != NULL);
+  if (!ret) {
+    GST_ERROR_OBJECT (pvrvideosink, "problem at parsing caps");
+    return FALSE;
+  }
+
+  pvrvideosink->fps_n = gst_value_get_fraction_numerator (fps);
+  pvrvideosink->fps_d = gst_value_get_fraction_denominator (fps);
+
+  return TRUE;
+
+  /* ERRORS */
+incompatible_caps:
+  {
+    GST_ERROR_OBJECT (pvrvideosink, "caps incompatible");
+    return FALSE;
+  }
+}
+
+static GstCaps *
+gst_pvrvideosink_getcaps (GstBaseSink * bsink)
+{
+  GstPVRVideoSink *pvrvideosink;
+  GstCaps *caps;
+
+  pvrvideosink = GST_PVRVIDEOSINK (bsink);
+
+  if (pvrvideosink->caps)
+    return gst_caps_ref (pvrvideosink->caps);
+
+  caps = gst_caps_copy (gst_pad_get_pad_template_caps (GST_BASE_SINK
+          (pvrvideosink)->sinkpad));
+  return caps;
+}
+
+static GstStateChangeReturn
+gst_pvrvideosink_change_state (GstElement * element, GstStateChange transition)
+{
+  GstPVRVideoSink *pvrvideosink;
+  GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
+
+  pvrvideosink = GST_PVRVIDEOSINK (element);
+
+  switch (transition) {
+    case GST_STATE_CHANGE_NULL_TO_READY:
+      break;
+    case GST_STATE_CHANGE_READY_TO_PAUSED:
+      break;
+    case GST_STATE_CHANGE_PAUSED_TO_PLAYING:
+      break;
+    default:
+      break;
+  }
+
+  ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+
+  switch (transition) {
+    case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
+      break;
+    case GST_STATE_CHANGE_PAUSED_TO_READY:
+      pvrvideosink->fps_n = 0;
+      pvrvideosink->fps_d = 1;
+      break;
+    case GST_STATE_CHANGE_READY_TO_NULL:
+      gst_pvrvideosink_reset (pvrvideosink);
+      break;
+    default:
+      break;
+  }
+
+  return ret;
+}
+
+static void
+gst_pvrvideosink_get_times (GstBaseSink * bsink, GstBuffer * buf,
+    GstClockTime * start, GstClockTime * end)
+{
+  GstPVRVideoSink *pvrvideosink;
+
+  pvrvideosink = GST_PVRVIDEOSINK (bsink);
+
+  if (GST_BUFFER_TIMESTAMP_IS_VALID (buf)) {
+    *start = GST_BUFFER_TIMESTAMP (buf);
+    if (GST_BUFFER_DURATION_IS_VALID (buf)) {
+      *end = *start + GST_BUFFER_DURATION (buf);
+    } else {
+      if (pvrvideosink->fps_n > 0) {
+        *end = *start +
+            gst_util_uint64_scale_int (GST_SECOND, pvrvideosink->fps_d,
+            pvrvideosink->fps_n);
+      }
+    }
+  }
+}
+
+static GstFlowReturn
+gst_pvrvideosink_show_frame (GstVideoSink * vsink, GstBuffer * buf)
+{
+  GstPVRVideoSink *pvrvideosink;
+  GstBuffer *newbuf = NULL;
+  g_return_val_if_fail (buf != NULL, GST_FLOW_ERROR);
+
+  pvrvideosink = GST_PVRVIDEOSINK (vsink);
+
+  GST_DEBUG_OBJECT (pvrvideosink, "render buffer: %p", buf);
+
+  if (!GST_IS_BUFFER (buf)) {
+    GstFlowReturn ret;
+
+    /* special case check for sub-buffers:  In certain cases, places like
+     * GstBaseTransform, which might check that the buffer is writable
+     * before copying metadata, timestamp, and such, will find that the
+     * buffer has more than one reference to it.  In these cases, they
+     * will create a sub-buffer with an offset=0 and length equal to the
+     * original buffer size.
+     *
+     * This could happen in two scenarios: (1) a tee in the pipeline, and
+     * (2) because the refcnt is incremented in gst_mini_object_free()
+     * before the finalize function is called, and decremented after it
+     * returns..  but returning this buffer to the buffer pool in the
+     * finalize function, could wake up a thread blocked in _buffer_alloc()
+     * which could run and get a buffer w/ refcnt==2 before the thread
+     * originally unref'ing the buffer returns from finalize function and
+     * decrements the refcnt back to 1!
+     */
+    if (buf->parent &&
+        (GST_BUFFER_DATA (buf) == GST_BUFFER_DATA (buf->parent)) &&
+        (GST_BUFFER_SIZE (buf) == GST_BUFFER_SIZE (buf->parent))) {
+      GST_DEBUG_OBJECT (pvrvideosink, "I have a sub-buffer!");
+      return gst_pvrvideosink_show_frame (vsink, buf->parent);
+    }
+
+    GST_DEBUG_OBJECT (pvrvideosink,
+        "slow-path.. I got a %s so I need to memcpy",
+        g_type_name (G_OBJECT_TYPE (buf)));
+
+    ret = gst_pvrvideosink_buffer_alloc (GST_BASE_SINK (vsink),
+        GST_BUFFER_OFFSET (buf), GST_BUFFER_SIZE (buf), GST_BUFFER_CAPS (buf),
+        &newbuf);
+
+    if (GST_FLOW_OK != ret) {
+      GST_DEBUG_OBJECT (pvrvideosink, "dropping frame!!");
+      return GST_FLOW_OK;
+    }
+
+    memcpy (GST_BUFFER_DATA (newbuf),
+        GST_BUFFER_DATA (buf),
+        MIN (GST_BUFFER_SIZE (newbuf), GST_BUFFER_SIZE (buf)));
+
+    GST_DEBUG_OBJECT (pvrvideosink, "render copied buffer: %p", newbuf);
+
+    buf = newbuf;
+  }
+
+  if (!gst_ducati_bufferpool_get (pvrvideosink->buffer_pool, buf)) {
+    return GST_FLOW_ERROR;
+  }
+
+  if (!newbuf) {
+    gst_buffer_ref (buf);
+  }
+
+  return GST_FLOW_OK;
+}
+
+
+/* Buffer management
+ *
+ * The buffer_alloc function must either return a buffer with given size and
+ * caps or create a buffer with different caps attached to the buffer. This
+ * last option is called reverse negotiation, ie, where the sink suggests a
+ * different format from the upstream peer. 
+ *
+ * We try to do reverse negotiation when our geometry changes and we like a
+ * resized buffer.
+ */
+static GstFlowReturn
+gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
+    GstCaps * caps, GstBuffer ** buf)
+{
+  GstPVRVideoSink *pvrvideosink;
+  GstDucatiBuffer *pvrvideo = NULL;
+  GstStructure *structure = NULL;
+  GstFlowReturn ret = GST_FLOW_OK;
+  gint width, height;
+  GstVideoRectangle src;
+
+  pvrvideosink = GST_PVRVIDEOSINK (bsink);
+
+  if (G_UNLIKELY (!caps)) {
+    GST_WARNING_OBJECT (pvrvideosink,
+        "have no caps, doing fallback allocation");
+    *buf = NULL;
+    ret = GST_FLOW_OK;
+    goto beach;
+  }
+
+  GST_LOG_OBJECT (pvrvideosink,
+      "a buffer of %d bytes was requested with caps %" GST_PTR_FORMAT
+      " and offset %" G_GUINT64_FORMAT, size, caps, offset);
+
+  /* get struct to see what is requested */
+  structure = gst_caps_get_structure (caps, 0);
+  if (!gst_structure_get_int (structure, "width", &width) ||
+      !gst_structure_get_int (structure, "height", &height)) {
+    GST_WARNING_OBJECT (pvrvideosink, "invalid caps for buffer allocation %"
+        GST_PTR_FORMAT, caps);
+    ret = GST_FLOW_NOT_NEGOTIATED;
+    goto beach;
+  }
+
+  src.w = width;
+  src.h = height;
+
+  /* initialize the buffer pool if not initialized yet (first buffer): */
+  if (G_UNLIKELY (!pvrvideosink->buffer_pool)) {
+
+    /* set_caps() might not be called yet.. so just to make sure: */
+    if (!gst_pvrvideosink_setcaps (bsink, caps)) {
+      return GST_FLOW_ERROR;
+    }
+
+    if (!(pvrvideosink->buffer_pool =
+            gst_ducati_bufferpool_new (GST_ELEMENT (pvrvideosink), caps))) {
+      return GST_FLOW_ERROR;
+    }
+  }
+  pvrvideo = gst_ducati_bufferpool_get (pvrvideosink->buffer_pool, NULL);
+
+  *buf = GST_BUFFER_CAST (pvrvideo);
+  g_message ("alloc buffer ok");
+
+beach:
+  return ret;
+}
+
+/* Interfaces stuff */
+
+static gboolean
+gst_pvrvideosink_interface_supported (GstImplementsInterface * iface,
+    GType type)
+{
+  if (type == GST_TYPE_X_OVERLAY)
+    return TRUE;
+  else
+    return FALSE;
+}
+
+static void
+gst_pvrvideosink_interface_init (GstImplementsInterfaceClass * klass)
+{
+  klass->supported = gst_pvrvideosink_interface_supported;
+}
+
+static void
+gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
+    gboolean handle_events)
+{
+#if 0
+  GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (overlay);
+
+  pvrvideosink->handle_events = handle_events;
+
+  g_mutex_lock (pvrvideosink->flow_lock);
+
+  if (G_UNLIKELY (!pvrvideosink->xwindow)) {
+    g_mutex_unlock (pvrvideosink->flow_lock);
+    return;
+  }
+
+  g_mutex_lock (pvrvideosink->x_lock);
+
+  if (handle_events) {
+    if (pvrvideosink->xwindow->internal) {
+      XSelectInput (pvrvideosink->xcontext->disp, pvrvideosink->xwindow->win,
+          ExposureMask | StructureNotifyMask | PointerMotionMask |
+          KeyPressMask | KeyReleaseMask | ButtonPressMask | ButtonReleaseMask);
+    } else {
+      XSelectInput (pvrvideosink->xcontext->disp, pvrvideosink->xwindow->win,
+          ExposureMask | StructureNotifyMask | PointerMotionMask |
+          KeyPressMask | KeyReleaseMask);
+    }
+  } else {
+    XSelectInput (pvrvideosink->xcontext->disp, pvrvideosink->xwindow->win, 0);
+  }
+
+  g_mutex_unlock (pvrvideosink->x_lock);
+
+  g_mutex_unlock (pvrvideosink->flow_lock);
+#endif
+}
+
+static void
+gst_pvrvideosink_xoverlay_init (GstXOverlayClass * iface)
+{
+  iface->handle_events = gst_pvrvideosink_set_event_handling;
+}
+
+/* =========================================== */
+/*                                             */
+/*              Init & Class init              */
+/*                                             */
+/* =========================================== */
+
+static void
+gst_pvrvideosink_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstPVRVideoSink *pvrvideosink;
+
+  g_return_if_fail (GST_IS_PVRVIDEOSINK (object));
+
+  pvrvideosink = GST_PVRVIDEOSINK (object);
+
+  switch (prop_id) {
+    case PROP_FORCE_ASPECT_RATIO:
+      pvrvideosink->keep_aspect = g_value_get_boolean (value);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_pvrvideosink_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstPVRVideoSink *pvrvideosink;
+
+  g_return_if_fail (GST_IS_PVRVIDEOSINK (object));
+
+  pvrvideosink = GST_PVRVIDEOSINK (object);
+
+  switch (prop_id) {
+    case PROP_FORCE_ASPECT_RATIO:
+      g_value_set_boolean (value, pvrvideosink->keep_aspect);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
+{
+  GST_OBJECT_LOCK (pvrvideosink);
+  pvrvideosink->running = FALSE;
+  GST_OBJECT_UNLOCK (pvrvideosink);
+
+  if (pvrvideosink->buffer_pool) {
+    gst_ducati_bufferpool_destroy (pvrvideosink->buffer_pool);
+    pvrvideosink->buffer_pool = NULL;
+  }
+}
+
+static void
+gst_pvrvideosink_finalize (GObject * object)
+{
+  GstPVRVideoSink *pvrvideosink;
+
+  pvrvideosink = GST_PVRVIDEOSINK (object);
+
+  gst_pvrvideosink_reset (pvrvideosink);
+
+  if (pvrvideosink->flow_lock) {
+    g_mutex_free (pvrvideosink->flow_lock);
+    pvrvideosink->flow_lock = NULL;
+  }
+  if (pvrvideosink->pool_lock) {
+    g_mutex_free (pvrvideosink->pool_lock);
+    pvrvideosink->pool_lock = NULL;
+  }
+
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+static void
+gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
+{
+  pvrvideosink->running = FALSE;
+
+  pvrvideosink->fps_n = 0;
+  pvrvideosink->fps_d = 1;
+
+  pvrvideosink->flow_lock = g_mutex_new ();
+  pvrvideosink->pool_lock = g_mutex_new ();
+  pvrvideosink->buffer_pool = NULL;
+
+  pvrvideosink->keep_aspect = FALSE;
+}
+
+static void
+gst_pvrvideosink_base_init (gpointer g_class)
+{
+  GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
+
+  gst_element_class_set_details_simple (element_class,
+      "PVR Video sink", "Sink/Video",
+      "A PVR videosink",
+      "Luciana Fujii Pontello <luciana.fujii@collabora.co.uk");
+
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&gst_pvrvideosink_sink_template_factory));
+}
+
+static void
+gst_pvrvideosink_class_init (GstPVRVideoSinkClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstElementClass *gstelement_class;
+  GstBaseSinkClass *gstbasesink_class;
+  GstVideoSinkClass *videosink_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
+  gstbasesink_class = (GstBaseSinkClass *) klass;
+  videosink_class = (GstVideoSinkClass *) klass;
+
+  parent_class = g_type_class_peek_parent (klass);
+
+  gobject_class->finalize = gst_pvrvideosink_finalize;
+  gobject_class->set_property = gst_pvrvideosink_set_property;
+  gobject_class->get_property = gst_pvrvideosink_get_property;
+
+  g_object_class_install_property (gobject_class, PROP_FORCE_ASPECT_RATIO,
+      g_param_spec_boolean ("force-aspect-ratio", "Force aspect ratio",
+          "When enabled, reverse caps negotiation (scaling) will respect "
+          "original aspect ratio", FALSE,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  gstelement_class->change_state = gst_pvrvideosink_change_state;
+
+  gstbasesink_class->set_caps = GST_DEBUG_FUNCPTR (gst_pvrvideosink_setcaps);
+  gstbasesink_class->get_caps = GST_DEBUG_FUNCPTR (gst_pvrvideosink_getcaps);
+  gstbasesink_class->buffer_alloc =
+      GST_DEBUG_FUNCPTR (gst_pvrvideosink_buffer_alloc);
+  gstbasesink_class->get_times = GST_DEBUG_FUNCPTR (gst_pvrvideosink_get_times);
+
+  videosink_class->show_frame = GST_DEBUG_FUNCPTR (gst_pvrvideosink_show_frame);
+}
+
+/* ============================================================= */
+/*                                                               */
+/*                       Public Methods                          */
+/*                                                               */
+/* ============================================================= */
+
+/* =========================================== */
+/*                                             */
+/*          Object typing & Creation           */
+/*                                             */
+/* =========================================== */
+
+GType
+gst_pvrvideosink_get_type (void)
+{
+  static GType pvrvideosink_type = 0;
+
+  if (!pvrvideosink_type) {
+    static const GTypeInfo pvrvideosink_info = {
+      sizeof (GstPVRVideoSinkClass),
+      gst_pvrvideosink_base_init,
+      NULL,
+      (GClassInitFunc) gst_pvrvideosink_class_init,
+      NULL,
+      NULL,
+      sizeof (GstPVRVideoSink), 0, (GInstanceInitFunc) gst_pvrvideosink_init,
+    };
+    static const GInterfaceInfo iface_info = {
+      (GInterfaceInitFunc) gst_pvrvideosink_interface_init, NULL, NULL,
+    };
+    static const GInterfaceInfo overlay_info = {
+      (GInterfaceInitFunc) gst_pvrvideosink_xoverlay_init, NULL, NULL,
+    };
+
+    pvrvideosink_type = g_type_register_static (GST_TYPE_VIDEO_SINK,
+        "GstPVRVideoSink", &pvrvideosink_info, 0);
+
+    g_type_add_interface_static (pvrvideosink_type,
+        GST_TYPE_IMPLEMENTS_INTERFACE, &iface_info);
+    g_type_add_interface_static (pvrvideosink_type, GST_TYPE_X_OVERLAY,
+        &overlay_info);
+  }
+
+  return pvrvideosink_type;
+}
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
new file mode 100644
index 0000000..73aa32d
--- /dev/null
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -0,0 +1,96 @@
+/* GStreamer
+ *
+ * Copyright (C) 2011 - Collabora Ltda
+ * Copyright (C) 2011 - Texas Instruments
+ *  @author: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#ifndef __GST_PVRVIDEOSINK_H__
+#define __GST_PVRVIDEOSINK_H__
+
+#include <gst/video/gstvideosink.h>
+#include "gstducatibufferpool.h"
+
+#include <string.h>
+#include <math.h>
+
+G_BEGIN_DECLS
+#define GST_TYPE_PVRVIDEOSINK (gst_pvrvideosink_get_type())
+#define GST_PVRVIDEOSINK(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PVRVIDEOSINK, GstPVRVideoSink))
+#define GST_PVRVIDEOSINK_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass), GST_TYPE_PVRVIDEOSINK, GstPVRVideoSinkClass))
+#define GST_IS_PVRVIDEOSINK(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PVRVIDEOSINK))
+#define GST_IS_PVRVIDEOSINK_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass), GST_TYPE_PVRVIDEOSINK))
+typedef struct _GstXContext GstXContext;
+typedef struct _GstXWindow GstXWindow;
+
+typedef struct _GstPVRVideoBuffer GstPVRVideoBuffer;
+typedef struct _GstPVRVideoBufferClass GstPVRVideoBufferClass;
+
+typedef struct _GstPVRVideoSink GstPVRVideoSink;
+typedef struct _GstPVRVideoSinkClass GstPVRVideoSinkClass;
+
+
+/**
+ * GstPVRVideoSink:
+ * @running: used to inform @event_thread if it should run/shutdown
+ * @fps_n: the framerate fraction numerator
+ * @fps_d: the framerate fraction denominator
+ * @flow_lock: used to protect data flow routines from external calls such as
+ * events from @event_thread or methods from the #GstXOverlay interface
+ * @pool_lock: used to protect the buffer pool
+ * @buffer_pool: a list of #GstPVRVideoBuffer that could be reused at next buffer
+ * allocation call
+ * @keep_aspect: used to remember if reverse negotiation scaling should respect
+ * aspect ratio
+ *
+ * The #GstPVRVideoSink data structure.
+ */
+struct _GstPVRVideoSink
+{
+  /* Our element stuff */
+  GstVideoSink videosink;
+
+  gboolean running;
+
+  /* Framerate numerator and denominator */
+  gint fps_n;
+  gint fps_d;
+
+  GMutex *flow_lock;
+
+  GMutex *pool_lock;
+  GstDucatiBufferPool *buffer_pool;
+
+  gboolean keep_aspect;
+
+  GstCaps *caps;
+};
+
+struct _GstPVRVideoSinkClass
+{
+  GstVideoSinkClass parent_class;
+};
+
+GType gst_pvrvideosink_get_type (void);
+
+G_END_DECLS
+#endif /* __GST_PVRVIDEOSINK_H__ */
-- 
1.7.5.4

