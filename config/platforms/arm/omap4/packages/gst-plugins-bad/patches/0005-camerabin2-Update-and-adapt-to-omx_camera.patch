From 9899c05de4a43584f8a15cb0b7cbfeb3b5c649d6 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Fri, 24 Jun 2011 18:37:00 -0300
Subject: [PATCH 005/154] camerabin2: Update and adapt to omx_camera

Rebased by Luciana Fujii <luciana.fujii@collabora.co.uk>
---
 gst-libs/gst/Makefile.am                        |    1 -
 gst/camerabin2/gstcamerabin2.c                  |  204 ++++++++++++++---------
 gst/camerabin2/gstcamerabin2.h                  |   12 +-
 gst/camerabin2/gstplugin.c                      |    3 +
 gst/camerabin2/gstviewfinderbin.c               |    6 +-
 tests/check/Makefile.am                         |    8 +-
 tests/examples/camerabin2/gst-camerabin2-test.c |   44 ++++--
 7 files changed, 173 insertions(+), 105 deletions(-)

diff --git a/gst-libs/gst/Makefile.am b/gst-libs/gst/Makefile.am
index f58086c..a760e99 100644
--- a/gst-libs/gst/Makefile.am
+++ b/gst-libs/gst/Makefile.am
@@ -6,4 +6,3 @@ SUBDIRS = interfaces signalprocessor video $(EXPERIMENTAL_LIBS)
 
 noinst_HEADERS = gst-i18n-plugin.h gettext.h
 DIST_SUBDIRS = interfaces signalprocessor video basecamerabinsrc
-
diff --git a/gst/camerabin2/gstcamerabin2.c b/gst/camerabin2/gstcamerabin2.c
index 315a37e..b4f2de6 100644
--- a/gst/camerabin2/gstcamerabin2.c
+++ b/gst/camerabin2/gstcamerabin2.c
@@ -110,8 +110,7 @@ enum
   PROP_AUDIO_CAPTURE_CAPS,
   PROP_ZOOM,
   PROP_MAX_ZOOM,
-  PROP_IMAGE_CAPTURE_ENCODER,
-  PROP_IMAGE_CAPTURE_MUXER,
+  PROP_IMAGE_ENCODING_PROFILE,
   PROP_IDLE
 };
 
@@ -284,14 +283,14 @@ gst_camera_bin_src_notify_readyforcapture (GObject * obj, GParamSpec * pspec,
   GstCameraBin *camera = GST_CAMERA_BIN_CAST (user_data);
   gboolean ready;
 
-  if (camera->mode == MODE_VIDEO) {
-    g_object_get (camera->src, "ready-for-capture", &ready, NULL);
-    if (!ready) {
-      gchar *location;
+  g_object_get (camera->src, "ready-for-capture", &ready, NULL);
+  if (!ready) {
+    gchar *location = NULL;
 
+    if (camera->mode == MODE_VIDEO) {
       /* a video recording is about to start, we reset the videobin to clear eos/flushing state
        * also need to clean the queue ! capsfilter before it */
-      gst_element_set_state (camera->encodebin, GST_STATE_NULL);
+      gst_element_set_state (camera->video_encodebin, GST_STATE_NULL);
       gst_element_set_state (camera->videosink, GST_STATE_NULL);
       gst_element_set_state (camera->videobin_queue, GST_STATE_NULL);
       gst_element_set_state (camera->videobin_capsfilter, GST_STATE_NULL);
@@ -300,11 +299,24 @@ gst_camera_bin_src_notify_readyforcapture (GObject * obj, GParamSpec * pspec,
       GST_DEBUG_OBJECT (camera, "Switching videobin location to %s", location);
       g_object_set (camera->videosink, "location", location, NULL);
       g_free (location);
-      gst_element_set_state (camera->encodebin, GST_STATE_PLAYING);
+      gst_element_set_state (camera->video_encodebin, GST_STATE_PLAYING);
       gst_element_set_state (camera->videosink, GST_STATE_PLAYING);
       gst_element_set_state (camera->videobin_capsfilter, GST_STATE_PLAYING);
       gst_element_set_state (camera->videobin_queue, GST_STATE_PLAYING);
+    } else if (camera->mode == MODE_IMAGE) {
+      gst_element_set_state (camera->image_encodebin, GST_STATE_NULL);
+      gst_element_set_state (camera->imagesink, GST_STATE_NULL);
+      gst_element_set_state (camera->imagebin_queue, GST_STATE_NULL);
+      gst_element_set_state (camera->imagebin_capsfilter, GST_STATE_NULL);
+      GST_DEBUG_OBJECT (camera, "Switching imagebin location to %s", location);
+      g_object_set (camera->imagesink, "location", camera->image_location,
+          NULL);
+      gst_element_set_state (camera->image_encodebin, GST_STATE_PLAYING);
+      gst_element_set_state (camera->imagesink, GST_STATE_PLAYING);
+      gst_element_set_state (camera->imagebin_capsfilter, GST_STATE_PLAYING);
+      gst_element_set_state (camera->imagebin_queue, GST_STATE_PLAYING);
     }
+
   }
 }
 
@@ -345,9 +357,9 @@ gst_camera_bin_dispose (GObject * object)
   if (camerabin->viewfinderbin_capsfilter)
     gst_object_unref (camerabin->viewfinderbin_capsfilter);
 
-  if (camerabin->encodebin_signal_id)
-    g_signal_handler_disconnect (camerabin->encodebin,
-        camerabin->encodebin_signal_id);
+  if (camerabin->video_encodebin_signal_id)
+    g_signal_handler_disconnect (camerabin->video_encodebin,
+        camerabin->video_encodebin_signal_id);
 
   if (camerabin->videosink_probe) {
     GstPad *pad = gst_element_get_static_pad (camerabin->videosink, "sink");
@@ -357,15 +369,20 @@ gst_camera_bin_dispose (GObject * object)
 
   if (camerabin->videosink)
     gst_object_unref (camerabin->videosink);
-  if (camerabin->encodebin)
-    gst_object_unref (camerabin->encodebin);
+  if (camerabin->video_encodebin)
+    gst_object_unref (camerabin->video_encodebin);
   if (camerabin->videobin_queue)
     gst_object_unref (camerabin->videobin_queue);
   if (camerabin->videobin_capsfilter)
     gst_object_unref (camerabin->videobin_capsfilter);
 
-  if (camerabin->imagebin)
-    gst_object_unref (camerabin->imagebin);
+  if (camerabin->image_encodebin_signal_id)
+    g_signal_handler_disconnect (camerabin->image_encodebin,
+        camerabin->image_encodebin_signal_id);
+  if (camerabin->imagesink)
+    gst_object_unref (camerabin->imagesink);
+  if (camerabin->image_encodebin)
+    gst_object_unref (camerabin->image_encodebin);
   if (camerabin->imagebin_queue)
     gst_object_unref (camerabin->imagebin_queue);
   if (camerabin->imagebin_capsfilter)
@@ -387,6 +404,8 @@ gst_camera_bin_dispose (GObject * object)
 
   if (camerabin->video_profile)
     gst_encoding_profile_unref (camerabin->video_profile);
+  if (camerabin->image_profile)
+    gst_encoding_profile_unref (camerabin->image_profile);
 
   if (camerabin->preview_caps)
     gst_caps_replace (&camerabin->preview_caps, NULL);
@@ -591,15 +610,11 @@ gst_camera_bin_class_init (GstCameraBinClass * klass)
    *   it autoplugs a videorate that ony starts outputing buffers after
    *   getting the 2nd buffer.
    */
-  g_object_class_install_property (object_class, PROP_IMAGE_CAPTURE_ENCODER,
-      g_param_spec_object ("image-capture-encoder", "Image capture encoder",
-          "The image encoder element to be used on image captures.",
-          GST_TYPE_ELEMENT, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
-
-  g_object_class_install_property (object_class, PROP_IMAGE_CAPTURE_MUXER,
-      g_param_spec_object ("image-capture-muxer", "Image capture encoder",
-          "The image encoder element to be used on image captures.",
-          GST_TYPE_ELEMENT, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (object_class, PROP_IMAGE_ENCODING_PROFILE,
+      gst_param_spec_mini_object ("image-profile", "Image Profile",
+          "The GstEncodingProfile to use for image captures.",
+          GST_TYPE_ENCODING_PROFILE,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   g_object_class_install_property (object_class, PROP_IDLE,
       g_param_spec_boolean ("idle", "Idle",
@@ -654,7 +669,6 @@ gst_camera_bin_init (GstCameraBin * camera)
   camera->video_location = g_strdup (DEFAULT_VID_LOCATION);
   camera->image_location = g_strdup (DEFAULT_IMG_LOCATION);
   camera->viewfinderbin = gst_element_factory_make ("viewfinderbin", "vf-bin");
-  camera->imagebin = gst_element_factory_make ("imagecapturebin", "imagebin");
   camera->zoom = DEFAULT_ZOOM;
   camera->max_zoom = MAX_ZOOM;
 
@@ -799,12 +813,12 @@ encodebin_element_added (GstElement * encodebin, GstElement * new_element,
 #define VIDEO_PAD 1
 #define AUDIO_PAD 2
 static GstPad *
-encodebin_find_pad (GstCameraBin * camera, gint pad_type)
+encodebin_find_pad (GstCameraBin * camera, GstElement * encodebin,
+    gint pad_type)
 {
   GstPad *pad = NULL;
   GstIterator *iter;
   gboolean done;
-  GstElement *encodebin = camera->encodebin;
 
   GST_DEBUG_OBJECT (camera, "Looking at encodebin pads, searching for %s pad",
       VIDEO_PAD ? "video" : "audio");
@@ -887,15 +901,15 @@ gst_camera_bin_video_profile_has_audio (GstCameraBin * camera)
 }
 
 static GstPadLinkReturn
-gst_camera_bin_link_encodebin (GstCameraBin * camera, GstElement * element,
-    gint padtype)
+gst_camera_bin_link_encodebin (GstCameraBin * camera, GstElement * encodebin,
+    GstElement * element, gint padtype)
 {
   GstPadLinkReturn ret;
   GstPad *srcpad;
   GstPad *sinkpad = NULL;
 
   srcpad = gst_element_get_static_pad (element, "src");
-  sinkpad = encodebin_find_pad (camera, padtype);
+  sinkpad = encodebin_find_pad (camera, encodebin, padtype);
 
   g_assert (srcpad != NULL);
   g_assert (sinkpad != NULL);
@@ -942,9 +956,10 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
     /* TODO check that elements created in _init were really created */
     /* TODO add proper missing plugin error handling */
 
-    camera->encodebin = gst_element_factory_make ("encodebin", NULL);
-    camera->encodebin_signal_id = g_signal_connect (camera->encodebin,
-        "element-added", (GCallback) encodebin_element_added, camera);
+    camera->video_encodebin = gst_element_factory_make ("encodebin", NULL);
+    camera->video_encodebin_signal_id =
+        g_signal_connect (camera->video_encodebin, "element-added",
+        (GCallback) encodebin_element_added, camera);
 
     camera->videosink =
         gst_element_factory_make ("filesink", "videobin-filesink");
@@ -957,31 +972,50 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
 
     if (camera->video_profile == NULL) {
       GstEncodingContainerProfile *prof;
+      GstEncodingVideoProfile *video_prof;
       GstCaps *caps;
 
-      caps = gst_caps_new_simple ("application/ogg", NULL);
-      prof = gst_encoding_container_profile_new ("ogg", "theora+vorbis+ogg",
+      caps = gst_caps_new_simple ("video/x-msvideo", NULL);
+      prof = gst_encoding_container_profile_new ("avi", "mpeg4+avi",
           caps, NULL);
       gst_caps_unref (caps);
 
-      caps = gst_caps_new_simple ("video/x-theora", NULL);
+      caps = gst_caps_new_simple ("video/mpeg",
+          "mpegversion", G_TYPE_INT, 4,
+          "systemstream", G_TYPE_BOOLEAN, FALSE, NULL);
+      video_prof = gst_encoding_video_profile_new (caps, NULL, NULL, 1);
+      gst_encoding_video_profile_set_variableframerate (video_prof, TRUE);
       if (!gst_encoding_container_profile_add_profile (prof,
-              (GstEncodingProfile *) gst_encoding_video_profile_new (caps,
-                  NULL, NULL, 1))) {
+              (GstEncodingProfile *) video_prof)) {
         GST_WARNING_OBJECT (camera, "Failed to create encoding profiles");
       }
       gst_caps_unref (caps);
 
-      caps = gst_caps_new_simple ("audio/x-vorbis", NULL);
-      if (!gst_encoding_container_profile_add_profile (prof,
-              (GstEncodingProfile *) gst_encoding_audio_profile_new (caps,
-                  NULL, NULL, 1))) {
-        GST_WARNING_OBJECT (camera, "Failed to create encoding profiles");
-      }
+      camera->video_profile = (GstEncodingProfile *) prof;
+      camera->video_profile_switch = TRUE;
+    }
+
+    camera->image_encodebin = gst_element_factory_make ("encodebin", NULL);
+    camera->image_encodebin_signal_id =
+        g_signal_connect (camera->image_encodebin, "element-added",
+        (GCallback) encodebin_element_added, camera);
+
+    camera->imagesink =
+        gst_element_factory_make ("multifilesink", "imagebin-filesink");
+    g_object_set (camera->imagesink, "async", FALSE, "post-messages", TRUE,
+        NULL);
+
+    if (camera->image_profile == NULL) {
+      GstEncodingVideoProfile *prof;
+      GstCaps *caps;
+
+      caps = gst_caps_new_simple ("image/jpeg", NULL);
+      prof = gst_encoding_video_profile_new (caps, NULL, NULL, 1);
+      gst_encoding_video_profile_set_variableframerate (prof, TRUE);
       gst_caps_unref (caps);
 
-      camera->video_profile = (GstEncodingProfile *) prof;
-      camera->profile_switch = TRUE;
+      camera->image_profile = (GstEncodingProfile *) prof;
+      camera->image_profile_switch = TRUE;
     }
 
     camera->videobin_queue =
@@ -998,9 +1032,10 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
     g_object_set (camera->videobin_queue, "silent", TRUE, NULL);
 
     gst_bin_add_many (GST_BIN_CAST (camera),
-        gst_object_ref (camera->encodebin),
+        gst_object_ref (camera->video_encodebin),
         gst_object_ref (camera->videosink),
-        gst_object_ref (camera->imagebin),
+        gst_object_ref (camera->image_encodebin),
+        gst_object_ref (camera->imagesink),
         gst_object_ref (camera->videobin_queue),
         gst_object_ref (camera->imagebin_queue),
         gst_object_ref (camera->viewfinderbin_queue), NULL);
@@ -1008,10 +1043,11 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
     /* Linking can be optimized TODO */
     gst_element_link_many (camera->videobin_queue, camera->videobin_capsfilter,
         NULL);
-    gst_element_link (camera->encodebin, camera->videosink);
+    gst_element_link (camera->video_encodebin, camera->videosink);
 
     gst_element_link_many (camera->imagebin_queue, camera->imagebin_capsfilter,
-        camera->imagebin, NULL);
+        NULL);
+    gst_element_link (camera->image_encodebin, camera->imagesink);
     gst_element_link_many (camera->viewfinderbin_queue,
         camera->viewfinderbin_capsfilter, camera->viewfinderbin, NULL);
     /*
@@ -1024,21 +1060,33 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
      * starting recording, so we should prepare the video bin.
      */
     gst_element_set_locked_state (camera->videosink, TRUE);
+    gst_element_set_locked_state (camera->imagesink, TRUE);
 
     g_object_set (camera->videosink, "location", camera->video_location, NULL);
-    g_object_set (camera->imagebin, "location", camera->image_location, NULL);
+    g_object_set (camera->imagesink, "location", camera->image_location, NULL);
   }
-  if (camera->profile_switch) {
+
+  if (camera->video_profile_switch) {
     GST_DEBUG_OBJECT (camera, "Switching encodebin's profile");
-    g_object_set (camera->encodebin, "profile", camera->video_profile, NULL);
-    gst_camera_bin_link_encodebin (camera, camera->videobin_capsfilter,
-        VIDEO_PAD);
-    camera->profile_switch = FALSE;
+    g_object_set (camera->video_encodebin, "profile", camera->video_profile,
+        NULL);
+    gst_camera_bin_link_encodebin (camera, camera->video_encodebin,
+        camera->videobin_capsfilter, VIDEO_PAD);
+    camera->video_profile_switch = FALSE;
 
     /* used to trigger relinking further down */
     profile_switched = TRUE;
   }
 
+  if (camera->image_profile_switch) {
+    GST_DEBUG_OBJECT (camera, "Switching encodebin's profile");
+    g_object_set (camera->image_encodebin, "profile", camera->image_profile,
+        NULL);
+    gst_camera_bin_link_encodebin (camera, camera->image_encodebin,
+        camera->imagebin_capsfilter, VIDEO_PAD);
+    camera->image_profile_switch = FALSE;
+  }
+
   /* check if we need to replace the camera src */
   if (camera->src) {
     if (camera->user_src && camera->user_src != camera->src) {
@@ -1057,8 +1105,7 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
     if (camera->user_src) {
       camera->src = gst_object_ref (camera->user_src);
     } else {
-      camera->src =
-          gst_element_factory_make ("wrappercamerabinsrc", "camerasrc");
+      camera->src = gst_element_factory_make ("omxcamerabinsrc", "camerasrc");
     }
 
     new_src = TRUE;
@@ -1141,7 +1188,8 @@ gst_camera_bin_create_elements (GstCameraBin * camera)
   }
 
   if ((profile_switched && has_audio) || new_audio_src) {
-    gst_camera_bin_link_encodebin (camera, camera->audio_convert, AUDIO_PAD);
+    gst_camera_bin_link_encodebin (camera, camera->video_encodebin,
+        camera->audio_convert, AUDIO_PAD);
   }
 
   camera->elements_created = TRUE;
@@ -1173,6 +1221,8 @@ gst_camera_bin_change_state (GstElement * element, GstStateChange trans)
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       if (GST_STATE (camera->videosink) >= GST_STATE_PAUSED)
         gst_element_set_state (camera->videosink, GST_STATE_READY);
+      if (GST_STATE (camera->imagesink) >= GST_STATE_PAUSED)
+        gst_element_set_state (camera->imagesink, GST_STATE_READY);
       if (camera->audio_src && GST_STATE (camera->audio_src) >= GST_STATE_READY)
         gst_element_set_state (camera->audio_src, GST_STATE_READY);
 
@@ -1187,6 +1237,7 @@ gst_camera_bin_change_state (GstElement * element, GstStateChange trans)
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
       gst_element_set_state (camera->videosink, GST_STATE_NULL);
+      gst_element_set_state (camera->imagesink, GST_STATE_NULL);
       if (camera->audio_src)
         gst_element_set_state (camera->audio_src, GST_STATE_NULL);
 
@@ -1210,8 +1261,6 @@ gst_camera_bin_set_location (GstCameraBin * camera, const gchar * location)
   GST_DEBUG_OBJECT (camera, "Setting mode %d location to %s", camera->mode,
       location);
   if (camera->mode == MODE_IMAGE) {
-    if (camera->imagebin)
-      g_object_set (camera->imagebin, "location", location, NULL);
     g_free (camera->image_location);
     camera->image_location = g_strdup (location);
   } else {
@@ -1370,7 +1419,7 @@ gst_camera_bin_set_property (GObject * object, guint prop_id,
         gst_encoding_profile_unref (camera->video_profile);
       camera->video_profile =
           (GstEncodingProfile *) gst_value_dup_mini_object (value);
-      camera->profile_switch = TRUE;
+      camera->video_profile_switch = TRUE;
       break;
     case PROP_IMAGE_FILTER:
       if (camera->user_image_filter)
@@ -1416,13 +1465,12 @@ gst_camera_bin_set_property (GObject * object, guint prop_id,
       if (camera->src)
         g_object_set (camera->src, "zoom", camera->zoom, NULL);
       break;
-    case PROP_IMAGE_CAPTURE_ENCODER:
-      g_object_set (camera->imagebin, "image-encoder",
-          g_value_get_object (value), NULL);
-      break;
-    case PROP_IMAGE_CAPTURE_MUXER:
-      g_object_set (camera->imagebin, "image-muxer",
-          g_value_get_object (value), NULL);
+    case PROP_IMAGE_ENCODING_PROFILE:
+      if (camera->image_profile)
+        gst_encoding_profile_unref (camera->image_profile);
+      camera->image_profile =
+          (GstEncodingProfile *) gst_value_dup_mini_object (value);
+      camera->image_profile_switch = TRUE;
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -1576,20 +1624,12 @@ gst_camera_bin_get_property (GObject * object, guint prop_id,
     case PROP_MAX_ZOOM:
       g_value_set_float (value, camera->max_zoom);
       break;
-    case PROP_IMAGE_CAPTURE_ENCODER:{
-      GstElement *enc;
-
-      g_object_get (camera->imagebin, "image-encoder", &enc, NULL);
-      g_value_take_object (value, enc);
-      break;
-    }
-    case PROP_IMAGE_CAPTURE_MUXER:{
-      GstElement *mux;
-
-      g_object_get (camera->imagebin, "image-muxer", &mux, NULL);
-      g_value_take_object (value, mux);
+    case PROP_IMAGE_ENCODING_PROFILE:
+      if (camera->image_profile) {
+        gst_value_set_mini_object (value,
+            (GstMiniObject *) camera->image_profile);
+      }
       break;
-    }
     case PROP_IDLE:
       g_value_set_boolean (value,
           g_atomic_int_get (&camera->processing_counter) == 0);
diff --git a/gst/camerabin2/gstcamerabin2.h b/gst/camerabin2/gstcamerabin2.h
index 05961e2..59e3723 100644
--- a/gst/camerabin2/gstcamerabin2.h
+++ b/gst/camerabin2/gstcamerabin2.h
@@ -42,8 +42,8 @@ struct _GstCameraBin
   GstElement *user_src;
   gulong src_capture_notify_id;
 
-  GstElement *encodebin;
-  gulong encodebin_signal_id;
+  GstElement *video_encodebin;
+  gulong video_encodebin_signal_id;
   GstElement *videosink;
   gulong videosink_probe;
   GstElement *videobin_queue;
@@ -53,7 +53,9 @@ struct _GstCameraBin
   GstElement *viewfinderbin_queue;
   GstElement *viewfinderbin_capsfilter;
 
-  GstElement *imagebin;
+  GstElement *image_encodebin;
+  gulong image_encodebin_signal_id;
+  GstElement *imagesink;
   GstElement *imagebin_queue;
   GstElement *imagebin_capsfilter;
 
@@ -76,7 +78,8 @@ struct _GstCameraBin
   /* Index of the auto incrementing file index for video recordings */
   gint video_index;
 
-  gboolean profile_switch;
+  gboolean video_profile_switch;
+  gboolean image_profile_switch;
 
   /* properties */
   gint mode;
@@ -86,6 +89,7 @@ struct _GstCameraBin
   GstCaps *preview_caps;
   GstElement *preview_filter;
   GstEncodingProfile *video_profile;
+  GstEncodingProfile *image_profile;
   gfloat zoom;
   gfloat max_zoom;
 
diff --git a/gst/camerabin2/gstplugin.c b/gst/camerabin2/gstplugin.c
index 56fa78f..2707690 100644
--- a/gst/camerabin2/gstplugin.c
+++ b/gst/camerabin2/gstplugin.c
@@ -26,6 +26,7 @@
 #include "gstviewfinderbin.h"
 #include "gstimagecapturebin.h"
 #include "gstwrappercamerabinsrc.h"
+#include "gstomxcamerabinsrc.h"
 #include "gstcamerabin2.h"
 
 static gboolean
@@ -37,6 +38,8 @@ plugin_init (GstPlugin * plugin)
     return FALSE;
   if (!gst_wrapper_camera_bin_src_plugin_init (plugin))
     return FALSE;
+  if (!gst_omx_camera_bin_src_plugin_init (plugin))
+    return FALSE;
   if (!gst_camera_bin_plugin_init (plugin))
     return FALSE;
 
diff --git a/gst/camerabin2/gstviewfinderbin.c b/gst/camerabin2/gstviewfinderbin.c
index e03631e..98f0697 100644
--- a/gst/camerabin2/gstviewfinderbin.c
+++ b/gst/camerabin2/gstviewfinderbin.c
@@ -53,7 +53,7 @@ enum
 static GstStaticPadTemplate sink_template = GST_STATIC_PAD_TEMPLATE ("sink",
     GST_PAD_SINK,
     GST_PAD_ALWAYS,
-    GST_STATIC_CAPS ("video/x-raw-yuv; video/x-raw-rgb")
+    GST_STATIC_CAPS ("video/x-raw-yuv-strided; video/x-raw-rgb")
     );
 
 /* class initialization */
@@ -150,11 +150,11 @@ gst_viewfinder_bin_create_elements (GstViewfinderBin * vfbin)
 
   if (!vfbin->elements_created) {
     /* create elements */
-    csp = gst_element_factory_make ("ffmpegcolorspace", "vfbin-csp");
+    csp = gst_element_factory_make ("identity", "vfbin-csp");
     if (!csp)
       goto error;
 
-    videoscale = gst_element_factory_make ("videoscale", "vfbin-videoscale");
+    videoscale = gst_element_factory_make ("identity", "vfbin-videoscale");
     if (!videoscale)
       goto error;
 
diff --git a/tests/check/Makefile.am b/tests/check/Makefile.am
index 433b94f..a1b8288 100644
--- a/tests/check/Makefile.am
+++ b/tests/check/Makefile.am
@@ -14,7 +14,7 @@ TESTS_ENVIRONMENT = \
 	GST_PLUGIN_SYSTEM_PATH=					\
 	GST_PLUGIN_PATH=$(top_builddir)/gst:$(top_builddir)/sys:$(top_builddir)/ext:$(GST_PLUGINS_FFMPEG_DIR):$(GST_PLUGINS_UGLY_DIR):$(GST_PLUGINS_GOOD_DIR):$(GST_PLUGINS_BASE_DIR):$(GST_PLUGINS_DIR) \
 	GST_PLUGIN_LOADING_WHITELIST="gstreamer@$(GST_PLUGINS_DIR):gst-plugins-base@$(GSTPB_PLUGINS_DIR):gst-plugins-good:gst-plugins-ugly:gst-ffmpeg:gst-plugins-bad@$(top_builddir)" \
-	GST_STATE_IGNORE_ELEMENTS="apexsink camerabin camerabin2 cdaudio dc1394src dccpclientsrc dccpclientsink dccpserversrc dccpserversink dvbsrc dvbbasebin dfbvideosink festival gsettingsvideosrc gsettingsvideosink gsettingsaudiosrc gsettingsaudiosink nassink rsndvdbin sdlaudiosink sdlvideosink vcdsrc rfbsrc vdpauyuvvideo vdpauvideoyuv vdpaumpegdec vdpaumpeg4dec vdpauh264dec vdpauvideopostprocess vdpausink neonhttpsrc"
+	STATE_IGNORE_ELEMENTS="alsaspdifsink apexsink camerabin camerabin2 cdaudio dc1394src dccpclientsrc dccpclientsink dccpserversrc dccpserversink dvbsrc dvbbasebin dfbvideosink festival gsettingsvideosrc gsettingsvideosink gsettingsaudiosrc gsettingsaudiosink nassink rsndvdbin sdlaudiosink sdlvideosink vcdsrc rfbsrc vdpauyuvvideo vdpauvideoyuv vdpaumpegdec neonhttpsrc"
 
 plugindir = $(libdir)/gstreamer-@GST_MAJORMINOR@
 
@@ -158,7 +158,9 @@ check_PROGRAMS = \
 	elements/autovideoconvert \
 	elements/asfmux \
 	elements/camerabin \
+	elements/camerabin2 \
 	elements/dataurisrc \
+	elements/imagecapturebin \
 	elements/legacyresample \
         $(check_jifmux) \
 	elements/jpegparse \
@@ -173,7 +175,9 @@ check_PROGRAMS = \
 	$(check_vp8) \
 	$(check_zbar) \
 	$(check_orc) \
-	$(EXPERIMENTAL_CHECKS)
+	$(EXPERIMENTAL_CHECKS) \
+	pipelines/tagschecking \
+	elements/viewfinderbin
 
 noinst_HEADERS = elements/mxfdemux.h
 
diff --git a/tests/examples/camerabin2/gst-camerabin2-test.c b/tests/examples/camerabin2/gst-camerabin2-test.c
index 49974d1..8ca5013 100644
--- a/tests/examples/camerabin2/gst-camerabin2-test.c
+++ b/tests/examples/camerabin2/gst-camerabin2-test.c
@@ -157,8 +157,8 @@ static gint color_mode = COLOR_TONE_MODE_NONE;
 
 static gchar *viewfinder_filter = NULL;
 
-static int x_width = 320;
-static int x_height = 240;
+static int x_width = 864;
+static int x_height = 480;
 
 /* test configuration for common callbacks */
 static GString *filename = NULL;
@@ -435,6 +435,17 @@ setup_pipeline_element (GstElement * element, const gchar * property_name,
       if (g_object_class_find_property (G_OBJECT_GET_CLASS (elem), "device")) {
         g_object_set (elem, "device", "/dev/video1", NULL);
       }
+      if (g_object_class_find_property (G_OBJECT_GET_CLASS (elem),
+              "queue-size")) {
+        g_object_set (elem, "queue-size", 15, NULL);
+      }
+      if (g_object_class_find_property (G_OBJECT_GET_CLASS (elem), "sync")) {
+        g_object_set (elem, "sync", FALSE, NULL);
+      }
+      if (g_object_class_find_property (G_OBJECT_GET_CLASS (elem),
+              "enable-last-buffer")) {
+        g_object_set (elem, "enable-last-buffer", FALSE, NULL);
+      }
       g_object_set (element, property_name, elem, NULL);
     } else {
       GST_WARNING ("can't create element '%s' for property '%s'", element_name,
@@ -456,6 +467,7 @@ setup_pipeline (void)
   gboolean res = TRUE;
   GstBus *bus;
   GstElement *sink = NULL, *ipp = NULL;
+  GstElement *stride;
   GstEncodingProfile *prof = NULL;
   camerabin = gst_element_factory_make ("camerabin2", NULL);
   if (NULL == camerabin) {
@@ -463,6 +475,9 @@ setup_pipeline (void)
     goto error;
   }
 
+  stride = gst_element_factory_make ("stridetransform", "capsfilter-stride");
+  g_object_set (camerabin, "preview-filter", stride, NULL);
+
   bus = gst_pipeline_get_bus (GST_PIPELINE (camerabin));
   /* Add sync handler for time critical messages that need to be handled fast */
   gst_bus_set_sync_handler (bus, sync_bus_callback, NULL);
@@ -507,8 +522,10 @@ setup_pipeline (void)
 
   GST_INFO_OBJECT (camerabin, "elements created");
 
+#if 0
   if (sink)
     g_object_set (sink, "sync", TRUE, NULL);
+#endif
 
   GST_INFO_OBJECT (camerabin, "elements configured");
 
@@ -527,29 +544,30 @@ setup_pipeline (void)
                 "height", G_TYPE_INT, image_height,
                 "framerate", GST_TYPE_FRACTION, view_framerate_num,
                 view_framerate_den, NULL), NULL);
-      else
-        caps = gst_caps_new_full (gst_structure_new ("video/x-raw-yuv",
+      else {
+        caps = gst_caps_new_full (gst_structure_new ("video/x-raw-yuv-strided",
                 "width", G_TYPE_INT, image_width,
                 "height", G_TYPE_INT, image_height, NULL),
             gst_structure_new ("video/x-raw-rgb",
                 "width", G_TYPE_INT, image_width,
                 "height", G_TYPE_INT, image_height, NULL), NULL);
+      }
 
-      g_object_set (camerabin, "video-capture-caps", caps, NULL);
+      //g_object_set (camerabin, "video-capture-caps", caps, NULL);
+      g_object_set (camerabin, "viewfinder-caps", caps, NULL);
       gst_caps_unref (caps);
     } else {
-      GstCaps *caps = gst_caps_new_full (gst_structure_new ("video/x-raw-yuv",
+      GstCaps *caps = gst_caps_new_full (gst_structure_new ("image/jpeg",
               "width", G_TYPE_INT, image_width,
               "height", G_TYPE_INT, image_height, NULL),
-          gst_structure_new ("video/x-raw-rgb",
-              "width", G_TYPE_INT, image_width,
-              "height", G_TYPE_INT, image_height, NULL), NULL);
-
+          NULL);
       g_object_set (camerabin, "image-capture-caps", caps, NULL);
       gst_caps_unref (caps);
     }
   }
 
+  g_object_set (camerabin, "mode", mode, NULL);
+
   if (GST_STATE_CHANGE_FAILURE ==
       gst_element_set_state (camerabin, GST_STATE_READY)) {
     g_warning ("can't set camerabin to ready\n");
@@ -758,13 +776,13 @@ main (int argc, char *argv[])
     {"view-framerate-den", '\0', 0, G_OPTION_ARG_INT, &view_framerate_den,
         "Framerate denominator for viewfinder", NULL},
     {"preview-caps", '\0', 0, G_OPTION_ARG_STRING, &preview_caps_name,
-        "Preview caps (e.g. video/x-raw-rgb,width=320,height=240)", NULL},
+        "Preview caps (e.g. video/x-raw-rgb,width=864,height=480)", NULL},
     {"viewfinder-filter", '\0', 0, G_OPTION_ARG_STRING, &viewfinder_filter,
         "Filter to process all frames going to viewfinder sink", NULL},
     {"x-width", '\0', 0, G_OPTION_ARG_INT, &x_width,
-        "X window width (default = 320)", NULL},
+        "X window width (default = 864)", NULL},
     {"x-height", '\0', 0, G_OPTION_ARG_INT, &x_height,
-        "X window height (default = 240)", NULL},
+        "X window height (default = 480)", NULL},
     {"no-xwindow", '\0', 0, G_OPTION_ARG_NONE, &no_xwindow,
         "Do not create XWindow", NULL},
     {"encoding-target", '\0', 0, G_OPTION_ARG_STRING, &gep_targetname,
-- 
1.7.5.4

