From 6c88cf109152166061e61ce0f41f3c0242a43169 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <lucianafujii@collabora.co.uk>
Date: Wed, 19 Oct 2011 15:28:05 -0400
Subject: [PATCH 105/154] pvrvideosink: Lock bufferpool

Bufferpool use is locked to avoid concurrent access.
---
 sys/pvr2d/gstpvrbufferpool.c |    2 ++
 sys/pvr2d/gstpvrvideosink.c  |   13 +++++++++++++
 2 files changed, 15 insertions(+), 0 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index 5e46572..8e30679 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -192,10 +192,12 @@ gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
 
   /* now, map the buffers */
   for (i = 0; i < num_buffers; i++) {
+    GST_PVR_BUFFERPOOL_LOCK (self);
     self->buffers[i] = gst_ducati_buffer_new (self, i);
     g_return_val_if_fail (self->buffers[i] != NULL, NULL);
     self->num_live_buffers++;
     g_async_queue_push (self->avail_buffers, self->buffers[i]);
+    GST_PVR_BUFFERPOOL_UNLOCK (self);
   }
 
   return self;
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index c09dbcc..18a1d55 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -806,10 +806,14 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
     GST_DEBUG_OBJECT (pvrvideosink, "caps are different");
   }
 
+  g_mutex_lock (pvrvideosink->pool_lock);
   if (pvrvideosink->buffer_pool) {
+    g_mutex_unlock (pvrvideosink->pool_lock);
     /* TODO: change caps of the buffer_pool */
     GST_DEBUG_OBJECT (pvrvideosink, "changing caps not supported");
     return FALSE;
+  } else {
+    g_mutex_unlock (pvrvideosink->pool_lock);
   }
 
   /* query to find if anyone upstream using these buffers has any
@@ -1117,9 +1121,11 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
     goto beach;
   }
 
+  g_mutex_lock (pvrvideosink->pool_lock);
   /* initialize the buffer pool if not initialized yet (first buffer): */
   if (G_UNLIKELY (!pvrvideosink->buffer_pool)) {
 
+    g_mutex_unlock (pvrvideosink->pool_lock);
     /* set_caps() might not be called yet.. so just to make sure: */
     if (!gst_pvrvideosink_setcaps (bsink, caps)) {
       return GST_FLOW_ERROR;
@@ -1139,13 +1145,16 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
     GST_LOG_OBJECT (pvrvideosink, "Creating a buffer pool with %d buffers",
         pvrvideosink->num_buffers);
 
+    g_mutex_lock (pvrvideosink->pool_lock);
     if (!(pvrvideosink->buffer_pool =
             gst_pvr_bufferpool_new (GST_ELEMENT (pvrvideosink),
                 caps, 8, size, pvrvideosink->dcontext->pvr_context))) {
+      g_mutex_unlock (pvrvideosink->pool_lock);
       return GST_FLOW_ERROR;
     }
   }
   pvrvideo = gst_pvr_bufferpool_get (pvrvideosink->buffer_pool, NULL);
+  g_mutex_unlock (pvrvideosink->pool_lock);
 
   *buf = GST_BUFFER_CAST (pvrvideo);
 
@@ -1221,10 +1230,12 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
   }
 
   /* Clear image pool as the images are unusable anyway */
+  g_mutex_lock (pvrvideosink->pool_lock);
   if (pvrvideosink->buffer_pool) {
     gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
     pvrvideosink->buffer_pool = NULL;
   }
+  g_mutex_unlock (pvrvideosink->pool_lock);
 
   /* If a window is there already we destroy it */
   if (pvrvideosink->xwindow) {
@@ -1447,10 +1458,12 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
     pvrvideosink->current_buffer = NULL;
   }
 
+  g_mutex_lock (pvrvideosink->pool_lock);
   if (pvrvideosink->buffer_pool) {
     gst_pvr_bufferpool_destroy (pvrvideosink->buffer_pool);
     pvrvideosink->buffer_pool = NULL;
   }
+  g_mutex_unlock (pvrvideosink->pool_lock);
   memset (&pvrvideosink->crop, 0, sizeof (PVR2DRECT));
   memset (&pvrvideosink->render_params, 0, sizeof (WSEGLDrawableParams));
 
-- 
1.7.5.4

