From c5b9b3718658a5a89f26e63d43dc21a9e211bfcb Mon Sep 17 00:00:00 2001
From: Rob Clark <rob@ti.com>
Date: Tue, 27 Dec 2011 02:33:58 -0600
Subject: [PATCH 145/154] pvrvideosink: add navigation

---
 sys/pvr2d/gstpvrvideosink.c |  184 ++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 173 insertions(+), 11 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 9d58613..5aa2ee4 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -26,6 +26,7 @@
 #include "gstpvrbufferpool.h"
 #include <gst/video/gstvideosink.h>
 #include <gst/interfaces/xoverlay.h>
+#include <gst/interfaces/navigation.h>
 
 /* Debugging category */
 #include <gst/gstinfo.h>
@@ -62,6 +63,8 @@ static void gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink *
 static void gst_pvrvideosink_expose (GstXOverlay * overlay);
 static void gst_pvrvideosink_xwindow_destroy (GstPVRVideoSink * pvrvideosink,
     GstXWindow * xwindow);
+static void gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
+    gboolean handle_events);
 
 static GstStaticPadTemplate gst_pvrvideosink_sink_template_factory =
     GST_STATIC_PAD_TEMPLATE ("sink",
@@ -248,30 +251,99 @@ gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
 static void
 gst_pvrvideosink_handle_xevents (GstPVRVideoSink * pvrvideosink)
 {
+  Display *dpy = pvrvideosink->dcontext->x_display;
+  Window win = pvrvideosink->xwindow->window;
   XEvent e;
   gboolean exposed = FALSE;
   gboolean configured = FALSE;
+  guint pointer_x = 0, pointer_y = 0;
+  gboolean pointer_moved = FALSE;
 
   g_mutex_lock (pvrvideosink->flow_lock);
   g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
-  /* Handle Expose */
+  /* First get all pointer motion events, only the last position is
+   * interesting so throw out the earlier ones:
+   */
+  while (XCheckWindowEvent (dpy, win, PointerMotionMask, &e)) {
+    switch (e.type) {
+      case MotionNotify:
+        pointer_x = e.xmotion.x;
+        pointer_y = e.xmotion.y;
+        pointer_moved = TRUE;
+        break;
+      default:
+        break;
+    }
+  }
+
+  if (pointer_moved) {
+    GST_DEBUG_OBJECT (pvrvideosink,
+        "pointer moved over window at %d,%d", pointer_x, pointer_y);
+    g_mutex_unlock (pvrvideosink->dcontext->x_lock);
+    gst_navigation_send_mouse_event (GST_NAVIGATION (pvrvideosink),
+        "mouse-move", 0, e.xbutton.x, e.xbutton.y);
+    g_mutex_lock (pvrvideosink->dcontext->x_lock);
+  }
+
+  /* Then handle all the other events: */
   while (XCheckWindowEvent (pvrvideosink->dcontext->x_display,
-          pvrvideosink->xwindow->window, ExposureMask | StructureNotifyMask,
-          &e)) {
+      pvrvideosink->xwindow->window,
+      ExposureMask | StructureNotifyMask |
+      KeyPressMask | KeyReleaseMask |
+      ButtonPressMask | ButtonReleaseMask,
+      &e)) {
+    KeySym keysym;
+    const char *key_str = NULL;
+
+    g_mutex_unlock (pvrvideosink->dcontext->x_lock);
+
     switch (e.type) {
       case Expose:
         exposed = TRUE;
         break;
       case ConfigureNotify:
-        g_mutex_unlock (pvrvideosink->dcontext->x_lock);
         gst_pvrvideosink_xwindow_update_geometry (pvrvideosink);
-        g_mutex_lock (pvrvideosink->dcontext->x_lock);
         configured = TRUE;
         break;
+      case ButtonPress:
+        GST_DEBUG_OBJECT (pvrvideosink,
+            "button %d pressed over window at %d,%d",
+            e.xbutton.button, e.xbutton.x, e.xbutton.y);
+        gst_navigation_send_mouse_event (GST_NAVIGATION (pvrvideosink),
+            "mouse-button-press", e.xbutton.button,
+            e.xbutton.x, e.xbutton.y);
+        break;
+      case ButtonRelease:
+        GST_DEBUG_OBJECT (pvrvideosink,
+            "button %d released over window at %d,%d",
+            e.xbutton.button, e.xbutton.x, e.xbutton.y);
+        gst_navigation_send_mouse_event (GST_NAVIGATION (pvrvideosink),
+            "mouse-button-release", e.xbutton.button,
+            e.xbutton.x, e.xbutton.y);
+        break;
+      case KeyPress:
+      case KeyRelease:
+        g_mutex_lock (pvrvideosink->dcontext->x_lock);
+        keysym = XKeycodeToKeysym (dpy, e.xkey.keycode, 0);
+        if (keysym != NoSymbol) {
+          key_str = XKeysymToString (keysym);
+        } else {
+          key_str = "unknown";
+        }
+        g_mutex_unlock (pvrvideosink->dcontext->x_lock);
+        GST_DEBUG_OBJECT (pvrvideosink,
+            "key %d pressed over window at %d,%d (%s)",
+            e.xkey.keycode, e.xkey.x, e.xkey.y, key_str);
+        gst_navigation_send_key_event (GST_NAVIGATION (pvrvideosink),
+            e.type == KeyPress ? "key-press" : "key-release", key_str);
+        break;
       default:
+        GST_DEBUG_OBJECT (pvrvideosink, "unhandled X event (%d)", e.type);
         break;
     }
+
+    g_mutex_lock (pvrvideosink->dcontext->x_lock);
   }
 
   if (exposed || configured) {
@@ -502,8 +574,6 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
   root = DefaultRootWindow (dcontext->x_display);
   xwindow->window = XCreateSimpleWindow (dcontext->x_display, root, 0, 0,
       width, height, 2, 2, pvrvideosink->dcontext->black);
-  XSelectInput (dcontext->x_display, xwindow->window,
-      ExposureMask | StructureNotifyMask);
 
   /* Tell the window manager we'd like delete client messages instead of
    * being killed */
@@ -1001,6 +1071,8 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
         GST_VIDEO_SINK_HEIGHT (pvrvideosink));
   g_mutex_unlock (pvrvideosink->flow_lock);
 
+  gst_pvrvideosink_set_event_handling (GST_X_OVERLAY (pvrvideosink), TRUE);
+
   pvrvideosink->fps_n = gst_value_get_fraction_numerator (fps);
   pvrvideosink->fps_d = gst_value_get_fraction_denominator (fps);
 
@@ -1309,7 +1381,8 @@ static gboolean
 gst_pvrvideosink_interface_supported (GstImplementsInterface * iface,
     GType type)
 {
-  if (type == GST_TYPE_X_OVERLAY)
+  if (type == GST_TYPE_X_OVERLAY ||
+      type == GST_TYPE_NAVIGATION)
     return TRUE;
   else
     return FALSE;
@@ -1345,6 +1418,10 @@ gst_pvrvideosink_xwindow_destroy (GstPVRVideoSink * pvrvideosink,
   g_free (xwindow);
 }
 
+/*
+ * GstXOverlay Interface:
+ */
+
 static void
 gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
 {
@@ -1408,8 +1485,6 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
       pvrvideosink->render_rect.w = attr.width;
       pvrvideosink->render_rect.h = attr.height;
     }
-    XSelectInput (pvrvideosink->dcontext->x_display, xwindow->window,
-        ExposureMask | StructureNotifyMask);
 
     XSetWindowBackgroundPixmap (pvrvideosink->dcontext->x_display,
         xwindow->window, None);
@@ -1445,6 +1520,8 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
     pvrvideosink->xwindow = xwindow;
 
   g_mutex_unlock (pvrvideosink->flow_lock);
+
+  gst_pvrvideosink_set_event_handling (overlay, TRUE);
 }
 
 static void
@@ -1460,6 +1537,7 @@ gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
     gboolean handle_events)
 {
   GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (overlay);
+  long event_mask;
 
   g_mutex_lock (pvrvideosink->flow_lock);
 
@@ -1470,8 +1548,15 @@ gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
 
   g_mutex_lock (pvrvideosink->dcontext->x_lock);
 
+  event_mask = ExposureMask | StructureNotifyMask |
+      PointerMotionMask | KeyPressMask | KeyReleaseMask;
+
+  if (pvrvideosink->xwindow->internal) {
+    event_mask |= ButtonPressMask | ButtonReleaseMask;
+  }
+
   XSelectInput (pvrvideosink->dcontext->x_display,
-      pvrvideosink->xwindow->window, ExposureMask | StructureNotifyMask);
+      pvrvideosink->xwindow->window, event_mask);
 
   g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
@@ -1511,6 +1596,78 @@ gst_pvrvideosink_xoverlay_init (GstXOverlayClass * iface)
   iface->set_render_rectangle = gst_pvrvideosink_set_render_rectangle;
 }
 
+/*
+ * GstNavigation Interface:
+ */
+
+static void
+gst_pvrvideosink_send_event (GstNavigation * navigation,
+    GstStructure * structure)
+{
+  GstPVRVideoSink *pvrvideosink = GST_PVRVIDEOSINK (navigation);
+  GstPad *peer;
+
+  if ((peer = gst_pad_get_peer (GST_VIDEO_SINK_PAD (pvrvideosink)))) {
+    GstVideoRectangle result;
+    gdouble x, y, xscale = 1.0, yscale = 1.0;
+
+    if (pvrvideosink->keep_aspect) {
+      GstVideoRectangle src = {
+          .w = GST_VIDEO_SINK_WIDTH (pvrvideosink),
+          .h = GST_VIDEO_SINK_HEIGHT (pvrvideosink),
+      };
+      GstVideoRectangle dst = {
+          .w = pvrvideosink->render_rect.w,
+          .h = pvrvideosink->render_rect.h,
+      };
+
+      gst_video_sink_center_rect (src, dst, &result, TRUE);
+      result.x += pvrvideosink->render_rect.x;
+      result.y += pvrvideosink->render_rect.y;
+    } else {
+      result = pvrvideosink->render_rect;
+    }
+
+    /* We calculate scaling using the original video frames geometry to
+     * include pixel aspect ratio scaling.
+     */
+    xscale = (gdouble) pvrvideosink->video_width / result.w;
+    yscale = (gdouble) pvrvideosink->video_height / result.h;
+
+    /* Note: this doesn't account for crop top/left offsets.. which
+     * is probably not quite right.. OTOH, I don't think the ducati
+     * decoder elements subtract back out the crop offsets as the
+     * event propagates upstream, so as long as the one receiving
+     * the event is upstream of the decoder, the net effect will be
+     * correct..  although this might be worth fixing correctly at
+     * some point.
+     */
+
+    /* Converting pointer coordinates to the non scaled geometry */
+    if (gst_structure_get_double (structure, "pointer_x", &x)) {
+      x = MIN (x, result.x + result.w);
+      x = MAX (x - result.x, 0);
+      gst_structure_set (structure, "pointer_x", G_TYPE_DOUBLE,
+          (gdouble) x * xscale, NULL);
+    }
+    if (gst_structure_get_double (structure, "pointer_y", &y)) {
+      y = MIN (y, result.y + result.h);
+      y = MAX (y - result.y, 0);
+      gst_structure_set (structure, "pointer_y", G_TYPE_DOUBLE,
+          (gdouble) y * yscale, NULL);
+    }
+
+    gst_pad_send_event (peer, gst_event_new_navigation (structure));
+    gst_object_unref (peer);
+  }
+}
+
+static void
+gst_pvrvideosink_navigation_init (GstNavigationInterface * iface)
+{
+  iface->send_event = gst_pvrvideosink_send_event;
+}
+
 /* =========================================== */
 /*                                             */
 /*              Init & Class init              */
@@ -1760,6 +1917,9 @@ gst_pvrvideosink_get_type (void)
     static const GInterfaceInfo overlay_info = {
       (GInterfaceInitFunc) gst_pvrvideosink_xoverlay_init, NULL, NULL,
     };
+    static const GInterfaceInfo navigation_info = {
+      (GInterfaceInitFunc) gst_pvrvideosink_navigation_init, NULL, NULL,
+    };
 
     pvrvideosink_type = g_type_register_static (GST_TYPE_VIDEO_SINK,
         "GstPVRVideoSink", &pvrvideosink_info, 0);
@@ -1768,6 +1928,8 @@ gst_pvrvideosink_get_type (void)
         GST_TYPE_IMPLEMENTS_INTERFACE, &iface_info);
     g_type_add_interface_static (pvrvideosink_type, GST_TYPE_X_OVERLAY,
         &overlay_info);
+    g_type_add_interface_static (pvrvideosink_type, GST_TYPE_NAVIGATION,
+        &navigation_info);
   }
 
   return pvrvideosink_type;
-- 
1.7.5.4

