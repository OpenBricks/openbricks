From 90abc0a4eb8b1b13674ee7123b529a1ed89f68bc Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Thu, 3 Nov 2011 13:25:58 +0100
Subject: [PATCH 119/154] pvrvideosink: workaround brokenness in pvr2d cleanup
 code

Expicitly unwrap all the buffers before closing the WSEGL display so that we
don't trigger some pvr2d code that leads to an hang.
---
 sys/pvr2d/gstpvrbufferpool.c |   35 ++++++++++++++++++++++++++++++-----
 sys/pvr2d/gstpvrbufferpool.h |    3 ++-
 sys/pvr2d/gstpvrvideosink.c  |    8 ++++----
 3 files changed, 36 insertions(+), 10 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index 0241ede..03bcafb 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -72,6 +72,8 @@ gst_ducati_buffer_new (GstPvrBufferPool * pool)
   if (pvr_error != PVR2D_OK) {
     GST_LOG_OBJECT (pool->element, "Failed to Wrap buffer memory"
         "returned %d", pvr_error);
+  } else {
+    self->wrapped = TRUE;
   }
 
   gst_buffer_set_caps (GST_BUFFER (self), pool->caps);
@@ -113,10 +115,13 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
         "buffer %p (data %p, len %u) not recovered, freeing",
         self, GST_BUFFER_DATA (self), GST_BUFFER_SIZE (self));
 
-    pvr_error = PVR2DMemFree (pool->pvr_context, self->src_mem);
-    if (pvr_error != PVR2D_OK) {
-      GST_ERROR_OBJECT (pool->element, "Failed to Unwrap buffer memory"
-          "returned %d", pvr_error);
+    if (self->wrapped) {
+      pvr_error = PVR2DMemFree (pool->pvr_context, self->src_mem);
+      if (pvr_error != PVR2D_OK) {
+        GST_ERROR_OBJECT (pool->element, "Failed to Unwrap buffer memory"
+            "returned %d", pvr_error);
+      }
+      self->wrapped = FALSE;
     }
     MemMgr_Free ((void *) GST_BUFFER_DATA (self));
     GST_BUFFER_DATA (self) = NULL;
@@ -188,8 +193,25 @@ gst_pvr_bufferpool_new (GstElement * element, GstCaps * caps, gint num_buffers,
   return self;
 }
 
+static void
+unwrap_buffer (gpointer buffer, gpointer user_data)
+{
+  PVR2DERROR pvr_error;
+  GstDucatiBuffer *buf = GST_DUCATIBUFFER (buffer);
+  GstPvrBufferPool *pool = (GstPvrBufferPool *) user_data;
+
+  if (buf->wrapped) {
+    pvr_error = PVR2DMemFree (pool->pvr_context, buf->src_mem);
+    if (pvr_error != PVR2D_OK) {
+      GST_ERROR_OBJECT (pool->element, "Failed to Unwrap buffer memory"
+          "returned %d", pvr_error);
+    }
+    buf->wrapped = FALSE;
+  }
+}
+
 void
-gst_pvr_bufferpool_stop_running (GstPvrBufferPool * self)
+gst_pvr_bufferpool_stop_running (GstPvrBufferPool * self, gboolean unwrap)
 {
   gboolean empty = FALSE;
 
@@ -213,6 +235,9 @@ gst_pvr_bufferpool_stop_running (GstPvrBufferPool * self)
       empty = TRUE;
   }
 
+  if (unwrap)
+    g_queue_foreach (self->used_buffers, unwrap_buffer, self);
+
   gst_mini_object_unref (GST_MINI_OBJECT (self));
 }
 
diff --git a/sys/pvr2d/gstpvrbufferpool.h b/sys/pvr2d/gstpvrbufferpool.h
index 00f7235..1d90472 100644
--- a/sys/pvr2d/gstpvrbufferpool.h
+++ b/sys/pvr2d/gstpvrbufferpool.h
@@ -65,7 +65,7 @@ struct _GstPvrBufferPool
 GstPvrBufferPool * gst_pvr_bufferpool_new (GstElement * element,
     GstCaps * caps, gint num_buffers, gint size,
     PVR2DCONTEXTHANDLE pvr_context);
-void gst_pvr_bufferpool_stop_running (GstPvrBufferPool * pool);
+void gst_pvr_bufferpool_stop_running (GstPvrBufferPool * pool, gboolean unwrap);
 GstDucatiBuffer * gst_pvr_bufferpool_get (GstPvrBufferPool * self,
     GstBuffer * orig);
 
@@ -78,6 +78,7 @@ struct _GstDucatiBuffer {
   GstPvrBufferPool *pool; /* buffer-pool that this buffer belongs to */
   GstBuffer       *orig;     /* original buffer, if we need to copy output */
   PVR2DMEMINFO *src_mem; /* Memory wrapped by pvr */
+  gboolean wrapped;
 };
 
 GstBuffer * gst_ducati_buffer_get (GstDucatiBuffer * self);
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 8177524..421d657 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -787,7 +787,7 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   if (pvrvideosink->buffer_pool) {
     if (!gst_caps_is_equal (pvrvideosink->buffer_pool->caps, caps)) {
       GST_INFO_OBJECT (pvrvideosink, "in set caps, pool->caps != caps");
-      gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool);
+      gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool, FALSE);
       pvrvideosink->buffer_pool = NULL;
     }
   }
@@ -1102,7 +1102,7 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
           pvrvideosink->buffer_pool->size != size)) {
     if (pvrvideosink->buffer_pool) {
       GST_INFO_OBJECT (pvrvideosink, "in buffer alloc, pool->size != size");
-      gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool);
+      gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool, FALSE);
     }
 
     GST_LOG_OBJECT (pvrvideosink, "Creating a buffer pool with %d buffers",
@@ -1193,7 +1193,7 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
   /* Clear image pool as the images are unusable anyway */
   g_mutex_lock (pvrvideosink->pool_lock);
   if (pvrvideosink->buffer_pool) {
-    gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool);
+    gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool, FALSE);
     pvrvideosink->buffer_pool = NULL;
   }
   g_mutex_unlock (pvrvideosink->pool_lock);
@@ -1423,7 +1423,7 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
   g_mutex_lock (pvrvideosink->pool_lock);
   pvrvideosink->pool_invalid = TRUE;
   if (pvrvideosink->buffer_pool) {
-    gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool);
+    gst_pvr_bufferpool_stop_running (pvrvideosink->buffer_pool, TRUE);
     pvrvideosink->buffer_pool = NULL;
   }
   g_mutex_unlock (pvrvideosink->pool_lock);
-- 
1.7.5.4

