From 6fee1425b6f7e10cc6e85b0801611d71a8a4989b Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <lucianafujii@collabora.co.uk>
Date: Sun, 20 Nov 2011 21:39:03 -0500
Subject: [PATCH 125/154] pvrvideosink: consider cropping when resizing for
 par

When configuring pixel-aspect-ratio consider crop event.
---
 sys/pvr2d/gstpvrvideosink.c |  116 ++++++++++++++++++++++++------------------
 sys/pvr2d/gstpvrvideosink.h |    4 ++
 2 files changed, 70 insertions(+), 50 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index f8b43ce..362162f 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -809,6 +809,55 @@ gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink * pvrvideosink,
 /* Element stuff */
 
 static gboolean
+gst_pvrvideosink_configure_overlay (GstPVRVideoSink * pvrvideosink, gint width,
+    gint height, gint video_par_n, gint video_par_d, gint display_par_n,
+    gint display_par_d)
+{
+  guint calculated_par_n;
+  guint calculated_par_d;
+
+  if (!gst_video_calculate_display_ratio (&calculated_par_n, &calculated_par_d,
+          width, height, video_par_n, video_par_d, display_par_n,
+          display_par_d)) {
+    GST_ELEMENT_ERROR (pvrvideosink, CORE, NEGOTIATION, (NULL),
+        ("Error calculating the output display ratio of the video."));
+    return FALSE;
+  }
+
+  GST_DEBUG_OBJECT (pvrvideosink,
+      "video width/height: %dx%d, calculated display ratio: %d/%d",
+      width, height, calculated_par_n, calculated_par_d);
+
+  /* now find a width x height that respects this display ratio.
+   * prefer those that have one of w/h the same as the incoming video
+   * using wd / hd = calculated_pad_n / calculated_par_d */
+
+  /* start with same height, because of interlaced video */
+  /* check hd / calculated_par_d is an integer scale factor, and scale wd with the PAR */
+  if (height % calculated_par_d == 0) {
+    GST_DEBUG_OBJECT (pvrvideosink, "keeping video height");
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = (guint)
+        gst_util_uint64_scale_int (height, calculated_par_n, calculated_par_d);
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
+  } else if (width % calculated_par_n == 0) {
+    GST_DEBUG_OBJECT (pvrvideosink, "keeping video width");
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = width;
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = (guint)
+        gst_util_uint64_scale_int (width, calculated_par_d, calculated_par_n);
+  } else {
+    GST_DEBUG_OBJECT (pvrvideosink, "approximating while keeping video height");
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = (guint)
+        gst_util_uint64_scale_int (height, calculated_par_n, calculated_par_d);
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
+  }
+  GST_DEBUG_OBJECT (pvrvideosink, "scaling to %dx%d",
+      GST_VIDEO_SINK_WIDTH (pvrvideosink),
+      GST_VIDEO_SINK_HEIGHT (pvrvideosink));
+
+  return TRUE;
+}
+
+static gboolean
 gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
 {
   GstPVRVideoSink *pvrvideosink;
@@ -817,12 +866,6 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   gint width, height;
   const GValue *fps;
   const GValue *caps_par;
-  gint video_par_n;
-  gint video_par_d;
-  gint display_par_n;
-  gint display_par_d;
-  guint calculated_par_n;
-  guint calculated_par_d;
   GstQuery *query;
 
   pvrvideosink = GST_PVRVIDEOSINK (bsink);
@@ -847,61 +890,28 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   /* get video's pixel-aspect-ratio */
   caps_par = gst_structure_get_value (structure, "pixel-aspect-ratio");
   if (caps_par) {
-    video_par_n = gst_value_get_fraction_numerator (caps_par);
-    video_par_d = gst_value_get_fraction_denominator (caps_par);
+    pvrvideosink->video_par_n = gst_value_get_fraction_numerator (caps_par);
+    pvrvideosink->video_par_d = gst_value_get_fraction_denominator (caps_par);
   } else {
-    video_par_n = 1;
-    video_par_d = 1;
+    pvrvideosink->video_par_n = 1;
+    pvrvideosink->video_par_d = 1;
   }
 
   /* get display's pixel-aspect-ratio */
   if (pvrvideosink->display_par) {
-    display_par_n =
+    pvrvideosink->display_par_n =
         gst_value_get_fraction_numerator (pvrvideosink->display_par);
-    display_par_d =
+    pvrvideosink->display_par_d =
         gst_value_get_fraction_denominator (pvrvideosink->display_par);
   } else {
-    display_par_n = 1;
-    display_par_d = 1;
+    pvrvideosink->display_par_n = 1;
+    pvrvideosink->display_par_d = 1;
   }
 
-  if (!gst_video_calculate_display_ratio (&calculated_par_n, &calculated_par_d,
-          width, height, video_par_n, video_par_d, display_par_n,
-          display_par_d)) {
-    GST_ELEMENT_ERROR (pvrvideosink, CORE, NEGOTIATION, (NULL),
-        ("Error calculating the output display ratio of the video."));
+  if (!gst_pvrvideosink_configure_overlay (pvrvideosink, width, height,
+          pvrvideosink->video_par_n, pvrvideosink->video_par_d,
+          pvrvideosink->display_par_n, pvrvideosink->display_par_d))
     return FALSE;
-  }
-
-  GST_DEBUG_OBJECT (pvrvideosink,
-      "video width/height: %dx%d, calculated display ratio: %d/%d",
-      width, height, calculated_par_n, calculated_par_d);
-
-  /* now find a width x height that respects this display ratio.
-   * prefer those that have one of w/h the same as the incoming video
-   * using wd / hd = calculated_pad_n / calculated_par_d */
-
-  /* start with same height, because of interlaced video */
-  /* check hd / calculated_par_d is an integer scale factor, and scale wd with the PAR */
-  if (height % calculated_par_d == 0) {
-    GST_DEBUG_OBJECT (pvrvideosink, "keeping video height");
-    GST_VIDEO_SINK_WIDTH (pvrvideosink) = (guint)
-        gst_util_uint64_scale_int (height, calculated_par_n, calculated_par_d);
-    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
-  } else if (width % calculated_par_n == 0) {
-    GST_DEBUG_OBJECT (pvrvideosink, "keeping video width");
-    GST_VIDEO_SINK_WIDTH (pvrvideosink) = width;
-    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = (guint)
-        gst_util_uint64_scale_int (width, calculated_par_d, calculated_par_n);
-  } else {
-    GST_DEBUG_OBJECT (pvrvideosink, "approximating while keeping video height");
-    GST_VIDEO_SINK_WIDTH (pvrvideosink) = (guint)
-        gst_util_uint64_scale_int (height, calculated_par_n, calculated_par_d);
-    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
-  }
-  GST_DEBUG_OBJECT (pvrvideosink, "scaling to %dx%d",
-      GST_VIDEO_SINK_WIDTH (pvrvideosink),
-      GST_VIDEO_SINK_HEIGHT (pvrvideosink));
 
   if (pvrvideosink->current_caps) {
     GST_DEBUG_OBJECT (pvrvideosink, "already have caps set");
@@ -1099,12 +1109,18 @@ gst_pvrvideosink_event (GstBaseSink * bsink, GstEvent * event)
         c->bottom = GST_VIDEO_SINK_HEIGHT (pvrvideosink);
       else
         c->bottom = top + height;
+
+      if (!gst_pvrvideosink_configure_overlay (pvrvideosink, width, height,
+              pvrvideosink->video_par_n, pvrvideosink->video_par_d,
+              pvrvideosink->display_par_n, pvrvideosink->display_par_d))
+        return FALSE;
       break;
     }
     default:
       res = TRUE;
   }
 
+
   return res;
 }
 
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 546e0f4..6d39e53 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -144,6 +144,10 @@ struct _GstPVRVideoSink
   gboolean have_render_rect;
 
   GValue *display_par;
+  gint video_par_n;
+  gint video_par_d;
+  gint display_par_n;
+  gint display_par_d;
 
   gchar *media_title;
   gboolean redraw_borders;
-- 
1.7.5.4

