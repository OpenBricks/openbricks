From 292ea3f25be38aa73219eb8e501faf53517de553 Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Tue, 13 Sep 2011 19:51:56 -0300
Subject: [PATCH 074/154] pvr: Add more xwindow controls

Add render rectangle and more xwindow properties to allow implementing
XOverlay later.
---
 sys/pvr2d/gstpvrvideosink.c |  196 +++++++++++++++++++++++++++++++++++++------
 sys/pvr2d/gstpvrvideosink.h |   16 ++++-
 2 files changed, 185 insertions(+), 27 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 6d9875c..2a7c837 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -62,6 +62,8 @@ typedef struct DRI2WS_Display_TAG
 static void gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink);
 static GstFlowReturn gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink,
     guint64 offset, guint size, GstCaps * caps, GstBuffer ** buf);
+static void gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink *
+    pvrvideosink, GstXWindow * xwindow, GstVideoRectangle rect);
 
 static GstStaticPadTemplate gst_pvrvideosink_sink_template_factory =
 GST_STATIC_PAD_TEMPLATE ("sink",
@@ -143,50 +145,90 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
         "returned %d", pvr_error);
     return NULL;
   }
+  dcontext->screen_num = DefaultScreen (dcontext->x_display);
+  dcontext->black = XBlackPixel (dcontext->x_display, dcontext->screen_num);
 
   return dcontext;
 }
 
+static void
+gst_pvrvideosink_xwindow_set_title (GstPVRVideoSink * pvrvideosink,
+    GstXWindow * xwindow, const gchar * media_title)
+{
+  if (media_title) {
+    g_free (pvrvideosink->media_title);
+    pvrvideosink->media_title = g_strdup (media_title);
+  }
+  if (xwindow) {
+    /* we have a window */
+    if (xwindow->internal) {
+      XTextProperty xproperty;
+      const gchar *app_name;
+      const gchar *title = NULL;
+      gchar *title_mem = NULL;
+
+      /* set application name as a title */
+      app_name = g_get_application_name ();
+
+      if (app_name && pvrvideosink->media_title) {
+        title = title_mem = g_strconcat (pvrvideosink->media_title, " : ",
+            app_name, NULL);
+      } else if (app_name) {
+        title = app_name;
+      } else if (pvrvideosink->media_title) {
+        title = pvrvideosink->media_title;
+      }
+
+      if (title) {
+        if ((XStringListToTextProperty (((char **) &title), 1,
+                    &xproperty)) != 0) {
+          XSetWMName (pvrvideosink->dcontext->x_display, xwindow->window,
+              &xproperty);
+          XFree (xproperty.value);
+        }
+
+        g_free (title_mem);
+      }
+    }
+  }
+}
+
 static GstXWindow *
-gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
+gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
+    gint height)
 {
   WSEGLError glerror;
   WSEGLDrawableParams source_params;
   WSEGLDrawableParams render_params;
   Window root;
-  gint video_width;
-  gint video_height;
-  GstStructure *structure;
-  gboolean ret;
   GstXWindow *xwindow;
   GstDrawContext *dcontext;
+  XGCValues values;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
 
   dcontext = pvrvideosink->dcontext;
   xwindow = g_new0 (GstXWindow, 1);
 
-  structure = gst_caps_get_structure (caps, 0);
-  ret = gst_structure_get_int (structure, "width", &video_width);
-  ret &= gst_structure_get_int (structure, "height", &video_height);
+  root = DefaultRootWindow (dcontext->x_display);
+  xwindow->window_attributes.event_mask =
+      ExposureMask | PointerMotionMask | KeyPressMask;
 
-  if (!ret) {
-    GST_ERROR_OBJECT (pvrvideosink, "Caps are incomplete");
-    return NULL;
-  }
+  pvrvideosink->render_rect.x = pvrvideosink->render_rect.y = 0;
+  pvrvideosink->render_rect.w = width;
+  pvrvideosink->render_rect.h = height;
+  xwindow->width = width;
+  xwindow->height = height;
+  xwindow->internal = TRUE;
 
-  if (video_width > dcontext->display_width)
-    video_width = dcontext->display_width;
-  if (video_height > dcontext->display_height)
-    video_height = dcontext->display_height;
+  g_mutex_lock (pvrvideosink->x_lock);
 
   root = DefaultRootWindow (dcontext->x_display);
   xwindow->window_attributes.event_mask =
       ExposureMask | PointerMotionMask | KeyPressMask;
 
-  xwindow->window = XCreateWindow (dcontext->x_display, root, 0, 0,
-      video_width, video_height, 0, CopyFromParent, InputOutput,
-      CopyFromParent, CWEventMask, &(xwindow->window_attributes));
+  xwindow->window = XCreateSimpleWindow (dcontext->x_display, root, 0, 0,
+      width, height, 2, 2, pvrvideosink->dcontext->black);
 
   XMapWindow (dcontext->x_display, xwindow->window);
 
@@ -195,6 +237,13 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
   XSetWindowBackgroundPixmap (pvrvideosink->dcontext->x_display,
       xwindow->window, None);
 
+  gst_pvrvideosink_xwindow_set_title (pvrvideosink, xwindow, NULL);
+
+  xwindow->gc = XCreateGC (pvrvideosink->dcontext->x_display,
+      xwindow->window, 0, &values);
+
+  g_mutex_unlock (pvrvideosink->x_lock);
+
   glerror =
       dcontext->wsegl_table->
       pfnWSEGL_CreateWindowDrawable (dcontext->display_handle,
@@ -215,10 +264,10 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, GstCaps * caps)
   dcontext->p_blt_info->CopyCode = PVR2DROPcopy;
   dcontext->p_blt_info->BlitFlags = PVR2D_BLIT_DISABLE_ALL;
 
-  dcontext->p_blt_info->DstSurfWidth = video_width;
-  dcontext->p_blt_info->DstSurfHeight = video_height;
+  dcontext->p_blt_info->DstSurfWidth = width;
+  dcontext->p_blt_info->DstSurfHeight = height;
   dcontext->p_blt_info->DstStride =
-      gst_video_format_get_row_stride (GST_VIDEO_FORMAT_BGRx, 0, video_width);
+      gst_video_format_get_row_stride (GST_VIDEO_FORMAT_BGRx, 0, width);
   dcontext->p_blt_info->DstFormat = PVR2D_ARGB8888;
 
   GST_DEBUG_OBJECT (pvrvideosink, "end");
@@ -237,6 +286,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   gint video_width;
   gint video_height;
   gboolean ret;
+  gboolean draw_border = FALSE;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
 
@@ -265,6 +315,25 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   if (video_height > dcontext->display_height)
     video_height = dcontext->display_height;
 
+  g_mutex_lock (pvrvideosink->flow_lock);
+
+  /* Draw borders when displaying the first frame. After this
+     draw borders only on expose event or after a size change. */
+  if (!(pvrvideosink->current_buffer) || pvrvideosink->redraw_borders) {
+    draw_border = TRUE;
+  }
+
+  /* Store a reference to the last image we put, lose the previous one */
+  if (buffer && pvrvideosink->current_buffer != buffer) {
+    if (pvrvideosink->current_buffer) {
+      GST_LOG_OBJECT (pvrvideosink, "unreffing %p",
+          pvrvideosink->current_buffer);
+      gst_buffer_unref (GST_BUFFER_CAST (pvrvideosink->current_buffer));
+    }
+    GST_LOG_OBJECT (pvrvideosink, "reffing %p as our current buffer", buffer);
+    pvrvideosink->current_buffer = gst_buffer_ref (buffer);
+  }
+
   dcontext->p_blt_info->DSizeX = video_width;
   dcontext->p_blt_info->DSizeY = video_height;
   dcontext->p_blt_info->DstX = 0;
@@ -321,6 +390,14 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   dcontext->wsegl_table->pfnWSEGL_SwapDrawable (dcontext->drawable_handle, 1);
   PVR2DQueryBlitsComplete (dcontext->pvr_context, dcontext->dst_mem, 1);
 
+  g_mutex_lock (pvrvideosink->x_lock);
+  if (draw_border) {
+    gst_pvrvideosink_xwindow_draw_borders (pvrvideosink, pvrvideosink->xwindow,
+        pvrvideosink->render_rect);
+    pvrvideosink->redraw_borders = FALSE;
+  }
+  g_mutex_unlock (pvrvideosink->x_lock);
+
 done:
   pvr_error = PVR2DMemFree (dcontext->pvr_context, dcontext->src_mem);
   if (pvr_error != PVR2D_OK) {
@@ -328,7 +405,9 @@ done:
         "returned %d", pvr_error);
     return;
   }
+
   GST_DEBUG_OBJECT (pvrvideosink, "end");
+  g_mutex_unlock (pvrvideosink->flow_lock);
 }
 
 static void
@@ -338,6 +417,52 @@ gst_pvrvideosink_destroy_drawable (GstPVRVideoSink * pvrvideosink)
     PVR2DDestroyDeviceContext (pvrvideosink->dcontext->pvr_context);
 }
 
+/* We are called with the x_lock taken */
+static void
+gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink * pvrvideosink,
+    GstXWindow * xwindow, GstVideoRectangle rect)
+{
+  gint t1, t2;
+
+  g_return_if_fail (GST_IS_PVRVIDEOSINK (pvrvideosink));
+  g_return_if_fail (xwindow != NULL);
+
+  XSetForeground (pvrvideosink->dcontext->x_display, xwindow->gc,
+      pvrvideosink->dcontext->black);
+
+  /* Left border */
+  if (rect.x > pvrvideosink->render_rect.x) {
+    XFillRectangle (pvrvideosink->dcontext->x_display,
+        xwindow->window, xwindow->gc,
+        pvrvideosink->render_rect.x, pvrvideosink->render_rect.y,
+        rect.x - pvrvideosink->render_rect.x, pvrvideosink->render_rect.h);
+  }
+
+  /* Right border */
+  t1 = rect.x + rect.w;
+  t2 = pvrvideosink->render_rect.x + pvrvideosink->render_rect.w;
+  if (t1 < t2) {
+    XFillRectangle (pvrvideosink->dcontext->x_display, xwindow->window,
+        xwindow->gc, t1, pvrvideosink->render_rect.y, t2 - t1,
+        pvrvideosink->render_rect.h);
+  }
+
+  /* Top border */
+  if (rect.y > pvrvideosink->render_rect.y) {
+    XFillRectangle (pvrvideosink->dcontext->x_display, xwindow->window,
+        xwindow->gc, pvrvideosink->render_rect.x, pvrvideosink->render_rect.y,
+        pvrvideosink->render_rect.w, rect.y - pvrvideosink->render_rect.y);
+  }
+
+  /* Bottom border */
+  t1 = rect.y + rect.h;
+  t2 = pvrvideosink->render_rect.y + pvrvideosink->render_rect.h;
+  if (t1 < t2) {
+    XFillRectangle (pvrvideosink->dcontext->x_display, xwindow->window,
+        xwindow->gc, pvrvideosink->render_rect.x, t1,
+        pvrvideosink->render_rect.w, t2 - t1);
+  }
+}
 
 /* Element stuff */
 
@@ -486,6 +611,8 @@ gst_pvrvideosink_change_state (GstElement * element, GstStateChange transition)
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       pvrvideosink->fps_n = 0;
       pvrvideosink->fps_d = 1;
+      GST_VIDEO_SINK_WIDTH (pvrvideosink) = 0;
+      GST_VIDEO_SINK_HEIGHT (pvrvideosink) = 0;
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
       gst_pvrvideosink_reset (pvrvideosink);
@@ -656,6 +783,17 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
 
     /* Caps may have changed in set_caps */
     caps = pvrvideosink->current_caps;
+    structure = gst_caps_get_structure (caps, 0);
+    if (!gst_structure_get_int (structure, "width", &width) ||
+        !gst_structure_get_int (structure, "height", &height)) {
+      GST_WARNING_OBJECT (pvrvideosink, "invalid caps for buffer allocation %"
+          GST_PTR_FORMAT, caps);
+      ret = GST_FLOW_NOT_NEGOTIATED;
+      goto beach;
+    }
+
+    src.w = width;
+    src.h = height;
 
     GST_LOG_OBJECT (pvrvideosink, "Creating a buffer pool with %d buffers",
         pvrvideosink->num_buffers);
@@ -673,12 +811,15 @@ gst_pvrvideosink_buffer_alloc (GstBaseSink * bsink, guint64 offset, guint size,
     } else {
       g_mutex_unlock (pvrvideosink->flow_lock);
     }
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = width;
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
   }
   pvrvideo = gst_pvr_bufferpool_get (pvrvideosink->buffer_pool, NULL);
 
   g_mutex_lock (pvrvideosink->flow_lock);
   if (!pvrvideosink->xwindow)
-    pvrvideosink->xwindow = gst_pvrvideosink_create_window (pvrvideosink, caps);
+    pvrvideosink->xwindow = gst_pvrvideosink_create_window (pvrvideosink, width,
+        height);
   g_mutex_unlock (pvrvideosink->flow_lock);
 
   *buf = GST_BUFFER_CAST (pvrvideo);
@@ -725,16 +866,16 @@ gst_pvrvideosink_set_event_handling (GstXOverlay * overlay,
 
   if (handle_events) {
     if (pvrvideosink->xwindow->internal) {
-      XSelectInput (pvrvideosink->xcontext->disp, pvrvideosink->xwindow->win,
+      XSelectInput (pvrvideosink->dcontext->disp, pvrvideosink->xwindow->win,
           ExposureMask | StructureNotifyMask | PointerMotionMask |
           KeyPressMask | KeyReleaseMask | ButtonPressMask | ButtonReleaseMask);
     } else {
-      XSelectInput (pvrvideosink->xcontext->disp, pvrvideosink->xwindow->win,
+      XSelectInput (pvrvideosink->dcontext->disp, pvrvideosink->xwindow->win,
           ExposureMask | StructureNotifyMask | PointerMotionMask |
           KeyPressMask | KeyReleaseMask);
     }
   } else {
-    XSelectInput (pvrvideosink->xcontext->disp, pvrvideosink->xwindow->win, 0);
+    XSelectInput (pvrvideosink->dcontext->disp, pvrvideosink->xwindow->win, 0);
   }
 
   g_mutex_unlock (pvrvideosink->x_lock);
@@ -844,6 +985,7 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->fps_d = 1;
 
   pvrvideosink->flow_lock = g_mutex_new ();
+  pvrvideosink->x_lock = g_mutex_new ();
   pvrvideosink->pool_lock = g_mutex_new ();
   pvrvideosink->buffer_pool = NULL;
 
@@ -854,6 +996,8 @@ gst_pvrvideosink_init (GstPVRVideoSink * pvrvideosink)
   pvrvideosink->min_queued_bufs = DEFAULT_MIN_QUEUED_BUFS;
   pvrvideosink->dcontext = NULL;
   pvrvideosink->xwindow = NULL;
+  pvrvideosink->redraw_borders = TRUE;
+  pvrvideosink->current_buffer = NULL;
 }
 
 static void
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 3fad9c4..b9c620c 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -32,6 +32,7 @@
 #include <EGL/egl.h>
 #include <sgx/wsegl.h>
 #include <X11/Xlib.h>
+#include <X11/Xutil.h>
 
 G_BEGIN_DECLS
 #define GST_TYPE_PVRVIDEOSINK (gst_pvrvideosink_get_type())
@@ -75,16 +76,20 @@ struct _GstDrawContext
   WSEGLRotationAngle rotation;
 
   Display *x_display;
+  gint screen_num;
+  gulong black;
 };
 
 struct _GstXWindow
 {
   Window window;
   XSetWindowAttributes window_attributes;
+  gint width, height;
+  gboolean internal;
+  GC gc;
 };
 
 
-
 /**
  * GstPVRVideoSink:
  * @running: used to inform @event_thread if it should run/shutdown
@@ -93,6 +98,7 @@ struct _GstXWindow
  * @flow_lock: used to protect data flow routines from external calls such as
  * events from @event_thread or methods from the #GstXOverlay interface
  * @pool_lock: used to protect the buffer pool
+ * @x_lock: used to protect X calls
  * @buffer_pool: a list of #GstPVRVideoBuffer that could be reused at next buffer
  * allocation call
  * @keep_aspect: used to remember if reverse negotiation scaling should respect
@@ -114,6 +120,7 @@ struct _GstPVRVideoSink
   GMutex *flow_lock;
 
   GMutex *pool_lock;
+  GMutex *x_lock;
   GstPvrBufferPool *buffer_pool;
   gint num_buffers;
   gboolean num_buffers_can_change;
@@ -124,6 +131,13 @@ struct _GstPVRVideoSink
   GstCaps *current_caps;
   GstDrawContext *dcontext;
   GstXWindow *xwindow;
+
+  GstVideoRectangle render_rect;
+  gboolean have_render_rect;
+
+  gchar *media_title;
+  gboolean redraw_borders;
+  GstBuffer *current_buffer;
 };
 
 struct _GstPVRVideoSinkClass
-- 
1.7.5.4

