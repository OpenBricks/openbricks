From da102a201cb57c17e494d0dc1401c2c6d441d73d Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <lucianafujii@collabora.co.uk>
Date: Wed, 16 Nov 2011 12:46:51 -0500
Subject: [PATCH 124/154] pvrvideosink: respect pixel-aspect-ratio

Implement pixel-aspect-ratio handling.
---
 sys/pvr2d/gstpvrvideosink.c |  147 ++++++++++++++++++++++++++++++++++++++++++-
 sys/pvr2d/gstpvrvideosink.h |    6 ++
 2 files changed, 150 insertions(+), 3 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 421d657..f8b43ce 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -97,6 +97,58 @@ static GstVideoSinkClass *parent_class = NULL;
 #define GST_PVRVIDEO_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBuffer))
 #define GST_PVRVIDEO_BUFFER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PVRVIDEO_BUFFER, GstPVRVideoBufferClass))
 
+/* This function calculates the pixel aspect ratio based on the properties
+ *  * in the xcontext structure and stores it there. */
+static void
+gst_pvrvideosink_calculate_pixel_aspect_ratio (GstDrawContext * dcontext)
+{
+  static const gint par[][2] = {
+    {1, 1},                     /* regular screen */
+    {16, 15},                   /* PAL TV */
+    {11, 10},                   /* 525 line Rec.601 video */
+    {54, 59},                   /* 625 line Rec.601 video */
+    {64, 45},                   /* 1280x1024 on 16:9 display */
+    {5, 3},                     /* 1280x1024 on 4:3 display */
+    {4, 3}                      /* 800x600 on 16:9 display */
+  };
+  gint i;
+  gint index;
+  gdouble ratio;
+  gdouble delta;
+
+#define DELTA(idx) (ABS (ratio - ((gdouble) par[idx][0] / par[idx][1])))
+
+  /* first calculate the "real" ratio; which is the "physical" w/h divided
+   * by the w/h in pixels of the display */
+  ratio = (gdouble) (dcontext->physical_width * dcontext->display_height)
+      / (dcontext->physical_height * dcontext->display_width);
+
+  GST_DEBUG ("calculated pixel aspect ratio: %f", ratio);
+  /* now find the one from par[][2] with the lowest delta to the real one */
+  delta = DELTA (0);
+  index = 0;
+
+  for (i = 1; i < sizeof (par) / (sizeof (gint) * 2); ++i) {
+    gdouble this_delta = DELTA (i);
+
+    if (this_delta < delta) {
+      index = i;
+      delta = this_delta;
+    }
+  }
+
+  GST_DEBUG ("Decided on index %d (%d/%d)", index,
+      par[index][0], par[index][1]);
+
+  g_free (dcontext->par);
+  dcontext->par = g_new0 (GValue, 1);
+  g_value_init (dcontext->par, GST_TYPE_FRACTION);
+  gst_value_set_fraction (dcontext->par, par[index][0], par[index][1]);
+  GST_DEBUG ("set dcontext PAR to %d/%d",
+      gst_value_get_fraction_numerator (dcontext->par),
+      gst_value_get_fraction_denominator (dcontext->par));
+}
+
 static void
 gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
 {
@@ -290,6 +342,7 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
   DRI2WSDisplay *displayImpl;
   WSEGLError glerror;
   const WSEGLCaps *glcaps;
+  PVR2DMISCDISPLAYINFO misc_display_info;
 
   dcontext = g_new0 (GstDrawContext, 1);
   dcontext->p_blt_info = 0;
@@ -332,8 +385,18 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
         "returned %d", pvr_error);
     return NULL;
   }
+  pvr_error = PVR2DGetMiscDisplayInfo (dcontext->pvr_context,
+      &misc_display_info);
+  if (pvr_error != PVR2D_OK) {
+    GST_ERROR_OBJECT (pvrvideosink, "Failed) to get display info"
+        "returned %d", pvr_error);
+    return NULL;
+  }
+  dcontext->physical_width = misc_display_info.ulPhysicalWidthmm;
+  dcontext->physical_height = misc_display_info.ulPhysicalHeightmm;
   dcontext->screen_num = DefaultScreen (dcontext->x_display);
   dcontext->black = XBlackPixel (dcontext->x_display, dcontext->screen_num);
+  gst_pvrvideosink_calculate_pixel_aspect_ratio (dcontext);
 
   return dcontext;
 }
@@ -753,6 +816,13 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   GstStructure *structure;
   gint width, height;
   const GValue *fps;
+  const GValue *caps_par;
+  gint video_par_n;
+  gint video_par_d;
+  gint display_par_n;
+  gint display_par_d;
+  guint calculated_par_n;
+  guint calculated_par_d;
   GstQuery *query;
 
   pvrvideosink = GST_PVRVIDEOSINK (bsink);
@@ -774,6 +844,65 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
     return FALSE;
   }
 
+  /* get video's pixel-aspect-ratio */
+  caps_par = gst_structure_get_value (structure, "pixel-aspect-ratio");
+  if (caps_par) {
+    video_par_n = gst_value_get_fraction_numerator (caps_par);
+    video_par_d = gst_value_get_fraction_denominator (caps_par);
+  } else {
+    video_par_n = 1;
+    video_par_d = 1;
+  }
+
+  /* get display's pixel-aspect-ratio */
+  if (pvrvideosink->display_par) {
+    display_par_n =
+        gst_value_get_fraction_numerator (pvrvideosink->display_par);
+    display_par_d =
+        gst_value_get_fraction_denominator (pvrvideosink->display_par);
+  } else {
+    display_par_n = 1;
+    display_par_d = 1;
+  }
+
+  if (!gst_video_calculate_display_ratio (&calculated_par_n, &calculated_par_d,
+          width, height, video_par_n, video_par_d, display_par_n,
+          display_par_d)) {
+    GST_ELEMENT_ERROR (pvrvideosink, CORE, NEGOTIATION, (NULL),
+        ("Error calculating the output display ratio of the video."));
+    return FALSE;
+  }
+
+  GST_DEBUG_OBJECT (pvrvideosink,
+      "video width/height: %dx%d, calculated display ratio: %d/%d",
+      width, height, calculated_par_n, calculated_par_d);
+
+  /* now find a width x height that respects this display ratio.
+   * prefer those that have one of w/h the same as the incoming video
+   * using wd / hd = calculated_pad_n / calculated_par_d */
+
+  /* start with same height, because of interlaced video */
+  /* check hd / calculated_par_d is an integer scale factor, and scale wd with the PAR */
+  if (height % calculated_par_d == 0) {
+    GST_DEBUG_OBJECT (pvrvideosink, "keeping video height");
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = (guint)
+        gst_util_uint64_scale_int (height, calculated_par_n, calculated_par_d);
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
+  } else if (width % calculated_par_n == 0) {
+    GST_DEBUG_OBJECT (pvrvideosink, "keeping video width");
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = width;
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = (guint)
+        gst_util_uint64_scale_int (width, calculated_par_d, calculated_par_n);
+  } else {
+    GST_DEBUG_OBJECT (pvrvideosink, "approximating while keeping video height");
+    GST_VIDEO_SINK_WIDTH (pvrvideosink) = (guint)
+        gst_util_uint64_scale_int (height, calculated_par_n, calculated_par_d);
+    GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
+  }
+  GST_DEBUG_OBJECT (pvrvideosink, "scaling to %dx%d",
+      GST_VIDEO_SINK_WIDTH (pvrvideosink),
+      GST_VIDEO_SINK_HEIGHT (pvrvideosink));
+
   if (pvrvideosink->current_caps) {
     GST_DEBUG_OBJECT (pvrvideosink, "already have caps set");
     if (gst_caps_is_equal (pvrvideosink->current_caps, caps)) {
@@ -828,13 +957,12 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   } else {
     g_mutex_unlock (pvrvideosink->flow_lock);
   }
-  GST_VIDEO_SINK_WIDTH (pvrvideosink) = width;
-  GST_VIDEO_SINK_HEIGHT (pvrvideosink) = height;
 
   g_mutex_lock (pvrvideosink->flow_lock);
   if (!pvrvideosink->xwindow)
     pvrvideosink->xwindow = gst_pvrvideosink_create_window (pvrvideosink,
-        width, height);
+        GST_VIDEO_SINK_WIDTH (pvrvideosink),
+        GST_VIDEO_SINK_HEIGHT (pvrvideosink));
   g_mutex_unlock (pvrvideosink->flow_lock);
 
   pvrvideosink->fps_n = gst_value_get_fraction_numerator (fps);
@@ -877,6 +1005,15 @@ gst_pvrvideosink_change_state (GstElement * element, GstStateChange transition)
         pvrvideosink->dcontext = dcontext;
         GST_OBJECT_UNLOCK (pvrvideosink);
       }
+
+      /* update object's pixel-aspect-ratio with calculated one */
+      if (!pvrvideosink->display_par) {
+        pvrvideosink->display_par = g_new0 (GValue, 1);
+        gst_value_init_and_copy (pvrvideosink->display_par,
+            pvrvideosink->dcontext->par);
+        GST_DEBUG_OBJECT (pvrvideosink, "set calculated PAR on object's PAR");
+      }
+
       gst_pvrvideosink_manage_event_thread (pvrvideosink);
       break;
     case GST_STATE_CHANGE_READY_TO_PAUSED:
@@ -1318,6 +1455,8 @@ gst_pvrvideosink_set_render_rectangle (GstXOverlay * overlay, gint x, gint y,
     pvrvideosink->render_rect.h = pvrvideosink->xwindow->height;
     pvrvideosink->have_render_rect = FALSE;
   }
+  GST_DEBUG_OBJECT (pvrvideosink, "render_rect is %dX%d",
+      pvrvideosink->render_rect.w, pvrvideosink->render_rect.h);
 }
 
 static void
@@ -1392,6 +1531,7 @@ gst_pvrvideosink_dcontext_clear (GstPVRVideoSink * pvrvideosink)
 
   if (dcontext->p_blt_info)
     g_free (dcontext->p_blt_info);
+  g_free (dcontext->par);
 
   g_mutex_lock (dcontext->x_lock);
   XCloseDisplay (dcontext->x_display);
@@ -1441,6 +1581,7 @@ gst_pvrvideosink_reset (GstPVRVideoSink * pvrvideosink)
     pvrvideosink->xwindow = NULL;
   }
 
+  g_free (pvrvideosink->display_par);
   gst_pvrvideosink_dcontext_clear (pvrvideosink);
 }
 
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 3092690..546e0f4 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -67,6 +67,10 @@ struct _GstDrawContext
   long display_width;
   long display_height;
 
+  gulong physical_width;
+  gulong physical_height;
+  GValue *par;
+
   /* WSEGL */
   const WSEGL_FunctionTable *wsegl_table;
 
@@ -139,6 +143,8 @@ struct _GstPVRVideoSink
   GstVideoRectangle render_rect;
   gboolean have_render_rect;
 
+  GValue *display_par;
+
   gchar *media_title;
   gboolean redraw_borders;
   GstBuffer *current_buffer;
-- 
1.7.5.4

