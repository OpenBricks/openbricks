From 7ec7f03915852caebaadf08418149385924319ce Mon Sep 17 00:00:00 2001
From: Luciana Fujii Pontello <luciana.fujii@collabora.co.uk>
Date: Fri, 23 Sep 2011 00:42:15 -0300
Subject: [PATCH 092/154] pvrvideosink: Implement force-aspect-ration

Implement keeping aspect ration of video. The borders are drawn using
PVR2DBlt.
---
 sys/pvr2d/gstpvrvideosink.c |  142 ++++++++++++++++++++++++++++++++++---------
 sys/pvr2d/gstpvrvideosink.h |    1 +
 2 files changed, 114 insertions(+), 29 deletions(-)

diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 27cbe32..a3b5024 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -114,6 +114,7 @@ gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
     g_mutex_unlock (pvrvideosink->x_lock);
     return;
   }
+  pvrvideosink->redraw_borders = TRUE;
 
   XGetWindowAttributes (pvrvideosink->dcontext->x_display,
       pvrvideosink->xwindow->window, &attr);
@@ -299,6 +300,7 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
     GST_ERROR_OBJECT (pvrvideosink, "Alloc of bltinfo failed");
     return NULL;
   }
+  dcontext->p_blt2d_info = g_new0 (PVR2DBLTINFO, 1);
 
   dcontext->x_display = XOpenDisplay (NULL);
 
@@ -460,6 +462,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   PVR2DFORMAT pvr_format = pvrvideosink->format == GST_VIDEO_FORMAT_NV12 ?
       PVR2D_YUV420_2PLANE : PVR2D_ARGB8888;
   PVR2DRECT *crop = &pvrvideosink->crop;
+  GstVideoRectangle result;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
   g_mutex_lock (pvrvideosink->flow_lock);
@@ -505,6 +508,20 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     pvrvideosink->current_buffer = gst_buffer_ref (buffer);
   }
 
+  if (pvrvideosink->keep_aspect) {
+    GstVideoRectangle src, dst;
+
+    src.w = GST_VIDEO_SINK_WIDTH (pvrvideosink);
+    src.h = GST_VIDEO_SINK_HEIGHT (pvrvideosink);
+    dst.w = pvrvideosink->render_rect.w;
+    dst.h = pvrvideosink->render_rect.h;
+    gst_video_sink_center_rect (src, dst, &result, TRUE);
+    result.x += pvrvideosink->render_rect.x;
+    result.y += pvrvideosink->render_rect.y;
+  } else {
+    memcpy (&result, &pvrvideosink->render_rect, sizeof (GstVideoRectangle));
+  }
+
   p_blt_3d->sDst.pSurfMemInfo = dcontext->dst_mem;
   p_blt_3d->sDst.SurfOffset = 0;
   p_blt_3d->sDst.Stride =
@@ -514,10 +531,10 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   p_blt_3d->sDst.SurfWidth = pvrvideosink->xwindow->width;
   p_blt_3d->sDst.SurfHeight = pvrvideosink->xwindow->height;
 
-  p_blt_3d->rcDest.left = pvrvideosink->render_rect.x;
-  p_blt_3d->rcDest.top = pvrvideosink->render_rect.y;
-  p_blt_3d->rcDest.right = pvrvideosink->render_rect.w;
-  p_blt_3d->rcDest.bottom = pvrvideosink->render_rect.h;
+  p_blt_3d->rcDest.left = result.x;
+  p_blt_3d->rcDest.top = result.y;
+  p_blt_3d->rcDest.right = result.w;
+  p_blt_3d->rcDest.bottom = result.h;
 
   p_blt_3d->sSrc.pSurfMemInfo = dcontext->src_mem;
   p_blt_3d->sSrc.SurfOffset = 0;
@@ -580,7 +597,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
 
   if (draw_border) {
     gst_pvrvideosink_xwindow_draw_borders (pvrvideosink, pvrvideosink->xwindow,
-        pvrvideosink->render_rect);
+        result);
     pvrvideosink->redraw_borders = FALSE;
   }
   g_mutex_unlock (pvrvideosink->x_lock);
@@ -613,49 +630,116 @@ gst_pvrvideosink_destroy_drawable (GstPVRVideoSink * pvrvideosink)
 
 /* We are called with the x_lock taken */
 static void
+gst_pvrvideosink_pvrfill_rectangle (GstPVRVideoSink * pvrvideosink,
+    GstVideoRectangle rect)
+{
+  PVR2DERROR pvr_error;
+  PPVR2DBLTINFO p_blt2d_info = 0;
+  GstDrawContext *dcontext = pvrvideosink->dcontext;
+
+  GST_DEBUG_OBJECT (pvrvideosink, "begin");
+
+  p_blt2d_info = dcontext->p_blt2d_info;
+
+  p_blt2d_info->pDstMemInfo = dcontext->dst_mem;
+  p_blt2d_info->BlitFlags = PVR2D_BLIT_DISABLE_ALL;
+  p_blt2d_info->DstOffset = 0;
+  p_blt2d_info->CopyCode = PVR2DROPclear;
+  p_blt2d_info->DstStride =
+      gst_video_format_get_row_stride (GST_VIDEO_FORMAT_BGRx, 0,
+      pvrvideosink->render_params.ui32Stride);
+  p_blt2d_info->DstFormat = PVR2D_ARGB8888;
+  p_blt2d_info->DstSurfWidth = pvrvideosink->xwindow->width;
+  p_blt2d_info->DstSurfHeight = pvrvideosink->xwindow->height;
+  p_blt2d_info->DstX = rect.x;
+  p_blt2d_info->DstY = rect.y;
+  p_blt2d_info->DSizeX = rect.w;
+  p_blt2d_info->DSizeY = rect.h;
+
+  pvr_error = PVR2DBlt (pvrvideosink->dcontext->pvr_context, p_blt2d_info);
+
+  switch (pvr_error) {
+    case PVR2D_OK:
+      break;
+    case PVR2DERROR_DEVICE_UNAVAILABLE:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, device unavailable");
+      goto done;
+      break;
+    case PVR2DERROR_INVALID_CONTEXT:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, invalid context");
+      goto done;
+      break;
+    case PVR2DERROR_INVALID_PARAMETER:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, invalid parameter");
+      goto done;
+      break;
+    case PVR2DERROR_HW_FEATURE_NOT_SUPPORTED:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, "
+          "hardware feature not supported");
+      goto done;
+      break;
+    case PVR2DERROR_GENERIC_ERROR:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, generic error");
+      goto done;
+      break;
+    default:
+      GST_ERROR_OBJECT (pvrvideosink, "Failed to blit, "
+          "undefined error %d", pvr_error);
+      goto done;
+      break;
+  }
+  dcontext->wsegl_table->pfnWSEGL_SwapDrawable (dcontext->drawable_handle, 1);
+
+done:
+  GST_DEBUG_OBJECT (pvrvideosink, "end");
+}
+
+/* We are called with the x_lock taken */
+static void
 gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink * pvrvideosink,
     GstXWindow * xwindow, GstVideoRectangle rect)
 {
   gint t1, t2;
+  GstVideoRectangle result;
 
   g_return_if_fail (GST_IS_PVRVIDEOSINK (pvrvideosink));
   g_return_if_fail (xwindow != NULL);
 
-  XSetForeground (pvrvideosink->dcontext->x_display, xwindow->gc,
-      pvrvideosink->dcontext->black);
-
   /* Left border */
-  if (rect.x > pvrvideosink->render_rect.x) {
-    XFillRectangle (pvrvideosink->dcontext->x_display,
-        xwindow->window, xwindow->gc,
-        pvrvideosink->render_rect.x, pvrvideosink->render_rect.y,
-        rect.x - pvrvideosink->render_rect.x, pvrvideosink->render_rect.h);
-  }
+  result.x = pvrvideosink->render_rect.x;
+  result.y = pvrvideosink->render_rect.y;
+  result.w = rect.x - pvrvideosink->render_rect.x;
+  result.h = pvrvideosink->render_rect.h;
+  if (rect.x > pvrvideosink->render_rect.x)
+    gst_pvrvideosink_pvrfill_rectangle (pvrvideosink, result);
 
   /* Right border */
   t1 = rect.x + rect.w;
   t2 = pvrvideosink->render_rect.x + pvrvideosink->render_rect.w;
-  if (t1 < t2) {
-    XFillRectangle (pvrvideosink->dcontext->x_display, xwindow->window,
-        xwindow->gc, t1, pvrvideosink->render_rect.y, t2 - t1,
-        pvrvideosink->render_rect.h);
-  }
+  result.x = t1;
+  result.y = pvrvideosink->render_rect.y;
+  result.w = t2 - t1;
+  result.h = pvrvideosink->render_rect.h;
+  if (t1 < t2)
+    gst_pvrvideosink_pvrfill_rectangle (pvrvideosink, result);
 
   /* Top border */
-  if (rect.y > pvrvideosink->render_rect.y) {
-    XFillRectangle (pvrvideosink->dcontext->x_display, xwindow->window,
-        xwindow->gc, pvrvideosink->render_rect.x, pvrvideosink->render_rect.y,
-        pvrvideosink->render_rect.w, rect.y - pvrvideosink->render_rect.y);
-  }
+  result.x = pvrvideosink->render_rect.x;
+  result.y = pvrvideosink->render_rect.y;
+  result.w = pvrvideosink->render_rect.w;
+  result.h = rect.y - pvrvideosink->render_rect.y;
+  if (rect.y > pvrvideosink->render_rect.y)
+    gst_pvrvideosink_pvrfill_rectangle (pvrvideosink, result);
 
   /* Bottom border */
   t1 = rect.y + rect.h;
   t2 = pvrvideosink->render_rect.y + pvrvideosink->render_rect.h;
-  if (t1 < t2) {
-    XFillRectangle (pvrvideosink->dcontext->x_display, xwindow->window,
-        xwindow->gc, pvrvideosink->render_rect.x, t1,
-        pvrvideosink->render_rect.w, t2 - t1);
-  }
+  result.x = pvrvideosink->render_rect.x;
+  result.y = t1;
+  result.w = pvrvideosink->render_rect.w;
+  result.h = t2 - t1;
+  if (t1 < t2)
+    gst_pvrvideosink_pvrfill_rectangle (pvrvideosink, result);
 }
 
 /* Element stuff */
diff --git a/sys/pvr2d/gstpvrvideosink.h b/sys/pvr2d/gstpvrvideosink.h
index 9ffe2e3..1826f9f 100644
--- a/sys/pvr2d/gstpvrvideosink.h
+++ b/sys/pvr2d/gstpvrvideosink.h
@@ -61,6 +61,7 @@ struct _GstDrawContext
   PVR2DMEMINFO *dst_mem;
   PVR2DMEMINFO *src_mem;
   PPVR2D_3DBLT_EXT p_blt_info;
+  PPVR2DBLTINFO p_blt2d_info;
 
   long stride;
   PVR2DFORMAT display_format;
-- 
1.7.5.4

