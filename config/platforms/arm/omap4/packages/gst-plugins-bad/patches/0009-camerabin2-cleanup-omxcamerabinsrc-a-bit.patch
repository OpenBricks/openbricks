From e5e388b883de91bf3f7e344244694efdbae5d180 Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Fri, 20 May 2011 10:50:04 +0200
Subject: [PATCH 009/154] camerabin2: cleanup omxcamerabinsrc a bit

---
 gst/camerabin2/gstomxcamerabinsrc.c |  348 +++++-----------------------------
 gst/camerabin2/gstomxcamerabinsrc.h |    8 +-
 2 files changed, 54 insertions(+), 302 deletions(-)

diff --git a/gst/camerabin2/gstomxcamerabinsrc.c b/gst/camerabin2/gstomxcamerabinsrc.c
index d90ee1c..344e106 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.c
+++ b/gst/camerabin2/gstomxcamerabinsrc.c
@@ -1,6 +1,7 @@
 /*
  * GStreamer
  * Copyright (C) 2011 Texas Instruments, Inc
+ * Copyright (C) 2011 Collabora Ltd
  * Author: Alessandro Decina <alessandro.decina@collabora.co.uk>
  *
  * This library is free software; you can redistribute it and/or
@@ -59,8 +60,6 @@ GST_DEBUG_CATEGORY (omx_camera_bin_src_debug);
 GST_BOILERPLATE (GstOmxCameraBinSrc, gst_omx_camera_bin_src,
     GstBaseCameraBinSrc, GST_TYPE_BASE_CAMERA_SRC);
 
-static void set_capsfilter_caps (GstOmxCameraBinSrc * self, GstCaps * new_caps);
-
 static void
 gst_omx_camera_bin_src_dispose (GObject * object)
 {
@@ -103,61 +102,6 @@ gst_omx_camera_bin_src_get_property (GObject * object,
   }
 }
 
-static void
-gst_omx_camera_bin_reset_video_src_caps (GstOmxCameraBinSrc * self,
-    GstCaps * caps)
-{
-#if 0
-  GstClock *clock;
-  gint64 base_time;
-
-  GST_DEBUG_OBJECT (self, "Resetting src caps to %" GST_PTR_FORMAT, caps);
-  if (self->video_source) {
-    clock = gst_element_get_clock (self->video_source);
-    base_time = gst_element_get_base_time (self->video_source);
-
-    gst_element_set_state (self->video_source, GST_STATE_READY);
-    set_capsfilter_caps (self, caps);
-
-    self->drop_newseg = TRUE;
-
-    GST_DEBUG_OBJECT (self, "Bringing source up");
-    gst_element_sync_state_with_parent (self->video_source);
-
-    if (clock) {
-      gst_element_set_clock (self->video_source, clock);
-      gst_element_set_base_time (self->video_source, base_time);
-
-      if (GST_IS_BIN (self->video_source)) {
-        GstIterator *it =
-            gst_bin_iterate_elements (GST_BIN (self->video_source));
-        gpointer item = NULL;
-        gboolean done = FALSE;
-        while (!done) {
-          switch (gst_iterator_next (it, &item)) {
-            case GST_ITERATOR_OK:
-              gst_element_set_base_time (GST_ELEMENT (item), base_time);
-              gst_object_unref (item);
-              break;
-            case GST_ITERATOR_RESYNC:
-              gst_iterator_resync (it);
-              break;
-            case GST_ITERATOR_ERROR:
-              done = TRUE;
-              break;
-            case GST_ITERATOR_DONE:
-              done = TRUE;
-              break;
-          }
-        }
-        gst_iterator_free (it);
-      }
-
-      gst_object_unref (clock);
-    }
-  }
-#endif
-}
 
 /**
  * gst_omx_camera_bin_src_imgsrc_probe:
@@ -241,144 +185,7 @@ gst_omx_camera_bin_src_vidsrc_probe (GstPad * pad, GstBuffer * buffer,
   return ret;
 }
 
-static gboolean
-gst_omx_camera_bin_src_event (GstPad * pad, GstEvent * event)
-{
-  GstOmxCameraBinSrc *src = GST_OMX_CAMERA_BIN_SRC (GST_PAD_PARENT (pad));
-  const GstStructure *structure;
-
-  structure = gst_event_get_structure (event);
-  if (structure && gst_structure_has_name (structure, "renegotiate")) {
-    GST_DEBUG_OBJECT (src, "Received renegotiate on pad %s",
-        GST_PAD_NAME (pad));
-
-    if (pad == src->imgsrc) {
-      src->image_renegotiate = TRUE;
-    } else if (pad == src->vidsrc) {
-      src->video_renegotiate = TRUE;
-    }
-  }
-
-  return src->srcpad_event_func (pad, event);
-}
 
-#if 0
-static gboolean
-gst_omx_camera_src_src_event_probe (GstPad * pad, GstEvent * evt,
-    gpointer udata)
-{
-  gboolean ret = TRUE;
-  GstOmxCameraBinSrc *self = udata;
-
-  return TRUE;
-
-  switch (GST_EVENT_TYPE (evt)) {
-    case GST_EVENT_EOS:
-      /* drop */
-      ret = FALSE;
-      break;
-    case GST_EVENT_NEWSEGMENT:
-      if (self->drop_newseg) {
-        ret = FALSE;
-        self->drop_newseg = FALSE;
-      }
-      break;
-    default:
-      break;
-  }
-
-  if (ret == FALSE)
-    GST_INFO_OBJECT (self, "dropping %s event",
-        gst_event_type_get_name (GST_EVENT_TYPE (evt)));
-
-  return ret;
-}
-#endif
-
-static void
-gst_omx_camera_bin_src_caps_cb (GObject * gobject, GParamSpec * pspec,
-    gpointer user_data)
-{
-  GstBaseCameraBinSrc *bcamsrc = GST_BASE_CAMERA_SRC (user_data);
-  GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (user_data);
-  GstPad *src_caps_src_pad;
-  GstCaps *caps = NULL;
-  GstStructure *in_st = NULL;
-
-  /* get the new caps that were set on the capsfilter that configures the
-   * source */
-  src_caps_src_pad = gst_element_get_static_pad (self->src_filter, "src");
-  caps = gst_pad_get_caps_reffed (src_caps_src_pad);
-  gst_object_unref (src_caps_src_pad);
-  GST_DEBUG_OBJECT (self, "src-filter caps changed to %s",
-      gst_caps_to_string (caps));
-
-  if (gst_caps_get_size (caps)) {
-    in_st = gst_caps_get_structure (caps, 0);
-    if (in_st) {
-      gst_structure_get_int (in_st, "width", &bcamsrc->width);
-      gst_structure_get_int (in_st, "height", &bcamsrc->height);
-
-      GST_DEBUG_OBJECT (self, "Source dimensions now: %dx%d", bcamsrc->width,
-          bcamsrc->height);
-    }
-  }
-
-  /* Update zoom */
-  //gst_base_camera_src_setup_zoom (bcamsrc);
-
-  /* drop our ref on the caps */
-  gst_caps_unref (caps);
-};
-
-static void
-gst_omx_camera_pad_added_cb (GstElement * element,
-    GstPad * pad, gpointer user_data)
-{
-  GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (user_data);
-  gchar *name;
-  GstPad *sink;
-
-
-  name = gst_pad_get_name (pad);
-  GST_INFO_OBJECT (self, "pad added %s", name);
-
-  if (!strcmp (name, "vidsrc")) {
-    sink = gst_element_get_static_pad (self->vidsrc_stride, "sink");
-    if (gst_pad_link (pad, sink) != GST_PAD_LINK_OK) {
-      GST_ERROR_OBJECT (self,
-          "failed to link omx_camera:vidsrc to vidsrc_stride");
-    }
-    gst_object_unref (sink);
-
-    gst_pad_add_buffer_probe (pad,
-        G_CALLBACK (gst_omx_camera_bin_src_vidsrc_probe), self);
-  } else if (!strcmp (name, "imgsrc")) {
-    sink = gst_element_get_static_pad (self->imgsrc_stride, "sink");
-    if (gst_pad_link (pad, sink) != GST_PAD_LINK_OK) {
-      GST_ERROR_OBJECT (self,
-          "failed to link omx_camera:imgsrc to imgsrc_stride");
-    }
-    gst_object_unref (sink);
-
-    gst_pad_add_buffer_probe (pad,
-        G_CALLBACK (gst_omx_camera_bin_src_imgsrc_probe), self);
-  }
-}
-
-/**
- * gst_omx_camera_bin_src_construct_pipeline:
- * @bcamsrc: camerasrc object
- *
- * This function creates and links the elements of the camerasrc bin
- * videosrc ! cspconv ! capsfilter ! crop ! scale ! capsfilter ! tee name=t !
- *    t. ! ... (viewfinder pad)
- *    t. ! output-selector name=outsel
- *        outsel. ! (image pad)
- *        outsel. ! (video pad)
- *
- * Returns: TRUE, if elements were successfully created, FALSE otherwise
- */
 static gboolean
 gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
 {
@@ -389,62 +196,68 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
   GstCaps *caps;
 
   if (!self->elements_created) {
-
     GST_DEBUG_OBJECT (self, "constructing pipeline");
 
     self->video_source = gst_element_factory_make ("omx_camera", NULL);
     if (self->video_source == NULL)
       goto done;
 
-    gst_bin_add (cbin, self->video_source);
-//    g_object_set (self->video_source, "num-buffers", 1000, NULL);
-
-    /* add a buffer probe to the src elemento to drop EOS from READY->NULL */
-    pad = gst_element_get_static_pad (self->video_source, "src");
-
-#if 0
-    self->src_event_probe_id = gst_pad_add_event_probe (pad,
-        (GCallback) gst_omx_camera_src_src_event_probe, self);
-    gst_object_unref (pad);
-#endif
-
-    if (!(self->src_filter =
-            gst_camerabin_create_and_add_element (cbin, "capsfilter",
-                "src-capsfilter")))
-      goto done;
+    if (bcamsrc->mode == MODE_IMAGE)
+      g_object_set (self->video_source, "mode",
+          OMX_CAMERA_MODE_VIDEO_IMAGE, NULL);
+    else
+      g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO, NULL);
 
+    self->vfsrc_filter = gst_element_factory_make ("capsfilter",
+        "vfsrc-capsfilter");
     caps = gst_caps_from_string ("video/x-raw-yuv-strided");
-    set_capsfilter_caps (self, caps);
+    g_object_set (self->vfsrc_filter, "caps", caps, NULL);
     gst_caps_unref (caps);
 
-    /* attach to notify::caps on the first capsfilter and use a callback
-     * to recalculate the zoom properties when these caps change and to
-     * propagate the caps to the second capsfilter */
-    pad = gst_element_get_static_pad (self->src_filter, "src");
-    g_signal_connect (pad, "notify::caps",
-        G_CALLBACK (gst_omx_camera_bin_src_caps_cb), self);
-    gst_object_unref (pad);
-
-    if (!(self->vfsrc_stride =
-            gst_camerabin_create_and_add_element (cbin,
-                "stridetransform", "vfsrc-stride")))
-      goto done;
+    self->vidsrc_filter = gst_element_factory_make ("capsfilter",
+        "vidsrc-capsfilter");
+    caps = gst_caps_from_string ("video/x-raw-yuv-strided");
+    g_object_set (self->vidsrc_filter, "caps", caps, NULL);
+    gst_caps_unref (caps);
 
+    self->vfsrc_stride =
+        gst_element_factory_make ("stridetransform", "vfsrc-stride");
     self->vidsrc_stride =
         gst_element_factory_make ("stridetransform", "vidsrc-stride");
     self->imgsrc_stride =
         gst_element_factory_make ("identity", "imgsrc-stride");
-    gst_bin_add_many (cbin, self->vidsrc_stride, self->imgsrc_stride, NULL);
 
-    g_signal_connect (self->video_source, "pad-added",
-        G_CALLBACK (gst_omx_camera_pad_added_cb), self);
+    gst_bin_add_many (cbin, self->video_source, self->vfsrc_filter,
+        self->vfsrc_stride, self->vidsrc_filter, self->vidsrc_stride,
+        self->imgsrc_stride, NULL);
 
-    if (bcamsrc->mode == MODE_IMAGE) {
-      g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO_IMAGE,
-          NULL);
-    } else {
-      g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO, NULL);
-    }
+    if (!gst_element_link_pads (self->video_source, "src",
+            self->vfsrc_filter, "sink"))
+      goto link_error;
+
+    if (!gst_element_link (self->vfsrc_filter, self->vfsrc_stride))
+      goto link_error;
+
+    if (!gst_element_link_pads (self->video_source, "vidsrc",
+            self->vidsrc_filter, "sink"))
+      goto link_error;
+
+    if (!gst_element_link (self->vidsrc_filter, self->vidsrc_stride))
+      goto link_error;
+
+    if (!gst_element_link_pads (self->video_source, "imgsrc",
+            self->imgsrc_stride, "sink"))
+      goto link_error;
+
+    pad = gst_element_get_static_pad (self->video_source, "vidsrc");
+    gst_pad_add_buffer_probe (pad,
+        G_CALLBACK (gst_omx_camera_bin_src_vidsrc_probe), self);
+    gst_object_unref (pad);
+
+    pad = gst_element_get_static_pad (self->video_source, "imgsrc");
+    gst_pad_add_buffer_probe (pad,
+        G_CALLBACK (gst_omx_camera_bin_src_imgsrc_probe), self);
+    gst_object_unref (pad);
 
     pad = gst_element_get_static_pad (self->vfsrc_stride, "src");
     gst_ghost_pad_set_target (GST_GHOST_PAD (self->vfsrc), pad);
@@ -457,47 +270,37 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
     pad = gst_element_get_static_pad (self->imgsrc_stride, "src");
     gst_ghost_pad_set_target (GST_GHOST_PAD (self->imgsrc), pad);
     gst_object_unref (pad);
-
-    gst_pad_set_active (self->vfsrc, TRUE);
-    gst_pad_set_active (self->imgsrc, TRUE);    /* XXX ??? */
-    gst_pad_set_active (self->vidsrc, TRUE);    /* XXX ??? */
   }
+
   ret = TRUE;
   self->elements_created = TRUE;
+
 done:
   return ret;
+
+link_error:
+  GST_ERROR_OBJECT (self, "failed to link elements");
+  return FALSE;
 }
 
 static gboolean
 gst_omx_camera_bin_src_set_mode (GstBaseCameraBinSrc * bcamsrc,
     GstCameraBinMode mode)
 {
-  GstPhotography *photography = gst_base_camera_src_get_photography (bcamsrc);
   GstOmxCameraBinSrc *self = GST_OMX_CAMERA_BIN_SRC (bcamsrc);
 
   GST_INFO_OBJECT (self, "mode %d", (gint) mode);
 
   if (self->video_source) {
     if (mode == MODE_IMAGE) {
-      self->image_renegotiate = TRUE;
       g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO_IMAGE,
           NULL);
     } else {
-      self->video_renegotiate = TRUE;
       g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO, NULL);
     }
   }
   self->mode = mode;
 
-  if (photography) {
-    if (g_object_class_find_property (G_OBJECT_GET_CLASS (photography),
-            "capture-mode")) {
-      g_object_set (G_OBJECT (photography), "capture-mode", mode, NULL);
-    }
-  } else {
-    gst_omx_camera_bin_reset_video_src_caps (self, NULL);
-  }
-
   return TRUE;
 }
 
@@ -583,24 +386,6 @@ failed:
   return caps;
 }
 
-/**
- * set_capsfilter_caps:
- * @self: camerasrc object
- * @new_caps: pointer to caps object to set
- *
- * Set given caps to camerabin capsfilters.
- */
-static void
-set_capsfilter_caps (GstOmxCameraBinSrc * self, GstCaps * new_caps)
-{
-  GST_INFO_OBJECT (self, "new_caps:%" GST_PTR_FORMAT, new_caps);
-
-//  gst_base_camera_src_setup_zoom (GST_BASE_CAMERA_SRC (self));
-
-  g_object_set (G_OBJECT (self->src_filter), "caps", new_caps, NULL);
-  GST_INFO_OBJECT (self, "updated");
-}
-
 static gboolean
 gst_omx_camera_bin_src_start_capture (GstBaseCameraBinSrc * camerasrc)
 {
@@ -609,27 +394,6 @@ gst_omx_camera_bin_src_start_capture (GstBaseCameraBinSrc * camerasrc)
   if (src->mode == MODE_IMAGE) {
     src->image_capture_count = 1;
   } else if (src->mode == MODE_VIDEO) {
-
-    if (src->video_renegotiate) {
-#if 0
-      g_mutex_unlock (camerasrc->capturing_mutex);
-      gst_omx_camera_bin_reset_video_src_caps (src, NULL);
-      g_mutex_lock (camerasrc->capturing_mutex);
-
-      /* clean capsfilter caps so they don't interfere here */
-      g_object_set (src->src_filter, "caps", NULL, NULL);
-
-      GST_DEBUG_OBJECT (src, "Getting allowed videosrc caps");
-      caps = gst_pad_get_allowed_caps (src->vidsrc);
-      GST_DEBUG_OBJECT (src, "Video src caps %" GST_PTR_FORMAT, caps);
-
-      src->video_renegotiate = FALSE;
-      g_mutex_unlock (camerasrc->capturing_mutex);
-      gst_omx_camera_bin_reset_video_src_caps (src, caps);
-      g_mutex_lock (camerasrc->capturing_mutex);
-      gst_caps_unref (caps);
-#endif
-    }
     if (src->video_rec_status == GST_VIDEO_RECORDING_STATUS_DONE) {
       src->video_rec_status = GST_VIDEO_RECORDING_STATUS_STARTING;
     }
@@ -674,8 +438,6 @@ gst_omx_camera_bin_src_change_state (GstElement * element, GstStateChange trans)
   switch (trans) {
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       self->drop_newseg = FALSE;
-      self->image_renegotiate = TRUE;
-      self->video_renegotiate = TRUE;
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
       break;
@@ -753,13 +515,7 @@ gst_omx_camera_bin_src_init (GstOmxCameraBinSrc * self,
 
   self->srcpad_event_func = GST_PAD_EVENTFUNC (self->vfsrc);
 
-  gst_pad_set_event_function (self->imgsrc, gst_omx_camera_bin_src_event);
-  gst_pad_set_event_function (self->vidsrc, gst_omx_camera_bin_src_event);
-  gst_pad_set_event_function (self->vfsrc, gst_omx_camera_bin_src_event);
-
   self->video_rec_status = GST_VIDEO_RECORDING_STATUS_DONE;
-  self->video_renegotiate = TRUE;
-  self->image_renegotiate = TRUE;
   self->mode = GST_BASE_CAMERA_SRC_CAST (self)->mode;
 }
 
diff --git a/gst/camerabin2/gstomxcamerabinsrc.h b/gst/camerabin2/gstomxcamerabinsrc.h
index 2500f05..ed32e14 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.h
+++ b/gst/camerabin2/gstomxcamerabinsrc.h
@@ -67,16 +67,14 @@ struct _GstOmxCameraBinSrc
 
   /* source elements */
   GstElement *video_source;
-  GstElement *src_filter;
-
+  GstElement *vfsrc_filter;
   GstElement *vfsrc_stride;
+  GstElement *vidsrc_filter;
   GstElement *vidsrc_stride;
   GstElement *imgsrc_stride;
 
   gboolean elements_created;
 
-  guint src_event_probe_id;
-
   GstPadEventFunction srcpad_event_func;
 
   /* For changing caps without losing timestamps */
@@ -87,8 +85,6 @@ struct _GstOmxCameraBinSrc
 
   /* Caps applied to capsfilters when taking still image */
   GstCaps *image_capture_caps;
-  gboolean image_renegotiate;
-  gboolean video_renegotiate;
 };
 
 
-- 
1.7.5.4

