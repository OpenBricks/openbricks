From aa78c0a800db7bbd1082f48a7c766ea1576a896d Mon Sep 17 00:00:00 2001
From: Rob Clark <rob@ti.com>
Date: Wed, 28 Dec 2011 02:22:34 -0600
Subject: [PATCH 146/154] pvrvideosink: corruption/jerkiness fixes

1) Use GetDrawableParameters() to get the next client side buffer
(it is double buffered) so we don't immediately try to blit into
the same buffer xorg is reading from.

2) Some related changes to handle invalidated dri2 drawable (such
as window size change or if window is redirected/unredirected by
the window manager).

3) Wait for blits from dst surface before blitting next frame..
this avoids artifacts caused by us writing to a buffer that xorg
is still reading from.  Note that there is a similar fix needed
in the pvr xorg driver to handle the inverse problem.
---
 sys/pvr2d/gstpvrbufferpool.c |    4 +-
 sys/pvr2d/gstpvrvideosink.c  |  247 ++++++++++++++++++++++++------------------
 2 files changed, 145 insertions(+), 106 deletions(-)

diff --git a/sys/pvr2d/gstpvrbufferpool.c b/sys/pvr2d/gstpvrbufferpool.c
index c5bfc2c..fd81070 100644
--- a/sys/pvr2d/gstpvrbufferpool.c
+++ b/sys/pvr2d/gstpvrbufferpool.c
@@ -105,8 +105,6 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
   if (pool->running) {
     resuscitated = TRUE;
 
-    GST_LOG_OBJECT (pool->element, "reviving buffer %p", self);
-
     g_queue_push_head (pool->free_buffers, self);
   } else {
     GST_LOG_OBJECT (pool->element, "the pool is shutting down");
@@ -114,7 +112,7 @@ gst_ducati_buffer_finalize (GstDucatiBuffer * self)
   GST_PVR_BUFFERPOOL_UNLOCK (pool);
 
   if (resuscitated) {
-    GST_LOG_OBJECT (pool->element, "reviving buffer %p, %d", self, index);
+    GST_LOG_OBJECT (pool->element, "reviving buffer %p", self);
     gst_buffer_ref (GST_BUFFER (self));
     GST_BUFFER_SIZE (self) = 0;
   }
diff --git a/sys/pvr2d/gstpvrvideosink.c b/sys/pvr2d/gstpvrvideosink.c
index 5aa2ee4..aba9d05 100644
--- a/sys/pvr2d/gstpvrvideosink.c
+++ b/sys/pvr2d/gstpvrvideosink.c
@@ -128,6 +128,33 @@ pvr2dstrerr (PVR2DERROR err)
   }
 }
 
+static const char *
+wseglstrerr(WSEGLError err)
+{
+  switch (err) {
+  case WSEGL_SUCCESS:
+    return "Ok";
+  case WSEGL_CANNOT_INITIALISE:
+    return "Cannot initialize";
+  case WSEGL_BAD_NATIVE_DISPLAY:
+    return "Bad native display";
+  case WSEGL_BAD_NATIVE_WINDOW:
+    return "Bad native window";
+  case WSEGL_BAD_NATIVE_PIXMAP:
+    return "Bad native pixmap";
+  case WSEGL_BAD_NATIVE_ENGINE:
+    return "Bad native engine";
+  case WSEGL_BAD_DRAWABLE:
+    return "Bad drawable";
+  case WSEGL_BAD_MATCH:
+    return "Bad match";
+  case WSEGL_OUT_OF_MEMORY:
+    return "Out of memory";
+  default:
+    return "Unknown error";
+  }
+}
+
 /* This function calculates the pixel aspect ratio based on the properties
  *  * in the xcontext structure and stores it there. */
 static void
@@ -181,12 +208,95 @@ gst_pvrvideosink_calculate_pixel_aspect_ratio (GstDrawContext * dcontext)
 }
 
 static void
-gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
+pvr_recreate_drawable (GstPVRVideoSink * pvrvideosink)
+{
+  WSEGLError glerror;
+  GstDrawContext *dcontext = pvrvideosink->dcontext;
+
+  if (dcontext->drawable_handle) {
+    glerror = dcontext->wsegl_table->pfnWSEGL_DeleteDrawable (
+        dcontext->drawable_handle);
+    if (glerror) {
+      GST_ERROR_OBJECT (pvrvideosink, "error deleting drawable: %s",
+          wseglstrerr(glerror));
+      return;
+    }
+  }
+
+  glerror = dcontext->wsegl_table->pfnWSEGL_CreateWindowDrawable (
+      dcontext->display_handle, dcontext->glconfig,
+      &dcontext->drawable_handle,
+      (NativeWindowType) pvrvideosink->xwindow->window,
+      &dcontext->rotation);
+  if (glerror) {
+    GST_ERROR_OBJECT (pvrvideosink, "error creating drawable: %s",
+        wseglstrerr(glerror));
+  }
+}
+
+static void
+pvr_get_drawable_params (GstPVRVideoSink * pvrvideosink)
 {
-  XWindowAttributes attr;
   WSEGLError glerror;
   WSEGLDrawableParams source_params;
   PVRSRV_CLIENT_MEM_INFO *client_mem_info;
+  GstDrawContext *dcontext = pvrvideosink->dcontext;
+
+  glerror = dcontext->wsegl_table->pfnWSEGL_GetDrawableParameters (
+          dcontext->drawable_handle, &source_params,
+          &pvrvideosink->render_params);
+
+  if (glerror == WSEGL_BAD_DRAWABLE) {
+    /* this can happen if window size changes, window is redirected/
+     * unredirected, etc..  when this happens, recreate drawable and
+     * try again.
+     */
+    GST_DEBUG_OBJECT (pvrvideosink, "drawable changed, recreating");
+    pvr_recreate_drawable (pvrvideosink);
+    pvr_get_drawable_params (pvrvideosink);
+    return;
+  }
+
+  if (glerror) {
+    GST_ERROR_OBJECT (pvrvideosink, "%s", wseglstrerr(glerror));
+  }
+
+  client_mem_info =
+      (PVRSRV_CLIENT_MEM_INFO *) pvrvideosink->render_params.hPrivateData;
+
+  PVR2DMEMINFO_INITIALISE (&dcontext->dst_mem, client_mem_info);
+}
+
+static void
+pvr_swap_buffers (GstPVRVideoSink * pvrvideosink)
+{
+  GstDrawContext *dcontext = pvrvideosink->dcontext;
+
+  dcontext->wsegl_table->pfnWSEGL_SwapDrawable (dcontext->drawable_handle, 1);
+
+  pvr_get_drawable_params (pvrvideosink);
+}
+
+/* wait for previous blits to dst surface to complete */
+static void
+pvr_query_blits_complete (GstPVRVideoSink * pvrvideosink)
+{
+  GstDrawContext *dcontext = pvrvideosink->dcontext;
+  PVR2DERROR pvr_error;
+
+  pvr_error = PVR2DQueryBlitsComplete (dcontext->pvr_context,
+      &dcontext->dst_mem, TRUE);
+
+  if (pvr_error) {
+    GST_ERROR_OBJECT (pvrvideosink, "%s (%d)",
+        pvr2dstrerr(pvr_error), pvr_error);
+  }
+}
+
+static void
+gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
+{
+  XWindowAttributes attr;
 
   /* Update the window geometry */
   g_mutex_lock (pvrvideosink->dcontext->x_lock);
@@ -208,37 +318,8 @@ gst_pvrvideosink_xwindow_update_geometry (GstPVRVideoSink * pvrvideosink)
     pvrvideosink->render_rect.h = attr.height;
   }
   if (pvrvideosink->dcontext != NULL) {
-    glerror =
-        pvrvideosink->dcontext->
-        wsegl_table->pfnWSEGL_DeleteDrawable (pvrvideosink->dcontext->
-        drawable_handle);
-    if (glerror != WSEGL_SUCCESS) {
-      GST_ERROR_OBJECT (pvrvideosink, "Error destroying drawable");
-      return;
-    }
-    glerror =
-        pvrvideosink->dcontext->
-        wsegl_table->pfnWSEGL_CreateWindowDrawable (pvrvideosink->dcontext->
-        display_handle, pvrvideosink->dcontext->glconfig,
-        &pvrvideosink->dcontext->drawable_handle,
-        (NativeWindowType) pvrvideosink->xwindow->window,
-        &pvrvideosink->dcontext->rotation);
-    if (glerror != WSEGL_SUCCESS) {
-      GST_ERROR_OBJECT (pvrvideosink, "Error creating drawable");
-      return;
-    }
-    glerror =
-        pvrvideosink->dcontext->
-        wsegl_table->pfnWSEGL_GetDrawableParameters (pvrvideosink->dcontext->
-        drawable_handle, &source_params, &pvrvideosink->render_params);
-    if (glerror != WSEGL_SUCCESS) {
-      GST_ERROR_OBJECT (pvrvideosink, "Error getting Drawable params");
-      return;
-    }
-
-    client_mem_info =
-        (PVRSRV_CLIENT_MEM_INFO *) pvrvideosink->render_params.hPrivateData;
-    PVR2DMEMINFO_INITIALISE (&pvrvideosink->dcontext->dst_mem, client_mem_info);
+    pvr_recreate_drawable (pvrvideosink);
+    pvr_get_drawable_params (pvrvideosink);
   }
 
   g_mutex_unlock (pvrvideosink->dcontext->x_lock);
@@ -461,16 +542,16 @@ gst_pvrvideosink_get_dcontext (GstPVRVideoSink * pvrvideosink)
   glerror = dcontext->wsegl_table->pfnWSEGL_IsDisplayValid (
       (NativeDisplayType) dcontext->x_display);
 
-  if (glerror != WSEGL_SUCCESS) {
-    GST_ERROR_OBJECT (pvrvideosink, "Display is not valid");
+  if (glerror) {
+    GST_ERROR_OBJECT (pvrvideosink, "%s", wseglstrerr(glerror));
     return NULL;
   }
 
   glerror = dcontext->wsegl_table->pfnWSEGL_InitialiseDisplay (
       (NativeDisplayType) dcontext->x_display, &dcontext->display_handle,
       &glcaps, &dcontext->glconfig);
-  if (glerror != WSEGL_SUCCESS) {
-    GST_ERROR_OBJECT (pvrvideosink, "Error initializing display");
+  if (glerror) {
+    GST_ERROR_OBJECT (pvrvideosink, "%s", wseglstrerr(glerror));
     return NULL;
   }
 
@@ -547,14 +628,11 @@ static GstXWindow *
 gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
     gint height)
 {
-  WSEGLError glerror;
-  WSEGLDrawableParams source_params;
   Window root;
   GstXWindow *xwindow;
   GstDrawContext *dcontext;
   XGCValues values;
   Atom wm_delete;
-  PVRSRV_CLIENT_MEM_INFO *client_mem_info;
 
   GST_DEBUG_OBJECT (pvrvideosink, "begin");
 
@@ -569,18 +647,18 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
   xwindow->height = height;
   xwindow->internal = TRUE;
 
-  g_mutex_lock (pvrvideosink->dcontext->x_lock);
+  g_mutex_lock (dcontext->x_lock);
 
   root = DefaultRootWindow (dcontext->x_display);
   xwindow->window = XCreateSimpleWindow (dcontext->x_display, root, 0, 0,
-      width, height, 2, 2, pvrvideosink->dcontext->black);
+      width, height, 2, 2, dcontext->black);
 
   /* Tell the window manager we'd like delete client messages instead of
    * being killed */
-  wm_delete = XInternAtom (pvrvideosink->dcontext->x_display,
+  wm_delete = XInternAtom (dcontext->x_display,
       "WM_DELETE_WINDOW", True);
   if (wm_delete != None) {
-    (void) XSetWMProtocols (pvrvideosink->dcontext->x_display, xwindow->window,
+    (void) XSetWMProtocols (dcontext->x_display, xwindow->window,
         &wm_delete, 1);
   }
 
@@ -588,31 +666,15 @@ gst_pvrvideosink_create_window (GstPVRVideoSink * pvrvideosink, gint width,
 
   /* We have to do that to prevent X from redrawing the background on
    * ConfigureNotify. This takes away flickering of video when resizing. */
-  XSetWindowBackgroundPixmap (pvrvideosink->dcontext->x_display,
+  XSetWindowBackgroundPixmap (dcontext->x_display,
       xwindow->window, None);
 
   gst_pvrvideosink_xwindow_set_title (pvrvideosink, xwindow, NULL);
 
-  xwindow->gc = XCreateGC (pvrvideosink->dcontext->x_display,
+  xwindow->gc = XCreateGC (dcontext->x_display,
       xwindow->window, 0, &values);
 
-  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
-
-  glerror =
-      dcontext->wsegl_table->pfnWSEGL_CreateWindowDrawable (dcontext->
-      display_handle, dcontext->glconfig, &(dcontext->drawable_handle),
-      (NativeWindowType) xwindow->window, &(dcontext->rotation));
-
-  if (glerror != WSEGL_SUCCESS) {
-    GST_ERROR_OBJECT (pvrvideosink, "Error creating drawable");
-    return NULL;
-  }
-  glerror =
-      dcontext->wsegl_table->pfnWSEGL_GetDrawableParameters (dcontext->
-      drawable_handle, &source_params, &pvrvideosink->render_params);
-  client_mem_info =
-      (PVRSRV_CLIENT_MEM_INFO *) pvrvideosink->render_params.hPrivateData;
-  PVR2DMEMINFO_INITIALISE (&dcontext->dst_mem, client_mem_info);
+  g_mutex_unlock (dcontext->x_lock);
 
   GST_DEBUG_OBJECT (pvrvideosink, "end");
   return xwindow;
@@ -650,7 +712,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
   src_mem = gst_ducati_buffer_get_meminfo ((GstDucatiBuffer *) buffer);
   p_blt_3d = dcontext->p_blt_info;
 
-  g_mutex_lock (pvrvideosink->dcontext->x_lock);
+  g_mutex_lock (dcontext->x_lock);
 
   /* Draw borders when displaying the first frame. After this
      draw borders only on expose event or after a size change. */
@@ -734,6 +796,8 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     /* I'd guess because using ARGB format (ie. has alpha channel) */
     p_blt_3d->bDisableDestInput = FALSE;
 
+  pvr_query_blits_complete (pvrvideosink);
+
   if (pvrvideosink->interlaced) {
     /* NOTE: this probably won't look so good if linear (instead
      * of point) filtering is used.
@@ -750,7 +814,7 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     p_blt_3d->rcDest.bottom /= 2;
     p_blt_3d->sDst.Stride *= 2;
 
-    pvr_error = PVR2DBlt3DExt (pvrvideosink->dcontext->pvr_context,
+    pvr_error = PVR2DBlt3DExt (dcontext->pvr_context,
         dcontext->p_blt_info);
     if (pvr_error)
       goto done;
@@ -760,24 +824,24 @@ gst_pvrvideosink_blit (GstPVRVideoSink * pvrvideosink, GstBuffer * buffer)
     p_blt_3d->rcSource.bottom += video_height / 2;
     p_blt_3d->sDst.SurfOffset = p_blt_3d->sDst.Stride / 2;
 
-    pvr_error = PVR2DBlt3DExt (pvrvideosink->dcontext->pvr_context,
+    pvr_error = PVR2DBlt3DExt (dcontext->pvr_context,
         dcontext->p_blt_info);
 
   } else {
     p_blt_3d->bFilter = TRUE;
-    pvr_error = PVR2DBlt3DExt (pvrvideosink->dcontext->pvr_context,
+    pvr_error = PVR2DBlt3DExt (dcontext->pvr_context,
         dcontext->p_blt_info);
   }
 
   if (pvr_error)
     goto done;
 
-  dcontext->wsegl_table->pfnWSEGL_SwapDrawable (dcontext->drawable_handle, 1);
-
   if (draw_border) {
     gst_pvrvideosink_xwindow_draw_borders (pvrvideosink, pvrvideosink->xwindow,
         result);
     pvrvideosink->redraw_borders = FALSE;
+  } else {
+    pvr_swap_buffers (pvrvideosink);
   }
 
 done:
@@ -786,7 +850,7 @@ done:
         pvr2dstrerr (pvr_error), pvr_error);
   }
   GST_DEBUG_OBJECT (pvrvideosink, "end");
-  g_mutex_unlock (pvrvideosink->dcontext->x_lock);
+  g_mutex_unlock (dcontext->x_lock);
   g_mutex_unlock (pvrvideosink->flow_lock);
 }
 
@@ -832,13 +896,7 @@ gst_pvrvideosink_pvrfill_rectangle (GstPVRVideoSink * pvrvideosink,
   p_blt2d_info->DSizeX = rect.w;
   p_blt2d_info->DSizeY = rect.h;
 
-  pvr_error = PVR2DBlt (pvrvideosink->dcontext->pvr_context, p_blt2d_info);
-  if (pvr_error)
-    goto done;
-
-  dcontext->wsegl_table->pfnWSEGL_SwapDrawable (dcontext->drawable_handle, 1);
-
-done:
+  pvr_error = PVR2DBlt (dcontext->pvr_context, p_blt2d_info);
   if (pvr_error) {
     GST_ERROR_OBJECT (pvrvideosink, "%s (%d)",
         pvr2dstrerr (pvr_error), pvr_error);
@@ -892,6 +950,8 @@ gst_pvrvideosink_xwindow_draw_borders (GstPVRVideoSink * pvrvideosink,
   result.h = t2 - t1;
   if (t1 < t2)
     gst_pvrvideosink_pvrfill_rectangle (pvrvideosink, result);
+
+  pvr_swap_buffers (pvrvideosink);
 }
 
 /* Element stuff */
@@ -1069,6 +1129,10 @@ gst_pvrvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
     pvrvideosink->xwindow = gst_pvrvideosink_create_window (pvrvideosink,
         GST_VIDEO_SINK_WIDTH (pvrvideosink),
         GST_VIDEO_SINK_HEIGHT (pvrvideosink));
+
+  pvr_recreate_drawable (pvrvideosink);
+  pvr_get_drawable_params (pvrvideosink);
+
   g_mutex_unlock (pvrvideosink->flow_lock);
 
   gst_pvrvideosink_set_event_handling (GST_X_OVERLAY (pvrvideosink), TRUE);
@@ -1464,9 +1528,6 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
   /* If the xid is 0 we will create an internal one in buffer_alloc */
   if (xwindow_id != 0) {
     XWindowAttributes attr;
-    WSEGLError glerror;
-    WSEGLDrawableParams source_params;
-    PVRSRV_CLIENT_MEM_INFO *client_mem_info;
 
     xwindow = g_new0 (GstXWindow, 1);
     xwindow->window = xwindow_id;
@@ -1494,30 +1555,10 @@ gst_pvrvideosink_set_window_handle (GstXOverlay * overlay, guintptr id)
         xwindow->window, 0, NULL);
     g_mutex_unlock (pvrvideosink->dcontext->x_lock);
 
-    glerror =
-        pvrvideosink->dcontext->
-        wsegl_table->pfnWSEGL_CreateWindowDrawable (pvrvideosink->dcontext->
-        display_handle, pvrvideosink->dcontext->glconfig,
-        &(pvrvideosink->dcontext->drawable_handle),
-        (NativeWindowType) xwindow->window,
-        &(pvrvideosink->dcontext->rotation));
-
-    if (glerror != WSEGL_SUCCESS) {
-      GST_ERROR_OBJECT (pvrvideosink, "Error creating drawable");
-      return;
-    }
-    glerror =
-        pvrvideosink->dcontext->
-        wsegl_table->pfnWSEGL_GetDrawableParameters (pvrvideosink->dcontext->
-        drawable_handle, &source_params, &pvrvideosink->render_params);
-
-    client_mem_info =
-        (PVRSRV_CLIENT_MEM_INFO *) pvrvideosink->render_params.hPrivateData;
-    PVR2DMEMINFO_INITIALISE (&pvrvideosink->dcontext->dst_mem, client_mem_info);
-  }
-
-  if (xwindow)
     pvrvideosink->xwindow = xwindow;
+    pvr_recreate_drawable (pvrvideosink);
+    pvr_get_drawable_params (pvrvideosink);
+  }
 
   g_mutex_unlock (pvrvideosink->flow_lock);
 
-- 
1.7.5.4

