From c0f5d79c024ecb75ec06f5302b2c3aceb0c22bfb Mon Sep 17 00:00:00 2001
From: Alessandro Decina <alessandro.decina@collabora.co.uk>
Date: Wed, 1 Jun 2011 12:41:02 +0200
Subject: [PATCH 011/154] omxcamerabinsrc: get viewfinder and video buffers
 from omx_camera:src

Get viewfinder and video buffers from omx_camera:src. omx_camera:vidsrc pushes
the same buffers anyway. This makes it easier to apply global filters to video
buffers.
---
 gst/camerabin2/gstomxcamerabinsrc.c |   26 ++++++++++++++++----------
 gst/camerabin2/gstomxcamerabinsrc.h |    1 +
 2 files changed, 17 insertions(+), 10 deletions(-)

diff --git a/gst/camerabin2/gstomxcamerabinsrc.c b/gst/camerabin2/gstomxcamerabinsrc.c
index 344e106..51f056a 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.c
+++ b/gst/camerabin2/gstomxcamerabinsrc.c
@@ -208,6 +208,8 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
     else
       g_object_set (self->video_source, "mode", OMX_CAMERA_MODE_VIDEO, NULL);
 
+    self->tee = gst_element_factory_make ("tee", NULL);
+
     self->vfsrc_filter = gst_element_factory_make ("capsfilter",
         "vfsrc-capsfilter");
     caps = gst_caps_from_string ("video/x-raw-yuv-strided");
@@ -227,19 +229,28 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
     self->imgsrc_stride =
         gst_element_factory_make ("identity", "imgsrc-stride");
 
-    gst_bin_add_many (cbin, self->video_source, self->vfsrc_filter,
+    gst_bin_add_many (cbin, self->video_source, self->tee, self->vfsrc_filter,
         self->vfsrc_stride, self->vidsrc_filter, self->vidsrc_stride,
         self->imgsrc_stride, NULL);
 
-    if (!gst_element_link_pads (self->video_source, "src",
-            self->vfsrc_filter, "sink"))
+    if (!gst_element_link_pads (self->video_source, "src", self->tee, "sink"))
+      goto link_error;
+
+    pad = gst_element_get_request_pad (self->tee, "src0");
+    g_object_set (self->tee, "alloc-pad", pad, NULL);
+    gst_object_unref (pad);
+    pad = gst_element_get_request_pad (self->tee, "src1");
+    gst_pad_add_buffer_probe (pad,
+        G_CALLBACK (gst_omx_camera_bin_src_vidsrc_probe), self);
+    gst_object_unref (pad);
+
+    if (!gst_element_link_pads (self->tee, "src0", self->vfsrc_filter, "sink"))
       goto link_error;
 
     if (!gst_element_link (self->vfsrc_filter, self->vfsrc_stride))
       goto link_error;
 
-    if (!gst_element_link_pads (self->video_source, "vidsrc",
-            self->vidsrc_filter, "sink"))
+    if (!gst_element_link_pads (self->tee, "src1", self->vidsrc_filter, "sink"))
       goto link_error;
 
     if (!gst_element_link (self->vidsrc_filter, self->vidsrc_stride))
@@ -249,11 +260,6 @@ gst_omx_camera_bin_src_construct_pipeline (GstBaseCameraBinSrc * bcamsrc)
             self->imgsrc_stride, "sink"))
       goto link_error;
 
-    pad = gst_element_get_static_pad (self->video_source, "vidsrc");
-    gst_pad_add_buffer_probe (pad,
-        G_CALLBACK (gst_omx_camera_bin_src_vidsrc_probe), self);
-    gst_object_unref (pad);
-
     pad = gst_element_get_static_pad (self->video_source, "imgsrc");
     gst_pad_add_buffer_probe (pad,
         G_CALLBACK (gst_omx_camera_bin_src_imgsrc_probe), self);
diff --git a/gst/camerabin2/gstomxcamerabinsrc.h b/gst/camerabin2/gstomxcamerabinsrc.h
index ed32e14..761f25b 100644
--- a/gst/camerabin2/gstomxcamerabinsrc.h
+++ b/gst/camerabin2/gstomxcamerabinsrc.h
@@ -67,6 +67,7 @@ struct _GstOmxCameraBinSrc
 
   /* source elements */
   GstElement *video_source;
+  GstElement *tee;
   GstElement *vfsrc_filter;
   GstElement *vfsrc_stride;
   GstElement *vidsrc_filter;
-- 
1.7.5.4

