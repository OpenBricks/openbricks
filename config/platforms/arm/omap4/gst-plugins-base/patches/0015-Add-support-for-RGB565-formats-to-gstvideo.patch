From 5e7a355740acfd43d0cb8487a2c3ebefda3fd8d2 Mon Sep 17 00:00:00 2001
From: Castaneda Sheissa, Roberto <rsheissa@ti.com>
Date: Sun, 3 Jan 2010 13:39:42 -0600
Subject: [PATCH 15/21] Add support for RGB565 formats to gstvideo

---
 gst-libs/gst/video/video.c |   62 ++++++++++++++++++++++----------------------
 gst-libs/gst/video/video.h |   22 ++++++++++-----
 2 files changed, 45 insertions(+), 39 deletions(-)

diff --git a/gst-libs/gst/video/video.c b/gst-libs/gst/video/video.c
index 4e35b8c..15474a2 100644
--- a/gst-libs/gst/video/video.c
+++ b/gst-libs/gst/video/video.c
@@ -311,8 +311,8 @@ gst_video_parse_caps_chroma_site (GstCaps * caps)
  * see gst_video_format_parse_caps_strided and gst_video_format_parse_caps
  */
 static gboolean
-parse_caps (GstCaps * caps, GstVideoFormat * format, gint *width, gint *height,
-    gboolean stride_ok, gint *rowstride)
+parse_caps (GstCaps * caps, GstVideoFormat * format, gint * width,
+    gint * height, gboolean stride_ok, gint * rowstride)
 {
   GstStructure *structure;
   gboolean ok = TRUE;
@@ -327,7 +327,7 @@ parse_caps (GstCaps * caps, GstVideoFormat * format, gint *width, gint *height,
     if (gst_structure_has_name (structure, "video/x-raw-yuv") ||
         (stride_ok &&
             gst_structure_has_name (structure, "video/x-raw-yuv-strided") &&
-            (strided=TRUE) /* single '=' intentional */)) {
+            (strided = TRUE) /* single '=' intentional */ )) {
       guint32 fourcc;
 
       ok &= gst_structure_get_fourcc (structure, "format", &fourcc);
@@ -339,7 +339,7 @@ parse_caps (GstCaps * caps, GstVideoFormat * format, gint *width, gint *height,
     } else if (gst_structure_has_name (structure, "video/x-raw-rgb") ||
         (stride_ok &&
             gst_structure_has_name (structure, "video/x-raw-rgb-strided") &&
-            (strided=TRUE) /* single '=' intentional */)) {
+            (strided = TRUE) /* single '=' intentional */ )) {
       int depth;
       int bpp;
       int endianness;
@@ -427,7 +427,7 @@ parse_caps (GstCaps * caps, GstVideoFormat * format, gint *width, gint *height,
     if (strided) {
       ok &= gst_structure_get_int (structure, "rowstride", rowstride);
     } else {
-      *rowstride = 0;  /* not a strided format */
+      *rowstride = 0;           /* not a strided format */
     }
   }
 
@@ -612,13 +612,13 @@ gst_video_format_new_caps_strided (GstVideoFormat format,
   g_return_val_if_fail (width > 0 && height > 0, NULL);
 
   if (gst_video_format_is_yuv (format)) {
-    caps = gst_caps_new_simple (
-        rowstride ? "video/x-raw-yuv-strided" : "video/x-raw-yuv",
-        "format", GST_TYPE_FOURCC, gst_video_format_to_fourcc (format),
-        "width", G_TYPE_INT, width,
-        "height", G_TYPE_INT, height,
-        "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
-        "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
+    caps =
+        gst_caps_new_simple (rowstride ? "video/x-raw-yuv-strided" :
+        "video/x-raw-yuv", "format", GST_TYPE_FOURCC,
+        gst_video_format_to_fourcc (format), "width", G_TYPE_INT, width,
+        "height", G_TYPE_INT, height, "framerate", GST_TYPE_FRACTION,
+        framerate_n, framerate_d, "pixel-aspect-ratio", GST_TYPE_FRACTION,
+        par_n, par_d, NULL);
   } else if (gst_video_format_is_rgb (format)) {
     GstCaps *caps;
     int red_mask;
@@ -713,16 +713,12 @@ gst_video_format_new_caps_strided (GstVideoFormat format,
       return NULL;
     }
 
-    caps = gst_caps_new_simple (
-        rowstride ? "video/x-raw-rgb-strided" : "video/x-raw-rgb",
-        "bpp", G_TYPE_INT, bpp,
-        "depth", G_TYPE_INT, depth,
-        "endianness", G_TYPE_INT, G_BIG_ENDIAN,
-        "red_mask", G_TYPE_INT, red_mask,
-        "green_mask", G_TYPE_INT, green_mask,
-        "blue_mask", G_TYPE_INT, blue_mask,
-        "width", G_TYPE_INT, width,
-        "height", G_TYPE_INT, height,
+    caps =
+        gst_caps_new_simple (rowstride ? "video/x-raw-rgb-strided" :
+        "video/x-raw-rgb", "bpp", G_TYPE_INT, bpp, "depth", G_TYPE_INT, depth,
+        "endianness", G_TYPE_INT, G_BIG_ENDIAN, "red_mask", G_TYPE_INT,
+        red_mask, "green_mask", G_TYPE_INT, green_mask, "blue_mask", G_TYPE_INT,
+        blue_mask, "width", G_TYPE_INT, width, "height", G_TYPE_INT, height,
         "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
         "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
     if (have_alpha) {
@@ -1634,6 +1630,7 @@ gst_video_format_get_component_offset (GstVideoFormat format,
         return 0;
       return 0;
     case GST_VIDEO_FORMAT_RGB:
+    case GST_VIDEO_FORMAT_RGB16:
     case GST_VIDEO_FORMAT_v308:
       if (component == 0)
         return 0;
@@ -1643,6 +1640,7 @@ gst_video_format_get_component_offset (GstVideoFormat format,
         return 2;
       return 0;
     case GST_VIDEO_FORMAT_BGR:
+    case GST_VIDEO_FORMAT_BGR16:
       if (component == 0)
         return 2;
       if (component == 1)
@@ -1802,15 +1800,15 @@ int
 gst_video_format_get_size_strided (GstVideoFormat format,
     int width, int height, int rowstride)
 {
-  if(!rowstride)
+  if (!rowstride)
     return gst_video_format_get_size (format, width, height);
 
   g_return_val_if_fail (format != GST_VIDEO_FORMAT_UNKNOWN, 0);
   g_return_val_if_fail (width > 0 && height > 0, 0);
 
   switch (format) {
-    /* all packed formats have the same calculation, ie. rowstride * height
-     */
+      /* all packed formats have the same calculation, ie. rowstride * height
+       */
     case GST_VIDEO_FORMAT_RGBx:
     case GST_VIDEO_FORMAT_BGRx:
     case GST_VIDEO_FORMAT_xRGB:
@@ -1821,6 +1819,8 @@ gst_video_format_get_size_strided (GstVideoFormat format,
     case GST_VIDEO_FORMAT_ABGR:
     case GST_VIDEO_FORMAT_RGB:
     case GST_VIDEO_FORMAT_BGR:
+    case GST_VIDEO_FORMAT_RGB16:
+    case GST_VIDEO_FORMAT_BGR16:
     case GST_VIDEO_FORMAT_YUY2:
     case GST_VIDEO_FORMAT_YVYU:
     case GST_VIDEO_FORMAT_UYVY:
@@ -1829,16 +1829,16 @@ gst_video_format_get_size_strided (GstVideoFormat format,
     case GST_VIDEO_FORMAT_v216:
       return GST_ROUND_UP_4 (rowstride * height);
 
-    /* these planar formats have 2x sub-sampling in the vertical direction,
-     * so U/V have half as many rows as Y:
-     */
+      /* these planar formats have 2x sub-sampling in the vertical direction,
+       * so U/V have half as many rows as Y:
+       */
     case GST_VIDEO_FORMAT_I420:
     case GST_VIDEO_FORMAT_YV12:
       return GST_ROUND_UP_4 (2 * rowstride * height);
 
-    /* these planar formats have no sub-sampling in the vertical direction,
-     * so each plane has 'height' number of rows
-     */
+      /* these planar formats have no sub-sampling in the vertical direction,
+       * so each plane has 'height' number of rows
+       */
     case GST_VIDEO_FORMAT_Y41B:
     case GST_VIDEO_FORMAT_Y42B:
     case GST_VIDEO_FORMAT_Y444:
diff --git a/gst-libs/gst/video/video.h b/gst-libs/gst/video/video.h
index 4673607..367256e 100644
--- a/gst-libs/gst/video/video.h
+++ b/gst-libs/gst/video/video.h
@@ -145,14 +145,6 @@ typedef enum {
 #define GST_VIDEO_RED_MASK_15 GST_VIDEO_COMP1_MASK_15
 #define GST_VIDEO_GREEN_MASK_15 GST_VIDEO_COMP2_MASK_15
 #define GST_VIDEO_BLUE_MASK_15 GST_VIDEO_COMP3_MASK_15
-
-#define GST_VIDEO_RED_MASK_16_INT GST_VIDEO_COMP1_MASK_16_INT
-#define GST_VIDEO_GREEN_MASK_16_INT GST_VIDEO_COMP2_MASK_16_INT
-#define GST_VIDEO_BLUE_MASK_16_INT GST_VIDEO_COMP3_MASK_16_INT
-
-#define GST_VIDEO_RED_MASK_15_INT GST_VIDEO_COMP1_MASK_15_INT
-#define GST_VIDEO_GREEN_MASK_15_INT GST_VIDEO_COMP2_MASK_15_INT
-#define GST_VIDEO_BLUE_MASK_15_INT GST_VIDEO_COMP3_MASK_15_INT
 #endif
 
 #define GST_VIDEO_SIZE_RANGE "(int) [ 1, max ]"
@@ -284,6 +276,20 @@ typedef enum {
 #define GST_VIDEO_CAPS_BGR_15 \
     __GST_VIDEO_CAPS_MAKE_15 (3, 2, 1)
 
+#define GST_VIDEO_CAPS_RGB_16_STRIDED(rowstride)                        \
+            GST_VIDEO_CAPS_RGB_16 ";"					\
+            "video/x-raw-rgb-strided, "                                 \
+            "rowstride = (int) " rowstride ", "                         \
+            "bpp = (int) 16, "                                          \
+            "depth = (int) 16, "                                        \
+            "endianness = (int) BYTE_ORDER, "                           \
+            "red_mask = (int) " GST_VIDEO_COMP1_MASK_16 ", "              \
+            "green_mask = (int) " GST_VIDEO_COMP2_MASK_16 ", "          \
+            "blue_mask = (int) " GST_VIDEO_COMP3_MASK_16 ", "            \
+            "width = " GST_VIDEO_SIZE_RANGE ", "                        \
+            "height = " GST_VIDEO_SIZE_RANGE ", "                       \
+            "framerate = " GST_VIDEO_FPS_RANGE
+
 /**
  * GST_VIDEO_CAPS_YUV:
  * @fourcc: YUV fourcc format that describes the pixel layout, as string
-- 
1.7.1

