#!/bin/sh

. config/options

get_meta swig
SWIG_VER=$PKG_VERSION

get_meta $1

export MAKEFLAGS=-j1

xbmc_set_option() {
  PKG="$1"
  OPT="$2"
  CFG_LIST="$3"
  pkg_uses $PKG $OPT && CFG=enable || CFG=disable
  for CFG_NAME in $CFG_LIST; do
    EXTRA_CONFIG="$EXTRA_CONFIG --$CFG-$CFG_NAME"
  done
  return 0
}

xbmc_set_option $1 "opengl"            "gl"
xbmc_set_option $1 "opengles"          "gles"
xbmc_set_option $1 "openmax"           "openmax"
xbmc_set_option $1 "joystick"          "joystick"
xbmc_set_option $1 "zeroconf"          "avahi"
xbmc_set_option $1 "webserver"         "webserver"
xbmc_set_option $1 "vdpau"             "vdpau"
xbmc_set_option $1 "xvba"              "xvba"
xbmc_set_option $1 "vaapi"             "vaapi"
xbmc_set_option $1 "crystalhd"         "crystalhd"
xbmc_set_option $1 "pulse"             "pulse"
xbmc_set_option $1 "dvdcss"            "dvdcss"
xbmc_set_option $1 "bluray"            "libbluray"
xbmc_set_option $1 "rtmp"              "rtmp"
xbmc_set_option $1 "nonfree"           "non-free"
xbmc_set_option $1 "externalffmpeg"    "ffmpeg-libvorbis"
xbmc_set_option $1 "externalffmpeglibav"    "ffmpeg-libvorbis"
xbmc_set_option $1 "libcec"            "libcec"
xbmc_set_option $1 "libnfs"            "nfs"
xbmc_set_option $1 "afpclient"         "afpclient"
xbmc_set_option $1 "airtunes"          "airtunes"
xbmc_set_option $1 "screensavers"      "rsxs"
xbmc_set_option $1 "gstreamer"         "gstreamer"
xbmc_set_option $1 "xorg"              "x11 xrandr"
xbmc_set_option $1 "sdl"               "sdl"
xbmc_set_option $1 "alsa"               "alsa"

pkg_uses $1 externalffmpeg && ! pkg_uses $1 externalffmpeglibav && xbmc_set_option $1 "externalffmpeg" "external-ffmpeg"
pkg_uses $1 externalffmpeglibav && ! pkg_uses $1 externalffmpeg && xbmc_set_option $1 "externalffmpeglibav"    "external-ffmpeg"

# check for nVidia ARM Tegra2 optimizations
CFG_TEGRA="--disable-tegra"
[ "$TARGET_PLATFORM" = tegra2 ] && CFG_TEGRA="--enable-tegra"
[ "$TARGET_MACHINE" = cubox ] && EXTRA_CONFIG="$EXTRA_CONFIG --with-platform=marvell-dove"
if [ "$TARGET_MACHINE" = raspberrypi ]; then
  EXTRA_CONFIG="$EXTRA_CONFIG --with-platform=raspberry-pi"
  if pkg_uses $1 openmax; then
    EXTRA_CONFIG="$EXTRA_CONFIG --disable-openmax --enable-player=omxplayer"
    local_cflags="-I$LIB_PREFIX/include/interface/vcos/pthreads -I$LIB_PREFIX/include/interface/vmcs_host/linux"
    local_cxxflags="-I$LIB_PREFIX/include/interface/vcos/pthreads -I$LIB_PREFIX/include/interface/vmcs_host/linux"
  fi
fi

if [ "$TARGET_MACHINE" = pandaboard ]; then
  EXTRA_CONFIG="$EXTRA_CONFIG --enable-player=gstplayer"
fi

if [ "$TARGET_PLATFORM" = a10 ]; then
  #export CEDARLIBS="-lcedarv -lvecore"
  export CEDARLIBS="-lcedarx"
  EXTRA_CONFIG="$EXTRA_CONFIG --with-platform=allwinner-a10"
fi

if [ "$TARGET_PLATFORM" = imx6 ]; then
  EXTRA_CONFIG="$EXTRA_CONFIG --enable-codec=imxvpu"
fi

if [ "$FPU_OPTIMIZATIONS" = "neon" -o  "$FPU_OPTIMIZATIONS" = "neon-vfp4" ]; then
  EXTRA_CONFIG="$EXTRA_CONFIG --enable-neon"
fi

[ "$FPU_OPTIMIZATIONS" = "neon-vfp4" ] && CFLAGS="$CFLAGS -mfpu=vfpv4"
[ "$FPU_OPTIMIZATIONS" = "neon-vfp4" ] && CXXFLAGS="$CXXFLAGS -mfpu=vfpv4"

export LIBS="$LIBS -lstdc++"
export LIB_P=$LIB_PREFIX

#Openelec
# xbmc fails to build with LTO optimization
  strip_lto
  export CFLAGS="$CFLAGS $XBMC_CFLAGS"
  export CXXFLAGS="$CXXFLAGS $XBMC_CXXFLAGS"
  #export LDFLAGS_FOR_BUILD="$LDFLAGS_FOR_BUILD -Wl,-rpath,$ROOT/$TOOLCHAIN/lib -L$ROOT/$TOOLCHAIN/lib"
  #export CXX_FOR_BUILD=$CXX
  #export CC_FOR_BUILD=$CC

# dont use some optimizations because of build problems
  LDFLAGS=`echo $LDFLAGS | sed -e "s|-Wl,--as-needed||"`
#Fine

export CXX_FOR_BUILD="$HOST_CXX"
export CC_FOR_BUILD="$HOST_CC"
export CXXFLAGS_FOR_BUILD="$HOST_CXXFLAGS"
export CFLAGS_FOR_BUILD="$HOST_CFLAGS -I$ROOT/$TOOLCHAIN/include"
export LDFLAGS_FOR_BUILD="$HOST_LDFLAGS -Wl,-rpath,$ROOT/$TOOLCHAIN/lib -L$ROOT/$TOOLCHAIN/lib"

export PYTHON_VERSION=2.7
export PYTHON_CPPFLAGS=-I$LIB_PREFIX/include/python2.7
export PYTHON_LDFLAGS="-L$LIB_PREFIX/lib/python2.7 -lpython2.7"
export PYTHON_SITE_PKG=$LIB_PREFIX/lib/python2.7/site-packages
export PYTHON_EXTRA_LIBS="-lpthread -ldl -lutil"
export PYTHON_EXTRA_LDFLAGS="-Xlinker -export-dynamic"

#export ac_cv_path_JAVA_EXE="/usr/bin/java"

export SWIG_LIB=$ROOT/$TOOLCHAIN/share/swig/$SWIG_VER

cd $PKG_BUILD_DIR

touch .dummy.in
echo "$PKG_URL_REV-SifBoX" > git.version

# prefix on host
export use_texturepacker_native=yes
export USE_TEXTUREPACKER_NATIVE_ROOT=$ROOT/$TOOLCHAIN
if [ "$TARGET_MACHINE" = cubox ] || [ "$TARGET_MACHINE" = raspberrypi ] || \
   [ "$TARGET_MACHINE" = pandaboard ] || [ "$TARGET_PLATFORM" = a10 ]; then
  EXTRA_CONFIG="$EXTRA_CONFIG --enable-texturepacker"
  export TEXTUREPACKER_NATIVE_ROOT=$USE_TEXTUREPACKER_NATIVE_ROOT
else 
  EXTRA_CONFIG="$EXTRA_CONFIG --disable-texturepacker"
fi


# prevent internal error in gcc
if [ ! -f configure ] ; then
  do_autoconf || true
  #cd lib/libid3tag/libid3tag && do_autoconf && cd -
  cd xbmc/screensavers/rsxs-0.9 && do_autoconf && cd -
  cd xbmc/visualizations/Goom/goom2k4-0 && do_autoconf && cd -
  cd lib/libapetag && do_autoconf && cd -
  cd lib/cpluff && do_autoconf  && cd -
  # order matters with libdvd and friends
  cd lib/libdvd/libdvdcss && do_autoconf  && cd -
  cd lib/libdvd/libdvdread && do_autoconf  && cd -
  cd lib/libdvd/libdvdnav && do_autoconf  && cd -
  cd lib/gtest && do_autoconf  && cd -
fi

cd $ROOT/$PKG_BUILD_DIR
make \
        -C tools/depends/native/JsonSchemaBuilder

cp -PR tools/depends/native/JsonSchemaBuilder/native/JsonSchemaBuilder $ROOT/$TOOLCHAIN/bin

if [ "$TARGET_MACHINE" != "pandaboard" ] ; then
  make -f codegenerator.mk
fi

sed -i 's%PYTHON_VERSION=$ac_python_version%PYTHON_VERSION=2.7%' configure
GCC_NO_LTO=1 GCC_NO_GOLD=1 GCC_NO_GRAPHITE=1 GCC_NO_LOOP_TREE=1 \
do_configure \
  --with-arch=$TARGET_ARCH \
  --with-cpu=$TARGET_CPU \
  GIT_REV=`cat git.version` \
  --disable-debug \
  --enable-optimizations \
  --disable-vdadecoder \
  --disable-vtbdecoder \
  --disable-openmax \
  --disable-profiling \
  --disable-goom \
  --disable-ccache \
  --disable-mid \
  --disable-hal \
  --disable-asap-codec \
  --enable-projectm \
  --enable-udev \
  --disable-libusb \
  --enable-rtmp \
  --enable-optical-drive \
  --enable-texturepacker --with-texturepacker-root="$ROOT/$TOOLCHAIN/include" \
  --disable-external-libraries \
  $CFG_TEGRA \
  $EXTRA_CONFIG \
  $XBMC_PLAYER \
  --enable-ssh \
  --enable-openmax \
  --enable-player=omxplayer \
  --with-platform=raspberry-pi \
  --enable-ffmpeg-libvorbis \
  --with-ffmpeg=shared \


# leaked host includes break the Python components build
## sed -i Makefile.include -e "s:-I$ROOT/$TOOLCHAIN/include::"

# leaked host includes also break libdvdnav
sed -i lib/libdvd/libdvdnav/config.mak \
    -e "s:^DVDREAD_CFLAGS=.*$:DVDREAD_CFLAGS=-I$LIB_PREFIX/include:" \
    -e "s:^DVDREAD_LIBS=.*$:DVDREAD_LIBS=-L$LIB_PREFIX/lib -ldvdread:" \

#export MAKEFLAGS=-j4

make externals
make xbmc.bin
make xbmc-xrandr
make -C tools/TexturePacker
cp -PR tools/TexturePacker/TexturePacker $ROOT/$TOOLCHAIN/bin

make skins
make_install

if [ "$TARGET_ARCH" = arm ]; then
  # workaround to make the addons run
  ln -sf /usr/lib/xbmc/addons/library.xbmc.addon/libXBMC_addon-arm.so .install/usr/lib/xbmc/addons/library.xbmc.addon/libXBMC_addon-arm-linux.so || true
  ln -sf /usr/lib/xbmc/addons/library.xbmc.gui/libXBMC_gui-arm.so .install/usr/lib/xbmc/addons/library.xbmc.gui/libXBMC_gui-arm-linux.so || true
  ln -sf /usr/lib/xbmc/addons/library.xbmc.pvr/libXBMC_pvr-arm.so .install/usr/lib/xbmc/addons/library.xbmc.pvr/libXBMC_pvr-arm-linux.so || true
fi

for i in .install/usr/lib/xbmc/system/players/dvdplayer/*; do
  lib=$(basename $i)
  ln -s /usr/lib/xbmc/system/players/dvdplayer/$lib .install/usr/lib/$lib;
done

cp -P $ROOT/$PACKAGES/$PKG_SECTION/$1/scripts/xbmc-default-settings.sh \
  .install/usr/lib/xbmc/

# remove unneeded files from skins
for i in .install/usr/share/xbmc/addons/skin.*; do
  rm $i/media/Makefile*

  if [ -f $i/media/Textures.xbt ]; then
    find $i/media -type f -not -iregex ".*\.xbt" -delete
    find $i/media -type d -empty -delete
  fi
done

exit 0
