From 8f0d740e104758b558d8209d4736e7fcf0238b8e Mon Sep 17 00:00:00 2001
From: warped-rudi <r.ihle@s-t.de>
Date: Wed, 9 Nov 2016 09:27:39 +0100
Subject: [PATCH] MXC-CEC: Use instance data pointer whenever possible

---
 drivers/mxc/hdmi-cec/mxc_hdmi-cec.c | 191 +++++++++++++++++++-----------------
 1 file changed, 100 insertions(+), 91 deletions(-)

diff --git a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
index 8134cc8..80344d9 100644
--- a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
+++ b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
@@ -183,11 +183,11 @@ static u32 get_hpd_stat(struct hdmi_cec_priv *hdmi_cec)
 
 static irqreturn_t mxc_hdmi_cec_isr(int irq, void *data)
 {
-	struct hdmi_cec_priv *hdmi_cec = data;
+	struct hdmi_cec_priv *priv = data;
 	unsigned long flags;
 	u8 cec_stat;
 
-	spin_lock_irqsave(&hdmi_cec->irq_lock, flags);
+	spin_lock_irqsave(&priv->irq_lock, flags);
 
 	hdmi_writeb(CEC_STAT0_MASK_ALL, HDMI_IH_MUTE_CEC_STAT0);
 
@@ -195,58 +195,58 @@ static irqreturn_t mxc_hdmi_cec_isr(int irq, void *data)
 	hdmi_writeb(cec_stat, HDMI_IH_CEC_STAT0);
 
 	if ((cec_stat & ~CEC_STAT0_MASK_DEFAULT) == 0) {
-		if (hdmi_cec->is_started)
+		if (priv->is_started)
 			hdmi_writeb(CEC_STAT0_MASK_DEFAULT, HDMI_IH_MUTE_CEC_STAT0);
-		spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
+		spin_unlock_irqrestore(&priv->irq_lock, flags);
 		return IRQ_NONE;
 	}
 
 	pr_debug("HDMI-CEC: interrupt received\n");
 
-	hdmi_cec->cec_stat0 = cec_stat | get_hpd_stat(hdmi_cec);
-	schedule_work(&hdmi_cec->hdmi_cec_work);
+	priv->cec_stat0 = cec_stat | get_hpd_stat(priv);
+	schedule_work(&priv->hdmi_cec_work);
 
-	spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
+	spin_unlock_irqrestore(&priv->irq_lock, flags);
 
 	return IRQ_HANDLED;
 }
 
-static void mxc_hdmi_cec_handle(u32 cec_stat)
+static void mxc_hdmi_cec_handle(struct hdmi_cec_priv *priv, u32 cec_stat)
 {
 	int i;
 	struct hdmi_cec_event *event;
 
-	if (!hdmi_cec_data.open_count)
+	if (!priv->open_count)
 		return;
 
 	/*HDMI cable connected: handle first*/
 	if (cec_stat & CEC_STAT0_EX_CONNECTED) {
 		pr_info("HDMI-CEC: link connected\n");
 
-		mutex_lock(&hdmi_cec_data.lock);
+		mutex_lock(&priv->lock);
 		event = alloc_event();
 		if (!event) {
-			mutex_unlock(&hdmi_cec_data.lock);
+			mutex_unlock(&priv->lock);
 			return;
 		}
 		event->event_type = MESSAGE_TYPE_CONNECTED;
 		list_add_tail(&event->list, &ev_pending);
-		mutex_unlock(&hdmi_cec_data.lock);
+		mutex_unlock(&priv->lock);
 
 		wake_up(&rx_queue);
 	}
 
 	/*The current transmission is successful (for initiator only).*/
 	if (cec_stat & HDMI_IH_CEC_STAT0_DONE) {
-		hdmi_cec_data.tx_answer = cec_stat;
+		priv->tx_answer = cec_stat;
 		wake_up(&tx_queue);
 	}
 	/*EOM is detected so that the received data is ready in the receiver data buffer*/
 	if (cec_stat & HDMI_IH_CEC_STAT0_EOM) {
-		mutex_lock(&hdmi_cec_data.lock);
+		mutex_lock(&priv->lock);
 		event = alloc_event();
 		if (!event) {
-			mutex_unlock(&hdmi_cec_data.lock);
+			mutex_unlock(&priv->lock);
 			return;
 		}
 
@@ -254,7 +254,7 @@ static void mxc_hdmi_cec_handle(u32 cec_stat)
 		if (!event->msg_len || event->msg_len > MAX_MESSAGE_LEN) {
 			pr_err("HDMI-CEC: Invalid CEC message length\n");
 			list_add_tail(&event->list, &ev_idle);
-			mutex_unlock(&hdmi_cec_data.lock);
+			mutex_unlock(&priv->lock);
 			return;
 		}
 
@@ -263,41 +263,41 @@ static void mxc_hdmi_cec_handle(u32 cec_stat)
 			event->msg[i] = hdmi_readb(HDMI_CEC_RX_DATA0 + i);
 
 		list_add_tail(&event->list, &ev_pending);
-		mutex_unlock(&hdmi_cec_data.lock);
+		mutex_unlock(&priv->lock);
 
 		wake_up(&rx_queue);
 	}
 	/*An error is detected on cec line (for initiator only). */
 	if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_INIT) {
-		hdmi_cec_data.tx_answer = cec_stat;
+		priv->tx_answer = cec_stat;
 		wake_up(&tx_queue);
 		return;
 	}
 	/*A frame is not acknowledged in a directly addressed message. Or a frame is negatively acknowledged in
 	a broadcast message (for initiator only).*/
 	if (cec_stat & HDMI_IH_CEC_STAT0_NACK) {
-		hdmi_cec_data.send_error++;
-		hdmi_cec_data.tx_answer = cec_stat;
+		priv->send_error++;
+		priv->tx_answer = cec_stat;
 		wake_up(&tx_queue);
 	}
 	/*An error is notified by a follower. Abnormal logic data bit error (for follower).*/
 	if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_FOLL) {
-		hdmi_cec_data.receive_error++;
+		priv->receive_error++;
 	}
 
 	/*HDMI cable disconnected: handle last*/
 	if (cec_stat & CEC_STAT0_EX_DISCONNECTED) {
 		pr_info("HDMI-CEC: link disconnected\n");
 
-		mutex_lock(&hdmi_cec_data.lock);
+		mutex_lock(&priv->lock);
 		event = alloc_event();
 		if (!event) {
-			mutex_unlock(&hdmi_cec_data.lock);
+			mutex_unlock(&priv->lock);
 			return;
 		}
 		event->event_type = MESSAGE_TYPE_DISCONNECTED;
 		list_add_tail(&event->list, &ev_pending);
-		mutex_unlock(&hdmi_cec_data.lock);
+		mutex_unlock(&priv->lock);
 
 		wake_up(&rx_queue);
 	}
@@ -306,32 +306,36 @@ static void mxc_hdmi_cec_handle(u32 cec_stat)
 static void mxc_hdmi_cec_worker(struct work_struct *work)
 {
 	unsigned long flags;
+	struct hdmi_cec_priv *priv = &hdmi_cec_data;
 
-	mxc_hdmi_cec_handle(hdmi_cec_data.cec_stat0);
+	mxc_hdmi_cec_handle(priv, priv->cec_stat0);
 
-	if (hdmi_cec_data.cec_stat0 & HDMI_IH_CEC_STAT0_EOM)
+	if (priv->cec_stat0 & HDMI_IH_CEC_STAT0_EOM)
 		hdmi_writeb(0x0, HDMI_CEC_LOCK);
 
-	spin_lock_irqsave(&hdmi_cec_data.irq_lock, flags);
-	hdmi_cec_data.cec_stat0 = 0;
-	if (hdmi_cec_data.is_started)
+	spin_lock_irqsave(&priv->irq_lock, flags);
+	priv->cec_stat0 = 0;
+	if (priv->is_started)
 		hdmi_writeb(CEC_STAT0_MASK_DEFAULT, HDMI_IH_MUTE_CEC_STAT0);
-	spin_unlock_irqrestore(&hdmi_cec_data.irq_lock, flags);
+	spin_unlock_irqrestore(&priv->irq_lock, flags);
 }
 
 static int hdmi_cec_open(struct inode *inode, struct file *file)
 {
-	mutex_lock(&hdmi_cec_data.lock);
-	if (hdmi_cec_data.open_count) {
-		mutex_unlock(&hdmi_cec_data.lock);
+	struct hdmi_cec_priv *priv = &hdmi_cec_data;
+
+	mutex_lock(&priv->lock);
+	if (priv->open_count) {
+		mutex_unlock(&priv->lock);
 		return -EBUSY;
 	}
-	hdmi_cec_data.open_count = 1;
-	file->private_data = (void *)(&hdmi_cec_data);
-	hdmi_cec_data.tx_answer = CEC_TX_AVAIL;
-	hdmi_cec_data.logical_address = 15;
-	hdmi_cec_data.is_started = false;
-	mutex_unlock(&hdmi_cec_data.lock);
+	file->private_data = priv;
+
+	priv->tx_answer = CEC_TX_AVAIL;
+	priv->logical_address = 15;
+	priv->is_started = false;
+	priv->open_count = 1;
+	mutex_unlock(&priv->lock);
 	return 0;
 }
 
@@ -340,32 +344,33 @@ static ssize_t hdmi_cec_read(struct file *file, char __user *buf, size_t count,
 {
 	ssize_t len = 0;
 	struct hdmi_cec_event *event;
+	struct hdmi_cec_priv *priv = file->private_data;
 
 	pr_debug("function : %s\n", __func__);
 
-	mutex_lock(&hdmi_cec_data.lock);
+	mutex_lock(&priv->lock);
 
-	if (!hdmi_cec_data.is_started)
+	if (!priv->is_started)
 		len = -EACCES;
 	else if (count < offsetof(struct hdmi_cec_event, padding))
 		len = -EINVAL;
 
 	if (len < 0) {
-		mutex_unlock(&hdmi_cec_data.lock);
+		mutex_unlock(&priv->lock);
 		return len;
 	}
 
 	if (list_empty(&ev_pending)) {
 		if (file->f_flags & O_NONBLOCK) {
-			mutex_unlock(&hdmi_cec_data.lock);
+			mutex_unlock(&priv->lock);
 			return -EAGAIN;
 		}
 
 		do {
-			mutex_unlock(&hdmi_cec_data.lock);
+			mutex_unlock(&priv->lock);
 			if (wait_event_interruptible(rx_queue, !list_empty(&ev_pending)))
 				return -ERESTARTSYS;
-			mutex_lock(&hdmi_cec_data.lock);
+			mutex_lock(&priv->lock);
 		} while (list_empty(&ev_pending));
 	}
 
@@ -375,7 +380,7 @@ static ssize_t hdmi_cec_read(struct file *file, char __user *buf, size_t count,
 	if (copy_to_user(buf, event, len))
 		len = -EFAULT;
 	list_move_tail(&event->list, &ev_idle);
-	mutex_unlock(&hdmi_cec_data.lock);
+	mutex_unlock(&priv->lock);
 
 	return len;
 }
@@ -386,16 +391,17 @@ static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 	int ret = 0;
 	u8 i, msg_len, val;
 	u8 msg[MAX_MESSAGE_LEN];
+	struct hdmi_cec_priv *priv = file->private_data;
 
 	pr_debug("function : %s\n", __func__);
 
-	mutex_lock(&hdmi_cec_data.lock);
+	mutex_lock(&priv->lock);
 
-	if (!hdmi_cec_data.is_started)
+	if (!priv->is_started)
 		ret = -EACCES;
-	else if (hdmi_cec_data.tx_answer != CEC_TX_AVAIL)
+	else if (priv->tx_answer != CEC_TX_AVAIL)
 		ret = -EAGAIN;
-	else if (hdmi_cec_data.link_status != 1)
+	else if (priv->link_status != 1)
 		ret = -EAGAIN;
 	else if (count > MAX_MESSAGE_LEN)
 		ret = -EINVAL;
@@ -403,12 +409,12 @@ static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 		ret = -EACCES;
 
 	if (ret) {
-		mutex_unlock(&hdmi_cec_data.lock);
+		mutex_unlock(&priv->lock);
 		return ret;
 	}
 
-	hdmi_cec_data.send_error = 0;
-	hdmi_cec_data.tx_answer = CEC_TX_INPROGRESS;
+	priv->send_error = 0;
+	priv->tx_answer = CEC_TX_INPROGRESS;
 
 	msg_len = count;
 	hdmi_writeb(msg_len, HDMI_CEC_TX_CNT);
@@ -418,40 +424,41 @@ static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 	val |= 0x01;
 	hdmi_writeb(val, HDMI_CEC_CTRL);
 
-	mutex_unlock(&hdmi_cec_data.lock);
+	mutex_unlock(&priv->lock);
 
 	ret = wait_event_interruptible_timeout(
-		tx_queue, hdmi_cec_data.tx_answer != CEC_TX_INPROGRESS, HZ);
+		tx_queue, priv->tx_answer != CEC_TX_INPROGRESS, HZ);
 
 	if (ret < 0)
 		ret = -ERESTARTSYS;
-	else if (hdmi_cec_data.tx_answer & HDMI_IH_CEC_STAT0_DONE)
+	else if (priv->tx_answer & HDMI_IH_CEC_STAT0_DONE)
 		ret = msg_len;	/* msg sent, ACK received */
-	else if (hdmi_cec_data.tx_answer & HDMI_IH_CEC_STAT0_NACK)
+	else if (priv->tx_answer & HDMI_IH_CEC_STAT0_NACK)
 		ret = -EIO;	/* msg sent, NACK received */
 	else
 		ret = -EPIPE;	/* other error */
 
-	hdmi_cec_data.tx_answer = CEC_TX_AVAIL;
+	priv->tx_answer = CEC_TX_AVAIL;
 	return ret;
 }
 
 void hdmi_cec_hpd_changed(unsigned int state)
 {
+	u32 cec_stat0;
 	unsigned long flags;
-	u32           cec_stat0;
+	struct hdmi_cec_priv *priv = &hdmi_cec_data;
 
 	pr_debug("function : %s\n", __func__);
 
 	link_status = state & 1;
 
 	if (is_initialized) {
-		spin_lock_irqsave(&hdmi_cec_data.irq_lock, flags);
-		cec_stat0 = get_hpd_stat(&hdmi_cec_data);
-		spin_unlock_irqrestore(&hdmi_cec_data.irq_lock, flags);
+		spin_lock_irqsave(&priv->irq_lock, flags);
+		cec_stat0 = get_hpd_stat(priv);
+		spin_unlock_irqrestore(&priv->irq_lock, flags);
 
 		if (cec_stat0)
-			mxc_hdmi_cec_handle(cec_stat0);
+			mxc_hdmi_cec_handle(priv, cec_stat0);
 	}
 }
 EXPORT_SYMBOL(hdmi_cec_hpd_changed);
@@ -515,35 +522,35 @@ void hdmi_cec_stop_device(void)
 }
 EXPORT_SYMBOL(hdmi_cec_stop_device);
 
-static long hdmi_cec_ioctl(struct file *file, u_int cmd,
-		     u_long arg)
+static long hdmi_cec_ioctl(struct file *file, u_int cmd, u_long arg)
 {
-	int ret = 0, status = 0;
-	u8 val = 0;
+	u8 val;
+	int ret = 0;
 	struct mxc_edid_cfg hdmi_edid_cfg;
+	struct hdmi_cec_priv *priv = file->private_data;
 
 	pr_debug("function : %s\n", __func__);
 
 	switch (cmd) {
 	case HDMICEC_IOC_SETLOGICALADDRESS:
-		mutex_lock(&hdmi_cec_data.lock);
-		if (!hdmi_cec_data.is_started) {
-			mutex_unlock(&hdmi_cec_data.lock);
+		mutex_lock(&priv->lock);
+		if (!priv->is_started) {
+			mutex_unlock(&priv->lock);
 			pr_err("Trying to set logical address while not started\n");
 			return -EACCES;
 		}
-		hdmi_cec_data.logical_address = (u8)arg;
-		if (hdmi_cec_data.logical_address <= 7) {
-			val = 1 << hdmi_cec_data.logical_address;
+		priv->logical_address = (u8)arg;
+		if (priv->logical_address <= 7) {
+			val = 1 << priv->logical_address;
 			hdmi_writeb(val, HDMI_CEC_ADDR_L);
 			hdmi_writeb(0, HDMI_CEC_ADDR_H);
-		} else if (hdmi_cec_data.logical_address > 7 && hdmi_cec_data.logical_address <= 15) {
-			val = 1 << (hdmi_cec_data.logical_address - 8);
+		} else if (priv->logical_address <= 15) {
+			val = 1 << (priv->logical_address - 8);
 			hdmi_writeb(val, HDMI_CEC_ADDR_H);
 			hdmi_writeb(0, HDMI_CEC_ADDR_L);
 		} else
 			ret = -EINVAL;
-		mutex_unlock(&hdmi_cec_data.lock);
+		mutex_unlock(&priv->lock);
 		break;
 	case HDMICEC_IOC_STARTDEVICE:
 		hdmi_cec_start_device();
@@ -553,10 +560,9 @@ static long hdmi_cec_ioctl(struct file *file, u_int cmd,
 		break;
 	case HDMICEC_IOC_GETPHYADDRESS:
 		hdmi_get_edid_cfg(&hdmi_edid_cfg);
-		status = copy_to_user((void __user *)arg,
-					 &hdmi_edid_cfg.physical_address,
-					 4*sizeof(u8));
-		if (status)
+		if (copy_to_user((void __user *)arg,
+				 &hdmi_edid_cfg.physical_address,
+				 4 * sizeof(u8)))
 			ret = -EFAULT;
 		break;
 	default:
@@ -568,18 +574,20 @@ static long hdmi_cec_ioctl(struct file *file, u_int cmd,
 
 static int hdmi_cec_release(struct inode *inode, struct file *file)
 {
+	struct hdmi_cec_priv *priv = &hdmi_cec_data;
+
 	pr_debug("function : %s\n", __func__);
 
-	mutex_lock(&hdmi_cec_data.lock);
-	if (hdmi_cec_data.open_count) {
-		hdmi_cec_data.open_count = 0;
-		hdmi_cec_data.is_started = false;
-		hdmi_cec_data.logical_address = 15;
-		hdmi_cec_data.tx_answer = CEC_TX_AVAIL;
+	mutex_lock(&priv->lock);
+	if (priv->open_count) {
+		priv->open_count = 0;
+		priv->is_started = false;
+		priv->logical_address = 15;
+		priv->tx_answer = CEC_TX_AVAIL;
 
 		free_events();
 	}
-	mutex_unlock(&hdmi_cec_data.lock);
+	mutex_unlock(&priv->lock);
 
 	return 0;
 }
@@ -587,20 +595,21 @@ static int hdmi_cec_release(struct inode *inode, struct file *file)
 static unsigned int hdmi_cec_poll(struct file *file, poll_table *wait)
 {
 	unsigned int mask = 0;
+	struct hdmi_cec_priv *priv = file->private_data;
 
 	pr_debug("function : %s\n", __func__);
 
 	poll_wait(file, &rx_queue, wait);
 	poll_wait(file, &tx_queue, wait);
 
-	if (hdmi_cec_data.link_status == 1 &&
-	    hdmi_cec_data.tx_answer == CEC_TX_AVAIL)
+	if (priv->link_status == 1 &&
+	    priv->tx_answer == CEC_TX_AVAIL)
 		mask |= POLLOUT | POLLWRNORM;
 
-	mutex_lock(&hdmi_cec_data.lock);
+	mutex_lock(&priv->lock);
 	if (!list_empty(&ev_pending))
 		mask |= POLLIN | POLLRDNORM;
-	mutex_unlock(&hdmi_cec_data.lock);
+	mutex_unlock(&priv->lock);
 
 	return mask;
 }
-- 
1.9.1

