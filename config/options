# Target system we want to cross compile for (i386/x86_64/powerpc/powerpc64/arm/mips)
TARGET_ARCH=i386

# Target platform we want to run GeeXboX on (keep it blank for generic)
# Available: easygate
TARGET_PLATFORM=

# The TARGET_CPU variable controls which processor should be targeted for
# generated code.
case $TARGET_ARCH in
  i386)
    # (AMD CPUs)    k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3
    #               athlon-fx athlon-mp athlon-xp athlon-4
    #               athlon-tbird athlon k6-3 k6-2 k6 geode
    # (Intel CPUs)  core2 nocona prescott pentium4[m] pentium3[m] pentium-m
    #               pentium2 pentiumpro pentium-mmx pentium
    #               i686 i586 i486 i386
    # (VIA CPUs)    c3 c3-2
    #
    # TARGET_CPU=generic
    ;;

  x86_64)
    # (AMD CPUs)    k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3
    #               athlon-fx amdfam10 barcelona
    # (Intel CPUs)  core2 nocona atom
    #
    # TARGET_CPU=generic
    ;;

  powerpc)
    # 401 403 405 405fp 440 440fp 505 601 602 603 603e ec603e 604 604e
    # 620 630 740 7400 7450 750 801 821 823 860 970 rios rios1 rios2 rsc rs64a
    # common G3 G4 G5 power power2 power3 power4 power5 powerpc powerpc64
    #
    # TARGET_CPU=powerpc
    ;;

  powerpc64)
    # 970 rs64a common G5 power4 power5 powerpc64
    #
    # TARGET_CPU=powerpc64
    ;;

  arm)
    # arm2 arm250 arm3 arm6 arm60 arm600 arm610 arm620 arm7 arm7m arm7d
    # arm7dm arm7di arm7dmi arm70 arm700 arm700i arm710 arm710c
    # arm7100 arm720 arm7500 arm7500fe arm7tdmi arm7tdmi-s arm710t
    # arm720t arm740t strongarm strongarm110 strongarm1100
    # strongarm1110 arm8 arm810 arm9 arm9e arm920 arm920t arm922t
    # arm946e-s arm966e-s arm968e-s arm926ej-s arm940t arm9tdmi
    # arm10tdmi arm1020t arm1026ej-s arm10e arm1020e arm1022e
    # arm1136j-s arm1136jf-s mpcore mpcorenovfp arm1156t2-s
    # arm1176jz-s arm1176jzf-s cortex-a8 cortex-a9 cortex-r4
    # cortex-r4f cortex-m3 cortex-m1 xscale iwmmxt iwmmxt2 ep9312.
    #
    # TARGET_CPU=cortex-a8
    ;;

  mips)
    # mips32
    #
    # TARGET_CPU=mips32
    ;;
esac

# Build optimizations (size/speed/no)
OPTIMIZATIONS=speed

# Target system library C (uClibc/glibc/eglibc)
TARGET_LIBC=eglibc

# Need to point to your actual cc
# If you have ccache installed, take care that LOCAL_CC don't point to it
LOCAL_CC=`which gcc`

# Need to point to your actual g++
# If you have ccache installed, take care that LOCAL_CXX don't point to it
LOCAL_CXX=`which g++`

# Support C++ in toolchain
TOOLCHAIN_CXX=no

# Compression method (none/gzip/lzma)
# LZMA decrease image size but GZIP is way faster to decompress and boot.
COMPRESSION_METHOD=lzma

# Menu languages to include in the ISO (en is included by default)
# (ar/bg/br/ca/cs/de/es/en/et/fi/fr/gr/he/hu/it/nl/no/pl/ro/ru/sk/sr/sv/vn)
INCLUDED_LANGS="fr de es it"

# Menu language (ar/bg/br/ca/cs/de/en/es/et/fi/fr/gr/he/hu/it/nl/no/pl/ro/ru/sk/sr/sv/vn)
MENU_LANG=en

# Subtitle charset (ar/bg/br/ca/cs/de/en/es/et/fi/fr/gr/he/hu/it/nl/no/pl/ro/ru/sk/sr/sv/vn)
# Can also be set to a charset code (iso-8859-{1,2,6,7,8,9}/windows-125{0,1,2,3,6}/koi8-r)
# when empty it defaults to $MENU_LANG
SUB_CHARSET=

# Locales to include in the ISO
# can be empty or a list of locale names
# e.g. "en_US.ISO-8859-1 it_IT.UTF-8"
# used only when TARGET_LIBC=glibc
INCLUDED_LOCALES=

# Default locale to use (empty disables locale support)
# remember to set INCLUDED_LOCALES accordingly
# used only when TARGET_LIBC=glibc
DEFAULT_LOCALE=

# Timezones to include in the ISO
# can be empty, "all" or a list of zoneinfo names
# e.g. "Europe/Rome GMT Africa America/Kentucky"
# used only when TARGET_LIBC=glibc
INCLUDED_TIMEZONES=

# Timezone to use (empty disables timezone support)
# if TARGET_LIBC=uClibc use a TZ environment string
# if TARGET_LIBC=glibc use a zoneinfo name and remember to set INCLUDED_TIMEZONES accordingly
TIMEZONE=

# Keymap (qwerty/azerty/qwertz)
KEYMAP=qwerty

# Lirc Remote Control Support (yes/no)
LIRC=yes

# Remote to Use (pctv/logitech/hauppauge/realmagic/creative/leadtek/
# leadtek-pvr2000/RM-S6/RX-V850/animax/askey/avermedia/packard_bell/atiusb/
# atiusb2/LG/D-10/digimatrix/mceusb/streamzap/cinergy1400/nova-s-plus/twinhan/
# tosh-vt76f/flytv-prime/Medion-X10/imonknob/ultrax/dvico/MCE-X10)
REMOTE=atiusb

# Remote receiver to use (animax/askey/avermedia/atiusb/atiusb2/creative/
# hauppauge/homemade/irman/leadtek/leadtek-pvr2000/logitech/pctv/realmagic/
# digimatrix/mceusb/mceusb2/nuvoton/streamzap/cx88/imonknob/ultrax/dvico/
# MCE-X10)
RECEIVER=atiusb

# Use Extra Binary Firmwares - WiFi/DVB cards (yes/no)
EXTRAFIRMWARES=no

# Use Extra Non-Free Fonts, required for Asian Font Support (yes/no)
EXTRAFONTS=no

# Mount CD/DVD disc images over loop device (yes/no)
FUSEISO=no

# Network Support (Samba shares and FTP Server) (yes/no)
NETWORK=yes

# Samba client support (yes/no)
SAMBA=yes

# Samba server support (yes/no)
SAMBA_SERVER=no

# Start network services ? (Anonymous Telnet and FTP server as root) (yes/no)
SERVICES=no

# Wireless network support (yes/no)
WIFI=yes

# Use NdisWrapper for Windows network driver support (yes/no)
NDISWRAPPER=yes

# Allow use of WPA_Supplicant for WPA-PSK secured wireless networks (yes/no)
WPA_SUPPLICANT=yes

# enable olsr protocol (yes/no)
OLSR=no

# Add LIVE555 support (requires glibc and forces c++ support)
LIVE555=no

# Support for SDL library (yes/no)
SDL=no

# Support for DirectFB library (yes/no)
DIRECTFB=no

# Support for regular console mode (a.k.a. SD mode) (yes/no)
CONSOLE=no

# Support for X.org server (a.k.a. HD mode) (yes/no)
XORG=yes

# X.org drivers to use (all/ati/fbdev/glint/i740/intel/mach64/mga/neomagic/nv
# nouveau/omapfb/openchrome/r128/s3/s3virge/savage/sis/tdfx/trident/vesa/vmware)
# Space separated list is supported, e.g. XORG_DRIVERS="ati s3"
XORG_DRIVERS="all"

# Include nVidia proprietary X.Org video driver
NVIDIA=no

# Use VDPAU video acceleration (needs nVidia driver and a supported card)
VDPAU=no

# Support for Bluetooth devices
BLUETOOTH=no

# Support for Wiimote
WIIMOTE=no

# Default boot method (geexbox/hdtv/install/debug/hdtvdebug)
BOOT_DEFAULT=

# Support for emulators (yes/no)
EMULATORS=no

# Support for installator (yes/no)
INSTALLATOR=yes

# Support for games (yes/no)
GAMES=no

# Support for PulseAudio (yes/no)
PULSEAUDIO=yes

# Support for GStreamer (yes/no)
GSTREAMER=no

# Support for VideoLAN (yes/no)
VLC=no

# Support for QT (yes/no)
QT=no

# Support for WebKit (yes/no)
WEBKIT=no

# Support for OpenMAX (yes/no)
OPENMAX=no

# Support for Video Disk Recorder (VDR)
VDR=no

# VDR plugins to install (all/remote/...)
# Space separated list is supported, e.g. VDR_PLUGINS="remote streamdev"
VDR_PLUGINS="all"

# VDR output device (dvbsddevice/dxr3/pvr350/dummydevice/xine)
VDR_OUTPUT="xine"

# Provide system statistics to GeeXboX project (yes/no)
STATS=yes
STATS_ENABLED=no

# Use some extra kernel cmdline options, such as e.g. "nomodeset"
EXTRA_CMDLINE_PARAMS=""

# enable use of LVM
LVM=no

# enable debugging (debugging flags and enables gdb)
# set to "all" or list space separated packages to debug, empty for none
# don't forget to add related libraries too
# e.g.  DEBUG_PKGS="enna libvalhalla eglibc eina evas ecore embryo edje elementary curl libplayer libxrandr libcddb lirc gettext"
DEBUG_PKGS=""

# enable gdb (yes/no)
GDB=no

# enable devel tools (yes/no)
DEVTOOLS=no

# enable bootchart (yes/no)
BOOTCHART=no

# support for unrar (yes/no)
# CAUTION: this is non-free
UNRAR=no

# verbose compilation mode (yes/no)
VERBOSE=yes

# rebuild the sysroot from scratch at each package compilation (yes/no)
DYNAMIC_SYSROOT=no

# Burning options

# device (ex: 0,0,0). See the output of cdrecord -scanbus.
BURNER=/dev/cdrw

# blank the CD-RW before burning (yes/no)
BLANK=yes

# you can also pass options to cdrecord :
CDRECORD_OPTS=


# Concurrency make level (-j option)
#  Try value 1 (default) to 4 on single CPU computer, or more on
#  multi-processor computer (like hyperthreading SMP CPU)
CONCURRENCY_MAKE_LEVEL=1

# read personal options if available
test -f "$HOME/.geexbox-options" && . "$HOME/.geexbox-options"

. config/path
