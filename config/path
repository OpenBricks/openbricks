#!/bin/sh

set -e

#################################
# Target system path definition #
#################################

XORG_PATH_ENCODINGS=/usr/share/fonts/X11/encodings
XORG_PATH_FONTS=/usr/share/X11/fonts
XORG_PATH_MAPS=$XORG_PATH_FONTS/util
XORG_PATH_DRI=/usr/lib/dri
XORG_PATH_EGL=/usr/lib/egl
XORG_PATH_VAAPI=/usr/lib/va
XORG_PATH_XKB=/usr/share/X11/xkb
XORG_PATH_XKB_OUTPUT=/var/lib/xkb
XORG_PATH_XKB_CACHE=/var/cache/xkb
XORG_PATH_RGB=/usr/lib/X11/rgb
XORG_PATH_MODULES=/usr/lib/xorg/modules
XORG_PATH_DRIVERS=/usr/lib/xorg/modules/drivers
XORG_PATH_ICONS=/usr/share/X11/icons

QT_PATH_PREFIX=/usr
QT_PATH_CFG=/etc
QT_PATH_BINS=$QT_PATH_PREFIX/bin
QT_PATH_SUBLIB=$QT_PATH_PREFIX/lib/qt4
QT_PATH_DATA=$QT_PATH_PREFIX/share/qt4
QT_PATH_DOCS=$QT_PATH_DATA/doc
QT_PATH_TRANSLATIONS=$QT_PATH_DATA/translations
QT_PATH_PLUGINS=$QT_PATH_SUBLIB/plugins
QT_PATH_IMPORTS=$QT_PATH_SUBLIB/imports
QT_PATH_DEMOS=$QT_PATH_SUBLIB/demos
QT_PATH_EXAMPLES=$QT_PATH_SUBLIB/examples

################################
# Static build path definition #
################################

DISTRO_VERSION=$(cat VERSION)
DISTRO_COPYRIGHT=$(cat COPYRIGHT)
DISTRO_SOURCE="https://github.com/OpenBricks/openbricks.git"
DISTRO_MAINTAINER="The GeeXboX Team (http://www.geexbox.org)"
CONFIG=config
UTILS=utils
SCRIPTS=scripts
PACKAGES=packages
OVERLAYS=overlays
SOURCES=sources
BINARIES=binaries
BUILD_BASE=build/build
BUILD_NOARCH=$BUILD_BASE.host
STAMPS_NOARCH=.stamps
DOCS=DOCS
ROOT="/tmp/openbricks"
REAL_ROOT=$(pwd)

if [ -n "$DO_NOT_SET_ROOT" ] ; then
  ROOT=$REAL_ROOT
else
  if [ "x${ROOT_SET}" = "x" ] && [ -h "$ROOT" ] && [ "x$(readlink $ROOT)" != "x${REAL_ROOT}" ]; then
    echo "Deleting symlink: $ROOT -> $(readlink $ROOT)"
    rm $ROOT
  fi
  if ! [ -d "$ROOT" ] ; then
    echo "Creating symlink: $ROOT -> $REAL_ROOT"
    ln -s $REAL_ROOT $ROOT
  #else
  #  echo "$ROOT already exists"
  fi
fi

if [ "$REAL_ROOT" != "$ROOT" ]; then
#  echo "We are not in $ROOT, changing directory."
  cd $ROOT
  export ROOT_SET="ok"
#else
#  echo "Already in $ROOT"
fi

######################
# Toolchain Settings #
######################
NUM_PROCESSORS=$(grep -c processor /proc/cpuinfo)
[ -z "$CONCURRENCY_MAKE_LEVEL" ] && CONCURRENCY_MAKE_LEVEL=0
[ $CONCURRENCY_MAKE_LEVEL -lt 1 ] || [ $CONCURRENCY_MAKE_LEVEL -gt $NUM_PROCESSORS ] && \
  CONCURRENCY_MAKE_LEVEL=$NUM_PROCESSORS
[ -n "$DOOZER_CONCURRENCY_MAKE_LEVEL" ] && CONCURRENCY_MAKE_LEVEL=$DOOZER_CONCURRENCY_MAKE_LEVEL
[ -n "$JENKINS_CONCURRENCY_MAKE_LEVEL" ] && CONCURRENCY_MAKE_LEVEL=$JENKINS_CONCURRENCY_MAKE_LEVEL

. config/toolchain

TOOLCHAIN_LANGUAGES=c
[ "$TOOLCHAIN_CXX" = yes ] && TOOLCHAIN_LANGUAGES=${TOOLCHAIN_LANGUAGES},c++

set_ccache

export MAKEFLAGS=-j$CONCURRENCY_MAKE_LEVEL

if [ -z "$PATH" ] || [ "$PATH" = "${PATH#$ROOT/$TOOLCHAIN/bin:}" ]; then
  export PATH="$ROOT/$TOOLCHAIN/bin:$PATH"
fi

SILENT_OUT=3
VERBOSE_OUT=4
if [ "$VERBOSE" = yes ]; then
  exec 3>&1
  exec 4>&2
else
  exec 3>&2
  exec 4>/dev/null
fi
TITLE_INDENT_SIZE=4

DISTRONAME_LC=$(echo $DISTRONAME | tr '[:upper:]' '[:lower:]')
DISTRONAME_UC=$(echo $DISTRONAME | tr '[:lower:]' '[:upper:]')
DISTRODIR=$(echo $DISTRONAME_UC | tr -cd '[:alnum:]' | cut -c -8)

DISTRO_SRCS="http://sources.geexbox.org/$DISTRO_VERSION"
DISTRO_FW="http://download.geexbox.org/firmwares"
SFNET_SRCS="http://prdownloads.sourceforge.net"
XORG_SRCS="http://xorg.freedesktop.org/releases/individual"
CPAN_SRCS="http://search.cpan.org/CPAN/authors/id"

if [ "$DISTRO_VERSION" = devel ]; then
  DISTRO_VERSION=$DISTRO_VERSION-$(date +%Y%m%d)
  if [ -d .hg ]; then
    DISTRO_VERSION=$DISTRO_VERSION-r$(hg tip --template={rev})
  elif [ -d .git ]; then
    DISTRO_VERSION=$DISTRO_VERSION-r$(git rev-parse --short HEAD)
  fi
fi
[ -n "$DISTRO_VERSION_EXTRA" ] && DISTRO_VERSION=$DISTRO_VERSION-$DISTRO_VERSION_EXTRA

VERSION_SUFFIX=$TARGET_ARCH
[ -n "$TARGET_PLATFORM" ] && [ "$TARGET_PLATFORM" != generic ] && \
  VERSION_SUFFIX=$TARGET_PLATFORM
[ -n "$TARGET_MACHINE" ] && [ "$TARGET_MACHINE" != generic ] && \
  VERSION_SUFFIX=$TARGET_MACHINE

BINROOT=$BINARIES/binaries.$VERSION_SUFFIX
ISO=$BINROOT/$FLAVOUR-$DISTRO_VERSION-$VERSION_SUFFIX.iso
JFFS2=$BINROOT/$FLAVOUR-$DISTRO_VERSION-$VERSION_SUFFIX.jffs2
UBIFS=$BINROOT/$FLAVOUR-$DISTRO_VERSION-$VERSION_SUFFIX.ubifs
EXT2FS=$BINROOT/$FLAVOUR-$DISTRO_VERSION-$VERSION_SUFFIX.ext2
INITRAMFS_NAME=$BINROOT/$FLAVOUR-$DISTRO_VERSION-$VERSION_SUFFIX.initramfs
SNOWBALL_EMMC=$BINROOT/$FLAVOUR-$DISTRO_VERSION-$VERSION_SUFFIX.emmc
GENERATOR_NAME=$BINROOT/$FLAVOUR-generator-$DISTRO_VERSION.$VERSION_SUFFIX
FLAT_NAME=$BINROOT/$FLAVOUR-flat-$DISTRO_VERSION.$VERSION_SUFFIX
TARBALL_DIR=$BINROOT/$FLAVOUR-$DISTRO_VERSION.$VERSION_SUFFIX
TARBALL_NAME=$TARBALL_DIR.tar
XZ_NAME=$TARBALL_NAME.xz
TBZ2_NAME=$TARBALL_NAME.bz2
PXE_NAME=$BINROOT/$FLAVOUR-pxe/$DISTRONAME_UC.$VERSION_SUFFIX
VMX_NAME=$BINROOT/$FLAVOUR-vmx

REPO_S="download.geexbox.org"
F_PATH=${REPO_S}:/data/openbricks.org/download/$BINROOT/$PACKAGES
REPO_PATH="http://$REPO_S/$BINROOT/$PACKAGES"
REPO_G=download.geexbox.org

case $DISTRO_VERSION in 
  devel* )  OPKG_REPO="http://$REPO_G/snapshots/$FLAVOUR-$MEDIA_CENTER_FRONTEND-$TARGET_PLATFORM-$VERSION_SUFFIX/latest/binaries.$VERSION_SUFFIX/packages" ;;
  *)        OPKG_REPO="http://$REPO_G/binaries/$VERSION_SUFFIX/latest/packages" ;;
esac  

PKGROOT=$ROOT/$BINROOT/packages
DEVPKGROOT=$ROOT/$BUILD/devpackages
PKGROOT_STAGE=$ROOT/$BUILD/packages/staging
DEVPKGROOT_STAGE=$DEVPKGROOT/staging
DEVROOT=$ROOT/$BUILD/devroot

HOST_NAME_CACHE=$TOOLCHAIN/share/configtools/host_name
if [ -f $HOST_NAME_CACHE ]; then
  HOST_NAME=$(cat $HOST_NAME_CACHE)
elif [ -x $TOOLCHAIN/share/configtools/config.guess ]; then
  HOST_NAME=$($TOOLCHAIN/share/configtools/config.guess)
fi

PERL_V=$(cat packages/perl/perl/meta | grep PKG_VERSION= | cut -d= -f2)

# need to be fixed ...
PACKAGE_URL="$(ls -d $PACKAGES/*/$1 2>/dev/null ||true)/url"
[ -r "$PACKAGE_URL.$TARGET_ARCH" ] && PACKAGE_URL="$PACKAGE_URL.$TARGET_ARCH"
[ -n "$TARGET_PLATFORM" ] && [ -r "$PACKAGE_URL.$TARGET_PLATFORM" ] && \
PACKAGE_URL="$PACKAGE_URL.$TARGET_PLATFORM"

CONFIG_PLATFORM=$ROOT/$CONFIG/platforms/$TARGET_ARCH/$TARGET_PLATFORM
CONFIG_PLATFORM_GENERIC=$ROOT/$CONFIG/platforms/$TARGET_ARCH/generic
PLATFORM_PACKAGES="$CONFIG_PLATFORM/packages"
CONFIG_MACHINE=$ROOT/$CONFIG/platforms/$TARGET_ARCH/$TARGET_PLATFORM/machines/$TARGET_MACHINE
MACHINE_PACKAGES="$CONFIG_MACHINE/packages"
CONFIG_FLAVOUR=$ROOT/$CONFIG/flavours/$FLAVOUR
FLAVOUR_PACKAGES="$CONFIG_FLAVOUR/packages"

. config/functions

setup_toolchain target
