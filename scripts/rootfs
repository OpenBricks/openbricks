#!/bin/sh

. config/options

export INSTALL=$ROOTFS

mkdir -p $INSTALL

# bootstrap the build environment
$SCRIPTS/build opkg-utils
$SCRIPTS/build opkg-host
$SCRIPTS/installdev opkg-utils
$SCRIPTS/installdev opkg-host

# list packages already in the rootfs
for f in $INSTALL/var/lib/opkg/info/*.control ; do
  package=`basename $f .control`
  if [ -z "$INSTALLED_PACKAGES" ]; then
    INSTALLED_PACKAGES="$package"
  else
    INSTALLED_PACKAGES="$INSTALLED_PACKAGES $package"
  fi
done

# remove stale packages
for package in $INSTALLED_PACKAGES; do
  drop_package=yes
  for rootfs_package in $ROOTFS_PACKAGES; do
    [ "$package" != "$rootfs_package" ] && continue
    # the package is in $ROOTFS_PACKAGES, keep it
    drop_package=no
    break
  done
  [ "$drop_package" = yes ] && $SCRIPTS/uninstall $package
done

for rootfs_package in $ROOTFS_PACKAGES; do
  install_package=yes
  for package in $INSTALLED_PACKAGES; do
    package=`basename $f .control`
    [ "$rootfs_package" != "$package" ] && continue
    # the package is already installed, skip it
    install_package=no
    break
  done
  [ "$install_package" = yes ] && $SCRIPTS/install $rootfs_package
done

for package in $OPK_PACKAGES; do
  $SCRIPTS/package $package
done

# create kernel modules dependancies
$SCRIPTS/installdev module-init-tools
VER=`ls $BUILD/linux*/modules/lib/modules`
rm -f $INSTALL/lib/modules/$VER/modules.*
$ROOT/$TOOLCHAIN/bin/depmod -b $INSTALL -v $VER > /dev/null
for i in `ls $INSTALL/lib/modules/*/modules.* | grep -v modules.dep | grep -v modules.alias | grep -v modules.symbols`; do
  rm -f $i
done

# strip kernel modules
for MOD in `find $INSTALL/lib/modules/ -name *.ko`; do
  $STRIP --strip-debug $MOD
done

exit 0
