#!/bin/sh

. config/options

if [ "$1" = "--force" ]; then
  FORCE=true
  shift
fi

get_meta $1

mkdir -p $ROOT/$TOOLCHAIN/var/lib/opkg/info/
STAMP=$ROOT/$TOOLCHAIN/var/lib/opkg/info/$1.control
PACKAGE=$DEVPKGROOT/$PKG_OPK_DEV

# check for platform-specific package overlay
INSTALLDEV_RULE=$PACKAGES/$1/installdev
PLATFORM_INSTALLDEV="$PLATFORM_PACKAGES/$1/installdev"
[ -r "$PLATFORM_INSTALLDEV" ] && INSTALLDEV_RULE="$PLATFORM_INSTALLDEV"
MACHINE_INSTALLDEV="$MACHINE_PACKAGES/$1/installdev"
[ -r "$MACHINE_INSTALLDEV" ] && INSTALLDEV_RULE="$MACHINE_INSTALLDEV"

# check for flavour-specific package overlay
FLAVOUR_INSTALLDEV="$FLAVOUR_PACKAGES/$1/installdev"
[ -r "$FLAVOUR_INSTALLDEV" ] && INSTALLDEV_RULE="$FLAVOUR_INSTALLDEV"

if [ ! -f $INSTALLDEV_RULE ]; then
  echo "$1 is not a dev package, skipping..." >&$VERBOSE_OUT
  exit 0
fi

if [ -f $STAMP ]; then
  if [ $PACKAGES/$1/unpack -nt $STAMP -o $PACKAGES/$1/patches -nt $STAMP ] || [ $PACKAGES/$1/build -nt $STAMP ]; then
    $SCRIPTS/clean $1
  elif [ $INSTALLDEV_RULE -nt $STAMP ]; then
    $SCRIPTS/unpackagedev $1
  fi

  [ -f $PACKAGE -a $PACKAGE -nt $STAMP ] && $SCRIPTS/uninstalldev $1
fi

if [ "$FORCE" != true -a -f $STAMP ]; then
  echo "$1 already installed, skipping..." >&$VERBOSE_OUT
  exit 0
fi

printf "%${INDENT}c INSTALLDEV  $1\n" >&$SILENT_OUT
export INDENT=$((${INDENT:-1}+$INDENT_SIZE))

$SCRIPTS/packagedev $1

for p in $PKG_DEV_DEPENDS; do
  $SCRIPTS/installdev $p
done

if [ -f $PACKAGE ]; then
  $ROOT/$TOOLCHAIN/bin/opkg --offline-root $ROOT/$TOOLCHAIN \
                            install $PACKAGE >&$VERBOSE_OUT

  # opkg installs the control file with the same timestamp of the package
  # this breaks our scripts, so we touch the control file to make sure it's
  # more recent than the package
  touch $STAMP
fi

exit 0
